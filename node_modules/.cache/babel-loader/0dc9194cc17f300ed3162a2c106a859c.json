{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, Circle } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport React, { Component, Fragment } from \"react\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\nimport data from \"../../../data/Data\";\n\nclass PeopleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location_data: [],\n      openToogleList: Array(data.length).fill(false)\n    };\n  }\n\n  componentDidMount() {\n    console.log();\n    Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\"); // set response language. Defaults to english.\n\n    Geocode.setLanguage(\"en\"); // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n    Geocode.setRegion(\"aus\");\n    Geocode.enableDebug(); // Get latidude & longitude from address.\n\n    for (var i = 0; i < data.length; i++) {\n      Geocode.fromAddress(data[i].address).then(response => {\n        const _response$results$0$g = response.results[0].geometry.location,\n              lat = _response$results$0$g.lat,\n              lng = _response$results$0$g.lng;\n        this.setState({\n          location_data: [...this.state.location_data, {\n            lat,\n            lng\n          }]\n        });\n        console.log(lat);\n        console.log(lng);\n      }, error => {\n        console.error(error);\n      });\n    }\n  }\n\n  onOpen(index) {\n    let newToogleList = [...this.state.openToogleList];\n    newToogleList[index] = true;\n    this.setState({\n      openToogleList: newToogleList\n    });\n  }\n\n  render() {\n    return React.createElement(GoogleMap, {\n      defaultZoom: 10,\n      defaultCenter: {\n        lat: -33.797,\n        lng: 151.1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.location_data.map((item, index) => {\n      return React.createElement(Marker, {\n        position: item,\n        key: index,\n        onClick: () => this.onOpen(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.state.openToogleList[index] && React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(InfoWindow, {\n        onCloseClick: () => this.onOpen(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Name: \", data[index].name)), React.createElement(Circle, {\n        defaultCenter: {\n          lat: parseFloat(item.lat),\n          lng: parseFloat(item.lng)\n        },\n        radius: 3000,\n        options: {\n          strokeColor: \"#ff0000\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })));\n    }));\n  }\n\n}\n\nconst MapContainer = compose(withStateHandlers(() => ({\n  isOpen: true\n}), {\n  onToggleOpen: ({\n    isOpen\n  }) => () => ({\n    isOpen: !isOpen\n  })\n}), withScriptjs, withGoogleMap)(PeopleMap);\nexport default MapContainer; //   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js"],"names":["withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","Circle","Geocode","React","Component","Fragment","compose","withProps","withStateHandlers","data","PeopleMap","constructor","props","state","location_data","openToogleList","Array","length","fill","componentDidMount","console","log","setApiKey","setLanguage","setRegion","enableDebug","i","fromAddress","address","then","response","results","geometry","location","lat","lng","setState","error","onOpen","index","newToogleList","render","map","item","name","parseFloat","strokeColor","MapContainer","isOpen","onToggleOpen"],"mappings":"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","sourcesContent":["import {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow, \n    Circle\n  } from \"react-google-maps\";\n  import Geocode from \"react-geocode\";\n  import React, {Component, Fragment} from \"react\"\n  import { compose, withProps, withStateHandlers } from \"recompose\"\nimport data from \"../../../data/Data\";\n\n  class PeopleMap extends Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        location_data: [],\n        openToogleList: Array(data.length).fill(false)\n      }\n    }\n    componentDidMount(){\n      console.log()\n      Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\");\n \n      // set response language. Defaults to english.\n      Geocode.setLanguage(\"en\");\n      \n      // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n      Geocode.setRegion(\"aus\");\n      Geocode.enableDebug();\n      \n      \n      \n      // Get latidude & longitude from address.\n      \n      for (var i=0; i< data.length; i++){\n        \n        Geocode.fromAddress(data[i].address).then(\n          response => {\n            const { lat, lng } = response.results[0].geometry.location;\n            this.setState({\n              location_data: [...this.state.location_data, { lat,lng}]\n            })\n            console.log(lat)\n            console.log(lng)\n            \n\n          },\n          error => {\n            console.error(error);\n          }\n        );\n        \n      }\n    }\n    \n    onOpen(index){\n      let newToogleList = [...this.state.openToogleList];\n      newToogleList[index] = true;\n\n      this.setState({\n        openToogleList: newToogleList\n      }\n      )\n    }\n    \n    render(){\n   \n      return(\n        <GoogleMap\n      defaultZoom={10}\n      defaultCenter={{ lat: -33.797, lng: 151.1 }}\n    >\n      \n      {this.state.location_data.map((item, index)=>{\n        return(\n          <Marker\n        position={item}\n        key = {index}\n        onClick={() => this.onOpen(index) }\n      >\n        {this.state.openToogleList[index] && \n        <Fragment>\n        <InfoWindow onCloseClick={()=> this.onOpen(index)}>\n          <h3>Name: {data[index].name}</h3>\n\n        </InfoWindow>\n        <Circle\n        defaultCenter={{\n          lat: parseFloat(item.lat),\n          lng: parseFloat(item.lng)\n        }}\n        radius={3000}\n        options={{strokeColor: \"#ff0000\"}}\n      />\n      </Fragment>\n        }\n         \n          </Marker>\n        )\n      })}\n      \n    </GoogleMap>\n      )\n    }\n  }\n  const MapContainer =compose(\n    withStateHandlers(() => ({\n      isOpen: true,\n    }), {\n      onToggleOpen: ({ isOpen }) => () => ({\n        isOpen: !isOpen,\n      })\n    }),\n    withScriptjs,\n    withGoogleMap\n  )(PeopleMap);\n  \n  export default MapContainer\n  \n//   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />"]},"metadata":{},"sourceType":"module"}