{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, Circle } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport React, { Component, Fragment } from \"react\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\nimport { getDistance } from 'geolib';\nimport data from \"../../../data/Data\";\n\nclass PeopleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      location_data: [],\n      openToogleList: Array(data.length).fill(true),\n      defaultMapSize: {\n        lat: -33.797,\n        lng: 151.1\n      }\n    };\n  }\n\n  componentDidMount() {\n    Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\"); // set response language. Defaults to english.\n\n    Geocode.setLanguage(\"en\"); // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n    Geocode.setRegion(\"aus\");\n    Geocode.enableDebug(); // Get latidude & longitude from address.\n\n    for (var i = 0; i < data.length; i++) {\n      Geocode.fromAddress(data[i].address).then(response => {\n        const _response$results$0$g = response.results[0].geometry.location,\n              lat = _response$results$0$g.lat,\n              lng = _response$results$0$g.lng;\n        this.setState({\n          location_data: [...this.state.location_data, {\n            lat,\n            lng\n          }]\n        });\n        console.log(lat);\n        console.log(lng);\n      }, error => {\n        console.error(error);\n      });\n    }\n\n    console.log(this.props.windowSize); // if (this.props.clickable ===true){\n    //   console.log(\"hello\")\n    //   for (var i =0; i < this.state.location_data.length; i++){\n    //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n    //       console.log('world')\n    //       // let item =this.state.location_data[i]\n    //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n    //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n    //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n    //       this.setState({\n    //         // defaultMapSize: copyDefaultMapSize,\n    //         windowSize:20\n    //       })\n    //       break;\n    //     }\n    //   // }\n    //   }\n    // }\n  } // componentDidUpdate(previousProps, previousState){\n  //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n  //     if (this.props.clickable ===true){\n  //       console.log(\"hello\")\n  //       for (var i =0; i < this.state.location_data.length; i++){\n  //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n  //           console.log('world')\n  //           // let item =this.state.location_data[i]\n  //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n  //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n  //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n  //           this.setState({\n  //             // defaultMapSize: copyDefaultMapSize,\n  //             windowSize:20\n  //           })\n  //           break;\n  //         }\n  //       // }\n  //     }\n  //   }\n  // }\n  // changeMapSize(item){\n  // }\n\n\n  onOpen(index) {\n    let newToogleList = [...this.state.openToogleList];\n    newToogleList[index] = !newToogleList[index];\n    this.setState({\n      openToogleList: newToogleList\n    });\n  }\n\n  render() {\n    return React.createElement(GoogleMap, {\n      defaultZoom: this.props.windowSize,\n      defaultCenter: this.state.defaultMapSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.location_data.map((item, index) => {\n      if (this.props.clickable === true) {\n        if (data[index].name == this.props.clickedInput.replace(/\\s/g, '')) {\n          console.log(getDistance(this.state, location_data[1], this.state.location_data[2]));\n          return React.createElement(Marker, {\n            position: item,\n            key: index,\n            onClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, this.state.openToogleList[index] && React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, React.createElement(InfoWindow, {\n            onCloseClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          }, \"Name: \", data[index].name)), React.createElement(Circle, {\n            defaultCenter: {\n              lat: parseFloat(item.lat),\n              lng: parseFloat(item.lng)\n            },\n            radius: 3000,\n            options: {\n              strokeColor: \"#ff0000\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          })));\n        }\n      }\n    }));\n  }\n\n}\n\nconst MapContainer = compose(withScriptjs, withGoogleMap)(PeopleMap);\nexport default MapContainer; //   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js"],"names":["withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","Circle","Geocode","React","Component","Fragment","compose","withProps","withStateHandlers","getDistance","data","PeopleMap","constructor","props","state","userInput","location_data","openToogleList","Array","length","fill","defaultMapSize","lat","lng","componentDidMount","setApiKey","setLanguage","setRegion","enableDebug","i","fromAddress","address","then","response","results","geometry","location","setState","console","log","error","windowSize","onOpen","index","newToogleList","render","map","item","clickable","name","clickedInput","replace","parseFloat","strokeColor","MapContainer"],"mappings":"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","sourcesContent":["import {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow, \n    Circle\n  } from \"react-google-maps\";\n  import Geocode from \"react-geocode\";\n  import React, {Component, Fragment} from \"react\"\n  import { compose, withProps, withStateHandlers } from \"recompose\"\n  import { getDistance } from 'geolib';\nimport data from \"../../../data/Data\";\n\n  class PeopleMap extends Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        userInput: \"\",\n        location_data: [],\n        openToogleList: Array(data.length).fill(true), \n        defaultMapSize: { lat: -33.797, lng: 151.1 }, \n        \n      }\n    }\n    componentDidMount(){\n     \n      \n      Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\");\n \n      // set response language. Defaults to english.\n      Geocode.setLanguage(\"en\");\n      \n      // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n      Geocode.setRegion(\"aus\");\n      Geocode.enableDebug();\n      \n      \n      \n      // Get latidude & longitude from address.\n      \n      for (var i=0; i< data.length; i++){\n        \n        Geocode.fromAddress(data[i].address).then(\n          response => {\n            const { lat, lng } = response.results[0].geometry.location;\n            this.setState({\n              location_data: [...this.state.location_data, { lat,lng}]\n            })\n            console.log(lat)\n            console.log(lng)\n            \n\n          },\n          error => {\n            console.error(error);\n          }\n        );\n        \n      }\n      console.log(this.props.windowSize)\n      // if (this.props.clickable ===true){\n      //   console.log(\"hello\")\n      //   for (var i =0; i < this.state.location_data.length; i++){\n      //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n      //       console.log('world')\n      //       // let item =this.state.location_data[i]\n      //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n      //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n      //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n      //       this.setState({\n      //         // defaultMapSize: copyDefaultMapSize,\n      //         windowSize:20\n      //       })\n      //       break;\n      //     }\n      //   // }\n        \n      //   }\n      // }\n      \n     \n    }\n    // componentDidUpdate(previousProps, previousState){\n    //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n    //     if (this.props.clickable ===true){\n    //       console.log(\"hello\")\n    //       for (var i =0; i < this.state.location_data.length; i++){\n    //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n    //           console.log('world')\n    //           // let item =this.state.location_data[i]\n    //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n    //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n    //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n    //           this.setState({\n    //             // defaultMapSize: copyDefaultMapSize,\n    //             windowSize:20\n    //           })\n    //           break;\n    //         }\n    //       // }\n          \n    //     }\n    //   }\n    // }\n    // changeMapSize(item){\n      \n      \n    // }\n    \n    onOpen(index){\n      let newToogleList = [...this.state.openToogleList];\n      newToogleList[index] = ! newToogleList[index];\n\n      this.setState({\n        openToogleList: newToogleList\n      }\n      )\n    }\n    \n    render(){\n   \n      return(\n        <GoogleMap\n      defaultZoom={this.props.windowSize}\n      \n      defaultCenter={this.state.defaultMapSize}\n    >\n      \n      {this.state.location_data.map((item, index)=>{\n        if (this.props.clickable === true){\n          \n          if (data[index].name == this.props.clickedInput.replace(/\\s/g, '')){\n            console.log(getDistance(this.state,location_data[1], this.state.location_data[2]))\n            return(\n              <Marker\n            position={item}\n            key = {index}\n            onClick={() => this.onOpen(index) }\n              >\n            {this.state.openToogleList[index] &&\n              <Fragment>\n              <InfoWindow onCloseClick={()=> this.onOpen(index)}>\n                <h3>Name: {data[index].name}</h3>\n                {/* <h3>{this.props.clickedInput}</h3> */}\n              </InfoWindow>\n              <Circle\n              defaultCenter={{\n                lat: parseFloat(item.lat),\n                lng: parseFloat(item.lng)\n              }}\n              radius={3000}\n              options={{strokeColor: \"#ff0000\"}}\n            />\n            </Fragment> \n          \n            }\n            \n              </Marker>\n          )\n    }}})}\n      \n    </GoogleMap>\n      )\n    }\n  }\n  const MapContainer =compose(\n    withScriptjs,\n    withGoogleMap\n  )(PeopleMap);\n  \n  export default MapContainer\n  \n//   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />"]},"metadata":{},"sourceType":"module"}