{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/AutoComplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Icon } from \"antd\";\n\nclass Autocomplete extends Component {\n  componentDidMount() {\n    localStorage.setItem('route', this.props.location.pathname);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const suggestions = this.props.suggestions;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      const suggestedValue = e.currentTarget.value.split('-')[0]; // console.log(e.currentTarget.value)\n\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: suggestedValue\n      });\n    };\n\n    this.onClick = e => {\n      // Update the user input and reset the rest of the state\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText.split(\"-\")[0]\n      });\n    };\n\n    this.onKeyDown = e => {\n      const _this$state = this.state,\n            activeSuggestion = _this$state.activeSuggestion,\n            filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestionuggestions, you're on your own! list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  } // Event fired when the input value is changed\n\n\n  render() {\n    const onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown;\n    let suggestionsListComponent;\n\n    if (this.state.showSuggestions == true && this.state.userInput != \"\") {\n      if (this.state.filteredSuggestions.length) {\n        suggestionsListComponent = //   <ul class=\"suggestions\">\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, this.state.filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === this.state.activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return React.createElement(\"div\", {\n            className: className,\n            onClick: onClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"search\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }), \" \" + suggestion.name + \"-\" + suggestion.type);\n        }));\n      } else {\n        suggestionsListComponent = React.createElement(\"div\", {\n          class: \"no-suggestions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"Not Found\"));\n      }\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: this.state.userInput,\n      placeholder: \"Search person\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/AutoComplete.js"],"names":["React","Component","Fragment","PropTypes","Icon","Autocomplete","componentDidMount","localStorage","setItem","props","location","pathname","constructor","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","name","toLowerCase","indexOf","suggestedValue","split","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","render","suggestionsListComponent","map","index","className","type","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Icon} from \"antd\"\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n  componentDidMount () {\n        \n    localStorage.setItem('route', this.props.location.pathname);\n   \n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestionuggestions, you're on your own! list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    const suggestedValue=e.currentTarget.value.split('-')[0]\n    // console.log(e.currentTarget.value)\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: suggestedValue\n    });\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText.split(\"-\")[0]\n    });\n   \n\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n    \n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n    //   state: {\n    //     activeSuggestion,\n    //     filteredSuggestions,\n    //     showSuggestions,\n    //     userInput\n    //   }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (this.state.showSuggestions== true && this.state.userInput != \"\") {\n      if (this.state.filteredSuggestions.length) {\n        suggestionsListComponent = (\n        //   <ul class=\"suggestions\">\n        <div>\n            {this.state.filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === this.state.activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                \n                <div className={className}\n           \n                onClick={onClick}>\n                <Icon type = \"search\"/>\n                \n                {\" \"+ suggestion.name +\"-\" +suggestion.type}\n                </div>\n                \n                  \n                \n              );\n            })}\n        </div>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div class=\"no-suggestions\">\n            <em>Not Found</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={this.state.userInput}\n          placeholder= \"Search person\"\n        />\n        {suggestionsListComponent}\n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}