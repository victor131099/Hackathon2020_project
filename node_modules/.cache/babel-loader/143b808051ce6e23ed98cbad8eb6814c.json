{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n    const innerDims = this.rank === 1 ? 'sourceLoc' : \"vec2(\".concat(sourceLoc.slice(-2).join(), \")\");\n    const getChannel = \"getChannel(getSource(\".concat(sourceLoc.join(), \"), \").concat(innerDims, \")\");\n    const upperRow = \"\\n      result.x = \".concat(getChannel, \";\\n      if (++\").concat(coords[this.rank - 1], \" < \").concat(destSize[this.rank - 1], \") {\\n        ++\").concat(sourceLoc[this.rank - 1], \";\\n        result.y = \").concat(getChannel, \";\\n        --\").concat(sourceLoc[this.rank - 1], \";\\n      }\\n    \");\n    const lowerRow = this.rank === 1 ? '' : \"\\n      --\".concat(coords[this.rank - 1], \";\\n      if (++\").concat(coords[this.rank - 2], \" < \").concat(destSize[this.rank - 2], \") {\\n        ++\").concat(sourceLoc[this.rank - 2], \";\\n        result.z = \").concat(getChannel, \";\\n        if (++\").concat(coords[this.rank - 1], \" < \").concat(destSize[this.rank - 1], \") {\\n          ++\").concat(sourceLoc[this.rank - 1], \";\\n          result.w = \").concat(getChannel, \";\\n        }\\n      }\\n    \");\n    const sourceLocSetup = this.rank <= 4 ? \"sourceLoc = coords +\\n            \".concat(dtype, \"(\").concat(destSize.map((_, i) => \"start[\".concat(i, \"]\")).join(), \");\") : destSize.map((_, i) => \"\".concat(sourceLoc[i], \" = \").concat(coords[i], \" + start[\").concat(i, \"];\")).join('\\n');\n    this.userCode = \"\\n      uniform int start[\".concat(this.rank, \"];\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        \").concat(dtype, \" sourceLoc;\\n        \").concat(sourceLocSetup, \"\\n        vec4 result = vec4(0.);\\n        \").concat(upperRow, \"\\n        \").concat(lowerRow, \"\\n        setOutput(result);\\n      }\\n    \");\n  }\n\n  getCustomSetupFunc(start) {\n    if (start.length !== this.rank) {\n      throw Error(\"The rank (\".concat(this.rank, \") of the program must match the \") + \"length of start (\".concat(start.length, \")\"));\n    }\n\n    return (gpgpu, webGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}