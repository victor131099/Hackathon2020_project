{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n  constructor(shapes, axis) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => \"T\".concat(i));\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n    let getValueSnippet = \"if (\".concat(channel, \" < \").concat(offsets[0], \") {\\n        return getChannel(\\n            getT0(\").concat(allChannels, \"), vec2(\").concat(lastChannels.join(), \"));\\n        }\");\n\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1]; // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n\n      getValueSnippet += \"\\n        if (\".concat(channel, \" < \").concat(offsets[i], \"  && \").concat(channel, \" >= \").concat(offsets[i - 1], \") {\\n          return getChannel(\\n            getT\").concat(i, \"(\").concat(shiftedChannels(channels, channel, shift), \"),\\n            vec2(\").concat(shiftedChannels(lastChannels, channel, shift), \"));\\n        }\");\n    }\n\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += \"\\n        return getChannel(\\n          getT\".concat(lastIndex, \"(\").concat(shiftedChannels(channels, channel, shift), \"),\\n          vec2(\").concat(shiftedChannels(lastChannels, channel, shift), \"));\");\n    this.userCode = \"\\n      float getValue(\".concat(channels.map(x => 'int ' + x), \") {\\n        \").concat(getValueSnippet, \"\\n      }\\n\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\").concat(coords, \"), 0., 0., 0.);\\n\\n        \").concat(coords[rank - 1], \" = \").concat(coords[rank - 1], \" + 1;\\n        if (\").concat(coords[rank - 1], \" < \").concat(shape[rank - 1], \") {\\n          result.g = getValue(\").concat(coords, \");\\n        }\\n\\n        \").concat(coords[rank - 2], \" = \").concat(coords[rank - 2], \" + 1;\\n        if (\").concat(coords[rank - 2], \" < \").concat(shape[rank - 2], \") {\\n          result.a = getValue(\").concat(coords, \");\\n        }\\n\\n        \").concat(coords[rank - 1], \" = \").concat(coords[rank - 1], \" - 1;\\n        if (\").concat(coords[rank - 2], \" < \").concat(shape[rank - 2], \" &&\\n            \").concat(coords[rank - 1], \" < \").concat(shape[rank - 1], \") {\\n          result.b = getValue(\").concat(coords, \");\\n        }\\n        setOutput(result);\\n      }\\n    \");\n  }\n\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\n\nfunction shiftedChannels(channels, channel, shift) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return \"\".concat(c, \" - \").concat(shift);\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}","map":null,"metadata":{},"sourceType":"module"}