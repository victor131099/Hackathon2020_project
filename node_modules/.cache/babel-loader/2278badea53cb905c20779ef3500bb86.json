{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2dConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    backend,\n    attrs\n  }) => {\n    const x = inputs.x,\n          filter = inputs.filter;\n    const strides = attrs.strides,\n          pad = attrs.pad,\n          dilations = attrs.dilations;\n    const cpuBackend = backend;\n    const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n    const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n\n    const _backend_util$compute = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations),\n          batchSize = _backend_util$compute.batchSize,\n          inHeight = _backend_util$compute.inHeight,\n          inWidth = _backend_util$compute.inWidth,\n          inChannels = _backend_util$compute.inChannels,\n          outHeight = _backend_util$compute.outHeight,\n          outWidth = _backend_util$compute.outWidth,\n          padInfo = _backend_util$compute.padInfo,\n          strideHeight = _backend_util$compute.strideHeight,\n          strideWidth = _backend_util$compute.strideWidth,\n          filterHeight = _backend_util$compute.filterHeight,\n          filterWidth = _backend_util$compute.filterWidth,\n          dilationHeight = _backend_util$compute.dilationHeight,\n          dilationWidth = _backend_util$compute.dilationWidth,\n          outShape = _backend_util$compute.outShape;\n\n    const output = util.makeZerosNestedTypedArray(outShape, x.dtype); // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            output[b][hOut][wOut][d] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(output, x.dtype), outShape, x.dtype);\n    return {\n      dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}