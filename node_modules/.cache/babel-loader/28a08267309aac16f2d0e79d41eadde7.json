{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.dilation2dConfig = {\n  kernelName: tfjs_1.Dilation2D,\n  backendName: 'tensorflow',\n  kernelFunc: function (_a) {\n    var inputs = _a.inputs,\n        backend = _a.backend,\n        attrs = _a.attrs;\n    var _b = inputs,\n        x = _b.x,\n        filter = _b.filter;\n    var _c = attrs,\n        strides = _c.strides,\n        pad = _c.pad,\n        dilations = _c.dilations;\n\n    var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations),\n        dilationHeight = _d.dilationHeight,\n        dilationWidth = _d.dilationWidth,\n        padInfo = _d.padInfo,\n        strideHeight = _d.strideHeight,\n        strideWidth = _d.strideWidth;\n\n    var $strides = [1, strideHeight, strideWidth, 1];\n    var $dilations = [1, dilationHeight, dilationWidth, 1];\n    var nodeBackend = backend;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: nodeBackend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'rates',\n      type: nodeBackend.binding.TF_ATTR_INT,\n      value: $dilations\n    }, {\n      name: 'padding',\n      type: nodeBackend.binding.TF_ATTR_STRING,\n      value: padInfo.type\n    }];\n    return nodeBackend.executeSingleOutput(tfjs_1.Dilation2D, opAttrs, [x, filter]);\n  }\n};","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/node_modules/@tensorflow/tfjs-node-gpu/dist/kernels/Dilation2D.js"],"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","dilation2dConfig","kernelName","Dilation2D","backendName","kernelFunc","_a","inputs","backend","attrs","_b","x","filter","_c","strides","pad","dilations","_d","backend_util","computeDilation2DInfo","shape","dilationHeight","dilationWidth","padInfo","strideHeight","strideWidth","$strides","$dilations","nodeBackend","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_INT","TF_ATTR_STRING","executeSingleOutput"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;AAgBAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AACAH,OAAO,CAACK,gBAAR,GAA2B;AACvBC,EAAAA,UAAU,EAAEJ,MAAM,CAACK,UADI;AAEvBC,EAAAA,WAAW,EAAE,YAFU;AAGvBC,EAAAA,UAAU,EAAE,UAAUC,EAAV,EAAc;AACtB,QAAIC,MAAM,GAAGD,EAAE,CAACC,MAAhB;AAAA,QAAwBC,OAAO,GAAGF,EAAE,CAACE,OAArC;AAAA,QAA8CC,KAAK,GAAGH,EAAE,CAACG,KAAzD;AACA,QAAIC,EAAE,GAAGH,MAAT;AAAA,QAAiBI,CAAC,GAAGD,EAAE,CAACC,CAAxB;AAAA,QAA2BC,MAAM,GAAGF,EAAE,CAACE,MAAvC;AACA,QAAIC,EAAE,GAAGJ,KAAT;AAAA,QAAgBK,OAAO,GAAGD,EAAE,CAACC,OAA7B;AAAA,QAAsCC,GAAG,GAAGF,EAAE,CAACE,GAA/C;AAAA,QAAoDC,SAAS,GAAGH,EAAE,CAACG,SAAnE;;AACA,QAAIC,EAAE,GAAGnB,MAAM,CAACoB,YAAP,CAAoBC,qBAApB,CAA0CR,CAAC,CAACS,KAA5C,EAAmDR,MAAM,CAACQ,KAA1D,EAAiEN,OAAjE,EAA0EC,GAA1E,EAA+E;AAAO;AAAtF,MAAwGC,SAAxG,CAAT;AAAA,QAA6HK,cAAc,GAAGJ,EAAE,CAACI,cAAjJ;AAAA,QAAiKC,aAAa,GAAGL,EAAE,CAACK,aAApL;AAAA,QAAmMC,OAAO,GAAGN,EAAE,CAACM,OAAhN;AAAA,QAAyNC,YAAY,GAAGP,EAAE,CAACO,YAA3O;AAAA,QAAyPC,WAAW,GAAGR,EAAE,CAACQ,WAA1Q;;AACA,QAAIC,QAAQ,GAAG,CAAC,CAAD,EAAIF,YAAJ,EAAkBC,WAAlB,EAA+B,CAA/B,CAAf;AACA,QAAIE,UAAU,GAAG,CAAC,CAAD,EAAIN,cAAJ,EAAoBC,aAApB,EAAmC,CAAnC,CAAjB;AACA,QAAIM,WAAW,GAAGpB,OAAlB;AACA,QAAIqB,OAAO,GAAG,CACV7B,uBAAuB,CAAC8B,uBAAxB,CAAgD,GAAhD,EAAqDnB,CAAC,CAACoB,KAAvD,CADU,EAEV;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,IAAI,EAAEL,WAAW,CAACM,OAAZ,CAAoBC,WAA7C;AAA0DtC,MAAAA,KAAK,EAAE6B;AAAjE,KAFU,EAGV;AAAEM,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAEL,WAAW,CAACM,OAAZ,CAAoBC,WAA3C;AAAwDtC,MAAAA,KAAK,EAAE8B;AAA/D,KAHU,EAIV;AACIK,MAAAA,IAAI,EAAE,SADV;AAEIC,MAAAA,IAAI,EAAEL,WAAW,CAACM,OAAZ,CAAoBE,cAF9B;AAGIvC,MAAAA,KAAK,EAAE0B,OAAO,CAACU;AAHnB,KAJU,CAAd;AAUA,WAAOL,WAAW,CAACS,mBAAZ,CAAgCvC,MAAM,CAACK,UAAvC,EAAmD0B,OAAnD,EAA4D,CAAClB,CAAD,EAAIC,MAAJ,CAA5D,CAAP;AACH;AAtBsB,CAA3B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.dilation2dConfig = {\n    kernelName: tfjs_1.Dilation2D,\n    backendName: 'tensorflow',\n    kernelFunc: function (_a) {\n        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;\n        var _b = inputs, x = _b.x, filter = _b.filter;\n        var _c = attrs, strides = _c.strides, pad = _c.pad, dilations = _c.dilations;\n        var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations), dilationHeight = _d.dilationHeight, dilationWidth = _d.dilationWidth, padInfo = _d.padInfo, strideHeight = _d.strideHeight, strideWidth = _d.strideWidth;\n        var $strides = [1, strideHeight, strideWidth, 1];\n        var $dilations = [1, dilationHeight, dilationWidth, 1];\n        var nodeBackend = backend;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: nodeBackend.binding.TF_ATTR_INT, value: $strides },\n            { name: 'rates', type: nodeBackend.binding.TF_ATTR_INT, value: $dilations },\n            {\n                name: 'padding',\n                type: nodeBackend.binding.TF_ATTR_STRING,\n                value: padInfo.type\n            }\n        ];\n        return nodeBackend.executeSingleOutput(tfjs_1.Dilation2D, opAttrs, [x, filter]);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}