{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = \"uniform int start[\".concat(this.rank, \"];\");\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return \"sourceLoc.\".concat(coords[i], \" = start[\").concat(i, \"] + coords.\").concat(coords[i], \";\");\n    });\n    body = \"\\n        \".concat(dtype, \" sourceLoc;\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        \").concat(coordSum.join('\\n'), \"\\n      \");\n    this.userCode = \"\\n      \".concat(uniformPart, \"\\n      void main() {\\n        \").concat(body, \"\\n        setOutput(getSource(\").concat(sourceCoords, \"));\\n      }\\n    \");\n  }\n\n  getCustomSetupFunc(start) {\n    if (start.length !== this.rank) {\n      throw Error(\"The rank (\".concat(this.rank, \") of the program must match the \") + \"length of start (\".concat(start.length, \")\"));\n    }\n\n    return (gpgpu, webGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(\"Slicing for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}