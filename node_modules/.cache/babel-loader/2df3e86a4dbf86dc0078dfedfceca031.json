{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar util_1 = require(\"util\");\n\nvar int64_tensors_1 = require(\"./int64_tensors\");\n\nvar NodeJSKernelBackend =\n/** @class */\nfunction (_super) {\n  __extends(NodeJSKernelBackend, _super);\n\n  function NodeJSKernelBackend(binding, packageName) {\n    var _this = _super.call(this) || this;\n\n    _this.binding = binding;\n    _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n    _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n    _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n    return _this;\n  }\n\n  NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n    switch (dtype) {\n      case 'float32':\n        return this.binding.TF_FLOAT;\n\n      case 'int32':\n        return this.binding.TF_INT32;\n\n      case 'bool':\n        return this.binding.TF_BOOL;\n\n      case 'complex64':\n        return this.binding.TF_COMPLEX64;\n\n      case 'string':\n        return this.binding.TF_STRING;\n\n      default:\n        throw new Error(\"Unsupported DType: \" + dtype);\n    }\n  };\n\n  NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n    return this.getDTypeInteger(value.dtype);\n  }; // Creates a new Tensor and maps the dataId to the passed in ID.\n\n\n  NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n    var newId = {};\n    this.tensorMap.set(newId, {\n      shape: metadata.shape,\n      dtype: metadata.dtype,\n      id: metadata.id,\n      values: null\n    });\n    var dtype;\n\n    switch (metadata.dtype) {\n      case this.binding.TF_FLOAT:\n        dtype = 'float32';\n        break;\n\n      case this.binding.TF_INT32:\n        dtype = 'int32';\n        break;\n\n      case this.binding.TF_BOOL:\n        dtype = 'bool';\n        break;\n\n      case this.binding.TF_COMPLEX64:\n        dtype = 'complex64';\n        break;\n\n      case this.binding.TF_STRING:\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_RESOURCE:\n        // NOTE(cais): We currently represent resource-type Tensors\n        // as string of ubytes.\n        dtype = 'string';\n        break;\n\n      case this.binding.TF_UINT8:\n        // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n        // supported in TFJS yet, cast it to int32.\n        dtype = 'int32';\n        break;\n\n      default:\n        throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n    }\n\n    return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n  }; // Prepares Tensor instances for Op execution.\n\n\n  NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n    var ids = [];\n\n    for (var i = 0; i < tensors.length; i++) {\n      if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n        // Then `tensors[i]` is a Int64Scalar, which we currently represent\n        // using an `Int32Array`.\n        var value = tensors[i].valueArray;\n        var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n        ids.push(id);\n      } else {\n        var info = this.tensorMap.get(tensors[i].dataId); // TODO - what about ID in this case? Handle in write()??\n\n        if (info.values != null) {\n          // Values were delayed to write into the TensorHandle. Do that before\n          // Op execution and clear stored values.\n          info.id = this.binding.createTensor(info.shape, info.dtype, info.values);\n          info.values = null;\n        }\n\n        ids.push(info.id);\n      }\n    }\n\n    return ids;\n  };\n\n  NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor) {\n    return [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('T', tensor.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n  };\n\n  NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n    return this.executeSingleOutput(name, opAttrs, [input]);\n  };\n\n  NodeJSKernelBackend.prototype.floatPrecision = function () {\n    return 32;\n  };\n\n  NodeJSKernelBackend.prototype.epsilon = function () {\n    return _super.prototype.epsilon.call(this);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides one output Tensor.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @return A resulting Tensor from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n    return this.createOutputTensor(outputMetadata[0]);\n  };\n  /**\n   * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n   * @param name The name of the Op to execute.\n   * @param opAttrs The list of Op attributes required to execute.\n   * @param inputs The list of input Tensors for the Op.\n   * @param numOutputs The number of output Tensors for Op execution.\n   * @return A resulting Tensor array from Op execution.\n   */\n\n\n  NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n    var _this = this;\n\n    var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.numDataIds = function () {\n    return this.tensorMap.numDataIds();\n  };\n\n  NodeJSKernelBackend.prototype.dispose = function () {};\n\n  NodeJSKernelBackend.prototype.read = function (dataId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.readSync(dataId)];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.readSync = function (dataId) {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n    }\n\n    var info = this.tensorMap.get(dataId);\n\n    if (info.values != null) {\n      return info.values;\n    } else {\n      return this.binding.tensorDataSync(info.id);\n    }\n  };\n\n  NodeJSKernelBackend.prototype.disposeData = function (dataId) {\n    // No-op if already disposed.\n    if (!this.tensorMap.has(dataId)) {\n      return;\n    }\n\n    var id = this.tensorMap.get(dataId).id;\n\n    if (id != null && id >= 0) {\n      this.binding.deleteTensor(id);\n    }\n\n    this.tensorMap.delete(dataId);\n  };\n\n  NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype) {\n    this.tensorMap.set(dataId, {\n      shape: shape,\n      dtype: getTFDType(dtype),\n      values: values,\n      id: -1\n    });\n  };\n\n  NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n    var dataId = {};\n    this.move(dataId, values, shape, dtype);\n    return dataId;\n  };\n\n  NodeJSKernelBackend.prototype.fill = function (shape, value, dtype) {\n    // TODO(cais, nkreeger): Investigate whether this can be made into\n    // a dtype helper method. The underlying op kernel doesn't accept undefined\n    // or null dtype.\n    if (dtype == null) {\n      if (typeof value === 'number') {\n        dtype = 'float32';\n      } else {\n        dtype = 'string';\n      }\n    }\n\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var valueTensor = tfjs_1.scalar(value, dtype);\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(dtype)\n    }, {\n      name: 'index_type',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }];\n    return this.executeSingleOutput('Fill', opAttrs, [shapeTensor, valueTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.onesLike = function (x) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(x.dtype)\n    }];\n    return this.executeSingleOutput('OnesLike', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.zerosLike = function (x) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.getDTypeInteger(x.dtype)\n    }];\n    return this.executeSingleOutput('ZerosLike', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.stridedSlice = function (x, begin, end, strides) {\n    var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n\n    for (var axis = 0; axis < end.length; axis++) {\n      // Unlike Numpy, when the strides are negative, TF C uses -n-1 instead of\n      // -1 as the \"end\" in order to include the first element.\n      if (strides[axis] < 0 && end[axis] === -1) {\n        end[axis] -= x.shape[axis];\n      }\n    }\n\n    var endTensor = tfjs_1.tensor1d(end, 'int32');\n    var stridesTensor = tfjs_1.tensor1d(strides, 'int32'); // All of the masks have already been accounted for in the high level op,\n    // so the backend does NOT need to deal with masks.\n\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Index', 'int32'), {\n      name: 'begin_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'end_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'ellipsis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'new_axis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }, {\n      name: 'shrink_axis_mask',\n      type: this.binding.TF_ATTR_INT,\n      value: 0\n    }];\n    return this.executeSingleOutput('StridedSlice', opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.unstack = function (x, axis) {\n    if (axis >= x.shape.length) {\n      throw new Error(\"Invalid axis supplied: \" + axis + \" shape length: \" + x.shape.length);\n    }\n\n    var num = x.shape[axis];\n    var opAttrs = [{\n      name: 'num',\n      type: this.binding.TF_ATTR_INT,\n      value: num\n    }, createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'axis',\n      type: this.binding.TF_ATTR_INT,\n      value: axis\n    }];\n    return this.executeMultipleOutputs('Unpack', opAttrs, [x], num);\n  };\n\n  NodeJSKernelBackend.prototype.batchMatMul = function (a, b, transposeA, transposeB) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype), {\n      name: 'adj_x',\n      type: this.binding.TF_ATTR_BOOL,\n      value: transposeA\n    }, {\n      name: 'adj_y',\n      type: this.binding.TF_ATTR_BOOL,\n      value: transposeB\n    }];\n    return this.executeSingleOutput('BatchMatMul', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights) {\n    var result = input;\n\n    if (activation != null) {\n      if (activation === 'linear') {// No-op\n      } else if (activation === 'relu') {\n        result = this.relu(result);\n      } else if (activation === 'prelu') {\n        result = this.prelu(result, preluActivationWeights);\n      } else if (activation === 'elu') {\n        result = this.elu(result);\n      } else if (activation === 'relu6') {\n        result = this.relu6(result);\n      } else {\n        throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n      }\n    }\n\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.fusedConv2d = function (_a) {\n    var input = _a.input,\n        filter = _a.filter,\n        convInfo = _a.convInfo,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights;\n    var result = this.conv2d(input, filter, convInfo);\n\n    if (bias != null) {\n      result = this.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.fusedBatchMatMul = function (_a) {\n    var a = _a.a,\n        b = _a.b,\n        transposeA = _a.transposeA,\n        transposeB = _a.transposeB,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights; // Core TensorFlow does not have a fused BatchMatMul op. Combine calls to\n    // achieve the same results:\n\n    var result = this.batchMatMul(a, b, transposeA, transposeB);\n\n    if (bias != null) {\n      result = this.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.slice = function (x, begin, size) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Index', 'int32')]; // Bind tensor values\n\n    var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n    var sizeTensor = tfjs_1.tensor1d(size, 'int32');\n    return this.executeSingleOutput('Slice', opAttrs, [x, beginTensor, sizeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.reverse = function (a, axis) {\n    var opAttrs = [createTensorsTypeOpAttr('Tidx', 'int32'), createTensorsTypeOpAttr('T', a.dtype)];\n    var axisTensor = tfjs_1.tensor1d(axis, 'int32');\n    return this.executeSingleOutput('ReverseV2', opAttrs, [a, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.concat = function (tensors, axis) {\n    var opAttrs = [{\n      name: 'N',\n      type: this.binding.TF_ATTR_INT,\n      value: tensors.length\n    }, {\n      name: 'Tidx',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }, createTensorsTypeOpAttr('T', tensors)];\n    var inputs = Array.from(tensors);\n    inputs.push(tfjs_1.scalar(axis, 'int32'));\n    return this.executeSingleOutput('ConcatV2', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.neg = function (a) {\n    return this.executeSingleInput('Neg', a);\n  };\n\n  NodeJSKernelBackend.prototype.diag = function (x) {\n    return this.executeSingleInput('Diag', x);\n  };\n\n  NodeJSKernelBackend.prototype.add = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Add', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.select = function (condition, a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Select', opAttrs, [condition, a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.addN = function (tensors) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tensors[0].dtype), {\n      name: 'N',\n      type: this.binding.TF_ATTR_INT,\n      value: tensors.length\n    }];\n    return this.executeSingleOutput('AddN', opAttrs, tensors);\n  };\n\n  NodeJSKernelBackend.prototype.subtract = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Sub', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.multiply = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Mul', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.realDivide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('RealDiv', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.floorDiv = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('FloorDiv', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.divide = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Div', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tindices', 'int32'), createTensorsTypeOpAttr('Tnumsegments', 'int32')];\n    return this.executeSingleOutput('UnsortedSegmentSum', opAttrs, [x, segmentIds, tfjs_1.scalar(numSegments, 'int32')]);\n  };\n\n  NodeJSKernelBackend.prototype.sum = function (x, axes) {\n    var axisTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('Sum', this.createReductionOpAttrs(x), [x, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.prod = function (x, axes) {\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    var opAttrs = [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n    return this.executeSingleOutput('Prod', opAttrs, [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.argMin = function (x, axis) {\n    var xInput = x.dtype === 'bool' ? x.toInt() : x;\n    var axisScalar = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', xInput.dtype), createTensorsTypeOpAttr('Tidx', 'int32'), createTensorsTypeOpAttr('output_type', 'int32')];\n    return this.executeSingleOutput('ArgMin', opAttrs, [xInput, axisScalar]);\n  };\n\n  NodeJSKernelBackend.prototype.argMax = function (x, axis) {\n    var xInput = x.dtype === 'bool' ? x.toInt() : x;\n    var axisScalar = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', xInput.dtype), createTensorsTypeOpAttr('Tidx', 'int32'), createTensorsTypeOpAttr('output_type', 'int32')];\n    return this.executeSingleOutput('ArgMax', opAttrs, [xInput, axisScalar]);\n  };\n\n  NodeJSKernelBackend.prototype.equal = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Equal', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.notEqual = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('NotEqual', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.less = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Less', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.lessEqual = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('LessEqual', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.greater = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Greater', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.greaterEqual = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('GreaterEqual', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.logicalNot = function (a) {\n    return this.executeSingleOutput('LogicalNot', [], [a]);\n  };\n\n  NodeJSKernelBackend.prototype.logicalAnd = function (a, b) {\n    return this.executeSingleOutput('LogicalAnd', [], [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.logicalOr = function (a, b) {\n    return this.executeSingleOutput('LogicalOr', [], [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.where = function (condition) {\n    return this.executeSingleOutput('Where', [], [condition]);\n  };\n\n  NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.topk = function (x, k, sorted) {\n    var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n    var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n    var opAttrs = [{\n      name: 'sorted',\n      type: this.binding.TF_ATTR_BOOL,\n      value: isSorted\n    }, createTensorsTypeOpAttr('T', x.dtype)];\n    var kTensor = tfjs_1.scalar(kCount, 'int32'); // 'TopKV2' has two-hard coded output attributes:\n\n    return this.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n  };\n\n  NodeJSKernelBackend.prototype.min = function (x, axes) {\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('Min', this.createReductionOpAttrs(x), [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.minimum = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Minimum', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.max = function (x, axes) {\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('Max', this.createReductionOpAttrs(x), [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.maximum = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n    return this.executeSingleOutput('Maximum', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.all = function (x, axes) {\n    var opAttrs = [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('Tidx', 'int32')];\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('All', opAttrs, [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.any = function (x, axes) {\n    var opAttrs = [{\n      name: 'keep_dims',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }, createTensorsTypeOpAttr('Tidx', 'int32')];\n    var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n    return this.executeSingleOutput('Any', opAttrs, [x, axesTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.ceil = function (x) {\n    return this.executeSingleInput('Ceil', x);\n  };\n\n  NodeJSKernelBackend.prototype.floor = function (x) {\n    return this.executeSingleInput('Floor', x);\n  };\n\n  NodeJSKernelBackend.prototype.pow = function (a, b) {\n    var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n    var opAttrs = [createTensorsTypeOpAttr('T', dtype)];\n    return this.executeSingleOutput('Pow', opAttrs, [a.cast(dtype), b.cast(dtype)]);\n  };\n\n  NodeJSKernelBackend.prototype.exp = function (x) {\n    var xTensor = x.dtype === 'int32' ? x.toFloat() : x;\n    return this.executeSingleInput('Exp', xTensor);\n  };\n\n  NodeJSKernelBackend.prototype.log = function (x) {\n    return this.executeSingleInput('Log', x);\n  };\n\n  NodeJSKernelBackend.prototype.log1p = function (x) {\n    return this.executeSingleInput('Log1p', x);\n  };\n\n  NodeJSKernelBackend.prototype.sqrt = function (x) {\n    return this.executeSingleInput('Sqrt', x);\n  };\n\n  NodeJSKernelBackend.prototype.square = function (x) {\n    return this.executeSingleInput('Square', x);\n  };\n\n  NodeJSKernelBackend.prototype.relu = function (x) {\n    return this.executeSingleInput('Relu', x);\n  };\n\n  NodeJSKernelBackend.prototype.relu6 = function (x) {\n    return this.executeSingleInput('Relu6', x);\n  };\n\n  NodeJSKernelBackend.prototype.prelu = function (x, a) {\n    var pos = this.relu(x);\n    var neg = a.mul(x.sub(this.abs(x))).mul(0.5);\n    return pos.add(neg);\n  };\n\n  NodeJSKernelBackend.prototype.elu = function (x) {\n    return this.executeSingleInput('Elu', x);\n  };\n\n  NodeJSKernelBackend.prototype.eluDer = function (dy, y) {\n    var opAttrs = [createTensorsTypeOpAttr('T', y.dtype)];\n    return this.executeSingleOutput('EluGrad', opAttrs, [dy, y]);\n  };\n\n  NodeJSKernelBackend.prototype.selu = function (x) {\n    return this.executeSingleInput('Selu', x);\n  };\n\n  NodeJSKernelBackend.prototype.int = function (x) {\n    throw new Error('Method not implemented.');\n  };\n\n  NodeJSKernelBackend.prototype.clip = function (x, min, max) {\n    var xMin = this.minimum(x, tfjs_1.scalar(max));\n    return this.maximum(xMin, tfjs_1.scalar(min));\n  };\n\n  NodeJSKernelBackend.prototype.abs = function (x) {\n    return this.executeSingleInput('Abs', x);\n  };\n\n  NodeJSKernelBackend.prototype.complexAbs = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tout', 'float32')];\n    return this.executeSingleOutput('ComplexAbs', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.sigmoid = function (x) {\n    return this.executeSingleInput('Sigmoid', x);\n  };\n\n  NodeJSKernelBackend.prototype.sin = function (x) {\n    return this.executeSingleInput('Sin', x);\n  };\n\n  NodeJSKernelBackend.prototype.cos = function (x) {\n    return this.executeSingleInput('Cos', x);\n  };\n\n  NodeJSKernelBackend.prototype.tan = function (x) {\n    return this.executeSingleInput('Tan', x);\n  };\n\n  NodeJSKernelBackend.prototype.asin = function (x) {\n    return this.executeSingleInput('Asin', x);\n  };\n\n  NodeJSKernelBackend.prototype.acos = function (x) {\n    return this.executeSingleInput('Acos', x);\n  };\n\n  NodeJSKernelBackend.prototype.atan = function (x) {\n    return this.executeSingleInput('Atan', x);\n  };\n\n  NodeJSKernelBackend.prototype.sinh = function (x) {\n    return this.executeSingleInput('Sinh', x);\n  };\n\n  NodeJSKernelBackend.prototype.cosh = function (x) {\n    return this.executeSingleInput('Cosh', x);\n  };\n\n  NodeJSKernelBackend.prototype.tanh = function (x) {\n    return this.executeSingleInput('Tanh', x);\n  };\n\n  NodeJSKernelBackend.prototype.mod = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('FloorMod', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.round = function (x) {\n    return this.executeSingleInput('Round', x);\n  };\n\n  NodeJSKernelBackend.prototype.sign = function (x) {\n    return this.executeSingleInput('Sign', x);\n  };\n\n  NodeJSKernelBackend.prototype.isNaN = function (x) {\n    return this.executeSingleInput('IsNan', x);\n  };\n\n  NodeJSKernelBackend.prototype.isInf = function (x) {\n    return this.executeSingleInput('IsInf', x);\n  };\n\n  NodeJSKernelBackend.prototype.isFinite = function (x) {\n    return this.executeSingleInput('IsFinite', x);\n  };\n\n  NodeJSKernelBackend.prototype.rsqrt = function (x) {\n    return this.executeSingleInput('Rsqrt', x);\n  };\n\n  NodeJSKernelBackend.prototype.reciprocal = function (x) {\n    return this.executeSingleInput('Reciprocal', x);\n  };\n\n  NodeJSKernelBackend.prototype.asinh = function (x) {\n    return this.executeSingleInput('Asinh', x);\n  };\n\n  NodeJSKernelBackend.prototype.acosh = function (x) {\n    return this.executeSingleInput('Acosh', x);\n  };\n\n  NodeJSKernelBackend.prototype.atanh = function (x) {\n    return this.executeSingleInput('Atanh', x);\n  };\n\n  NodeJSKernelBackend.prototype.erf = function (x) {\n    return this.executeSingleInput('Erf', x);\n  };\n\n  NodeJSKernelBackend.prototype.squaredDifference = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('SquaredDifference', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.expm1 = function (x) {\n    return this.executeSingleInput('Expm1', x);\n  };\n\n  NodeJSKernelBackend.prototype.softplus = function (x) {\n    return this.executeSingleInput('Softplus', x);\n  };\n\n  NodeJSKernelBackend.prototype.atan2 = function (a, b) {\n    var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n    return this.executeSingleOutput('Atan2', opAttrs, [a, b]);\n  };\n\n  NodeJSKernelBackend.prototype.step = function (x, alpha) {\n    var dtype = x.dtype;\n    var nans = this.isNaN(x);\n    var stepNoNans = this.select(this.greater(x, tfjs_1.scalar(0, dtype)), tfjs_1.ones(x.shape), tfjs_1.fill(x.shape, alpha, dtype));\n    return this.select(nans, x, stepNoNans);\n  };\n\n  NodeJSKernelBackend.prototype.conv2d = function (x, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' && convInfo.padInfo.type !== 'EXPLICIT') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n\n    if (padding === 'EXPLICIT') {\n      var padValue = [convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left, convInfo.padInfo.right];\n      opAttrs.push({\n        name: 'explicit_paddings',\n        type: this.binding.TF_ATTR_INT,\n        value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n      });\n    }\n\n    return this.executeSingleOutput('Conv2D', opAttrs, [x, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('Conv2DBackpropInput', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'use_cudnn_on_gpu',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('Conv2DBackpropFilter', opAttrs, [x, filterSizes, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('DepthwiseConv2dNativeBackpropInput', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2DDerFilter = function (x, dY, convInfo) {\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('DepthwiseConv2dNativeBackpropFilter', opAttrs, [x, filterSizes, dY]);\n  };\n\n  NodeJSKernelBackend.prototype.fusedDepthwiseConv2D = function (_a) {\n    var input = _a.input,\n        filter = _a.filter,\n        convInfo = _a.convInfo,\n        bias = _a.bias,\n        activation = _a.activation,\n        preluActivationWeights = _a.preluActivationWeights;\n    var result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias != null) {\n      result = this.add(result, bias);\n    }\n\n    result = this.applyActivation(result, activation, preluActivationWeights);\n    return result;\n  };\n\n  NodeJSKernelBackend.prototype.depthwiseConv2D = function (input, filter, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', input.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    return this.executeSingleOutput('DepthwiseConv2dNative', opAttrs, [input, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3d = function (x, filter, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    return this.executeSingleOutput('Conv3D', opAttrs, [x, filter]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3dDerInput = function (dy, filter, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', dy.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }, createTensorsTypeOpAttr('Tshape', 'int32')];\n    var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n    return this.executeSingleOutput('Conv3DBackpropInputV2', opAttrs, [inputSizes, filter, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.conv3dDerFilter = function (x, dY, convInfo) {\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n\n    if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n      throw new Error('CPU Dilation depth must be 1');\n    }\n\n    var dilations = [1, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'dilations',\n      type: this.binding.TF_ATTR_INT,\n      value: dilations\n    }];\n    var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n    return this.executeSingleOutput('Conv3DBackpropFilterV2', opAttrs, [x, filterSizes, dY]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPoolGrad', opAttrs, [x, y, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('AvgPool', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n    return this.executeSingleOutput('AvgPoolGrad', opAttrs, [origInputShape, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool3d = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('AvgPool3D', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.avgPool3dBackprop = function (dy, x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n    return this.executeSingleOutput('AvgPool3DGrad', opAttrs, [origInputShape, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool3d = function (x, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool3D', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n\n    var ksize = [1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var strides = [1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'ksize',\n      type: this.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: this.binding.TF_ATTR_INT,\n      value: strides\n    }, {\n      name: 'padding',\n      type: this.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return this.executeSingleOutput('MaxPool3DGrad', opAttrs, [x, y, dy]);\n  };\n\n  NodeJSKernelBackend.prototype.reshape = function (x, shape) {\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tshape', shapeTensor.dtype)];\n    return this.executeSingleOutput('Reshape', opAttrs, [x, shapeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.cast = function (x, dtype) {\n    var opAttrs = [createTensorsTypeOpAttr('SrcT', x.dtype), createTensorsTypeOpAttr('DstT', dtype), {\n      name: 'Truncate',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }];\n    return this.executeSingleOutput('Cast', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.tile = function (x, reps) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tmultiples', 'int32')];\n    var multiples = tfjs_1.tensor1d(reps, 'int32');\n    return this.executeSingleOutput('Tile', opAttrs, [x, multiples]);\n  };\n\n  NodeJSKernelBackend.prototype.pad = function (x, paddings, constantValue) {\n    // Bind tensor values\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n    var constantTensor = tfjs_1.scalar(constantValue, x.dtype);\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)];\n    return this.executeSingleOutput('PadV2', opAttrs, [x, paddingsTensor, constantTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.transpose = function (x, perm) {\n    var permTensor = tfjs_1.tensor1d(perm, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tperm', 'int32')];\n    return this.executeSingleOutput('Transpose', opAttrs, [x, permTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.gather = function (x, indices, axis) {\n    var axisTensor = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('Tparams', x.dtype), createTensorsTypeOpAttr('Tindices', indices.dtype), createTensorsTypeOpAttr('Taxis', 'int32')];\n    return this.executeSingleOutput('GatherV2', opAttrs, [x, indices, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.gatherND = function (x, indices) {\n    var opAttrs = [createTensorsTypeOpAttr('Tparams', x.dtype), createTensorsTypeOpAttr('Tindices', 'int32')];\n    return this.executeSingleOutput('GatherNd', opAttrs, [x, indices]);\n  };\n\n  NodeJSKernelBackend.prototype.scatterND = function (indices, updates, shape) {\n    var opAttrs = [createTensorsTypeOpAttr('T', updates.dtype), createTensorsTypeOpAttr('Tindices', 'int32')];\n    var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n    return this.executeSingleOutput('ScatterNd', opAttrs, [indices, updates, shapeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.batchToSpaceND = function (x, blockShape, crops) {\n    var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n    var cropsTensor = tfjs_1.tensor2d(crops, [crops.length, crops[0].length], 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tblock_shape', 'int32'), createTensorsTypeOpAttr('Tcrops', cropsTensor.dtype)];\n    return this.executeSingleOutput('BatchToSpaceND', opAttrs, [x, blockShapeTensor, cropsTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.spaceToBatchND = function (x, blockShape, paddings) {\n    var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tblock_shape', 'int32'), createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)];\n    return this.executeSingleOutput('SpaceToBatchND', opAttrs, [x, blockShapeTensor, paddingsTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n    return this.executeSingleOutput('ResizeBilinear', opAttrs, [x, size]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    return this.executeSingleOutput('ResizeBilinearGrad', opAttrs, [dy, x]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n    return this.executeSingleOutput('ResizeNearestNeighbor', opAttrs, [x, size]);\n  };\n\n  NodeJSKernelBackend.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'align_corners',\n      type: this.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }];\n    var _a = x.shape,\n        origHeight = _a[1],\n        origWidth = _a[2];\n    var size = tfjs_1.tensor1d([origHeight, origWidth], 'int32');\n    return this.executeSingleOutput('ResizeNearestNeighborGrad', opAttrs, [dy, size]);\n  };\n\n  NodeJSKernelBackend.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {\n    if (mean.rank > 1) {\n      // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n      var inv = tfjs_1.rsqrt(variance.add(tfjs_1.scalar(varianceEpsilon)));\n\n      if (scale != null) {\n        inv = inv.mul(scale);\n      }\n\n      var xNorm = x.sub(mean).mul(inv);\n      return offset != null ? xNorm.add(offset) : xNorm;\n    }\n\n    var dataFormat = 'NHWC';\n    var depth = x.shape[3];\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'epsilon',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: varianceEpsilon\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }, {\n      name: 'is_training',\n      type: this.binding.TF_ATTR_BOOL,\n      value: false\n    }];\n    var numOutputs = 5;\n\n    if (scale == null) {\n      scale = tfjs_1.fill([depth], 1);\n    }\n\n    if (offset == null) {\n      offset = tfjs_1.fill([depth], 0);\n    }\n\n    return this.executeMultipleOutputs('FusedBatchNorm', opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n  };\n\n  NodeJSKernelBackend.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'depth_radius',\n      type: this.binding.TF_ATTR_INT,\n      value: radius\n    }, {\n      name: 'bias',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: bias\n    }, {\n      name: 'alpha',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: alpha\n    }, {\n      name: 'beta',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: beta\n    }];\n    return this.executeSingleOutput('LRN', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.LRNGrad = function (dy, inputImage, outputImage, radius, bias, alpha, beta) {\n    var opAttrs = [createTensorsTypeOpAttr('T', dy.dtype), {\n      name: 'depth_radius',\n      type: this.binding.TF_ATTR_INT,\n      value: radius\n    }, {\n      name: 'bias',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: bias\n    }, {\n      name: 'alpha',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: alpha\n    }, {\n      name: 'beta',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: beta\n    }];\n    return this.executeSingleOutput('LRNGrad', opAttrs, [dy, inputImage, outputImage]);\n  };\n\n  NodeJSKernelBackend.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n    if (normalized) {\n      throw new Error('TF Node backend does not support normalized logits ' + 'passed to multinomial');\n    }\n\n    var opAttrs = [createTensorsTypeOpAttr('T', logits.dtype), createTensorsTypeOpAttr('output_dtype', 'int32'), {\n      name: 'seed',\n      type: this.binding.TF_ATTR_INT,\n      value: seed\n    }, {\n      name: 'seed2',\n      type: this.binding.TF_ATTR_INT,\n      value: seed * seed\n    }];\n    return this.executeSingleOutput('Multinomial', opAttrs, [logits, tfjs_1.scalar(numSamples, 'int32')]);\n  };\n\n  NodeJSKernelBackend.prototype.oneHot = function (indices, depth, onValue, offValue) {\n    var depthTensor = tfjs_1.scalar(depth, 'int32');\n    var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n    var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n    var opAttrs = [{\n      name: 'axis',\n      type: this.binding.TF_ATTR_INT,\n      value: -1\n    }, createTensorsTypeOpAttr('T', indices.dtype), createTensorsTypeOpAttr('TI', indices.dtype)];\n    return this.executeSingleOutput('OneHot', opAttrs, [indices, depthTensor, onValueTensor, offValueTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.cumsum = function (x, axis, exclusive, reverse) {\n    var axisTensor = tfjs_1.scalar(axis, 'int32');\n    var opAttrs = [{\n      name: 'exclusive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: exclusive\n    }, {\n      name: 'reverse',\n      type: this.binding.TF_ATTR_BOOL,\n      value: reverse\n    }, createTensorsTypeOpAttr('T', x.dtype), createTensorsTypeOpAttr('Tidx', 'int32')];\n    return this.executeSingleOutput('Cumsum', opAttrs, [x, axisTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.nonMaxSuppression = function (boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    var opAttrs = [createTensorsTypeOpAttr('T', boxes.dtype)];\n    var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n    var iouThresholdTensor = tfjs_1.scalar(iouThreshold);\n    var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold);\n    return this.executeSingleOutput('NonMaxSuppressionV3', opAttrs, [boxes, scores, maxOutputSizeTensor, iouThresholdTensor, scoreThresholdTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.fft = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n    return this.executeSingleOutput('FFT', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.ifft = function (x) {\n    var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n    return this.executeSingleOutput('IFFT', opAttrs, [x]);\n  };\n\n  NodeJSKernelBackend.prototype.complex = function (real, imag) {\n    var opAttrs = [createTensorsTypeOpAttr('T', real), {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_COMPLEX64\n    }];\n    var inputs = [real, imag];\n    return this.executeSingleOutput('Complex', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.real = function (input) {\n    var opAttrs = [createTensorsTypeOpAttr('T', input), {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_FLOAT\n    }];\n    var inputs = [input];\n    return this.executeSingleOutput('Real', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.imag = function (input) {\n    var opAttrs = [{\n      name: 'T',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_COMPLEX64\n    }, {\n      name: 'Tout',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_FLOAT\n    }];\n    var inputs = [input];\n    return this.executeSingleOutput('Imag', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n    var opAttrs = [createTensorsTypeOpAttr('T', image.dtype), {\n      name: 'method',\n      type: this.binding.TF_ATTR_STRING,\n      value: method\n    }, {\n      name: 'extrapolation_value',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: extrapolationValue\n    }];\n    var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n    return this.executeSingleOutput('CropAndResize', opAttrs, [image, boxes, boxIndex, cropSizeTensor]);\n  };\n\n  NodeJSKernelBackend.prototype.depthToSpace = function (x, blockSize, dataFormat) {\n    var opAttrs = [createTensorsTypeOpAttr('T', x), {\n      name: 'block_size',\n      type: this.binding.TF_ATTR_INT,\n      value: blockSize < 2 ? 2 : blockSize\n    }, {\n      name: 'data_format',\n      type: this.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    var inputs = [x];\n    return this.executeSingleOutput('DepthToSpace', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.split = function (value, sizeSplits, axis) {\n    var opAttrs = [{\n      name: 'num_split',\n      type: this.binding.TF_ATTR_INT,\n      value: sizeSplits.length\n    }, createTensorsTypeOpAttr('T', value), {\n      name: 'Tlen',\n      type: this.binding.TF_ATTR_TYPE,\n      value: this.binding.TF_INT32\n    }];\n    var inputs = [value];\n    inputs.push(tfjs_1.tensor1d(sizeSplits, 'int32'));\n    inputs.push(tfjs_1.scalar(axis, 'int32'));\n    return this.executeMultipleOutputs('SplitV', opAttrs, inputs, sizeSplits.length);\n  };\n\n  NodeJSKernelBackend.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {\n    var opAttrs = [{\n      name: 'validate_indices',\n      type: this.binding.TF_ATTR_BOOL,\n      value: true\n    }, createTensorsTypeOpAttr('T', sparseValues.dtype), createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)];\n    var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n    return this.executeSingleOutput('SparseToDense', opAttrs, [sparseIndices, outputShapeTensor, sparseValues, defaultValue]);\n  };\n\n  NodeJSKernelBackend.prototype.linspace = function (start, stop, num) {\n    var opAttrs = [createTensorsTypeOpAttr('T', 'float32'), createTensorsTypeOpAttr('Tidx', 'int32')];\n    var inputs = [tfjs_1.scalar(start, 'float32'), tfjs_1.scalar(stop, 'float32'), tfjs_1.scalar(num, 'int32')];\n    return this.executeSingleOutput('LinSpace', opAttrs, inputs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }, {\n      name: 'ratio',\n      type: this.binding.TF_ATTR_INT,\n      value: ratio\n    }, {\n      name: 'fancy_upscaling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: fancyUpscaling\n    }, {\n      name: 'try_recover_truncated',\n      type: this.binding.TF_ATTR_BOOL,\n      value: tryRecoverTruncated\n    }, {\n      name: 'acceptable_fraction',\n      type: this.binding.TF_ATTR_FLOAT,\n      value: acceptableFraction\n    }, {\n      name: 'dct_method',\n      type: this.binding.TF_ATTR_STRING,\n      value: dctMethod\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n    var opAttrs = [{\n      name: 'channels',\n      type: this.binding.TF_ATTR_INT,\n      value: channels\n    }];\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n    var inputArgs = [tfjs_1.scalar(contents, 'string')];\n    return this.executeSingleOutput('DecodeGif', [], inputArgs);\n  };\n\n  NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n    var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n    var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n    var outputTensorInfo = outputMetadata[0]; // prevent the tensor data from being converted to a UTF8 string, since\n    // the encoded data is not valid UTF8\n\n    outputTensorInfo.dtype = this.binding.TF_UINT8;\n    return this.createOutputTensor(outputTensorInfo);\n  };\n\n  NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    var opAttrs = [{\n      name: 'format',\n      type: this.binding.TF_ATTR_STRING,\n      value: format\n    }, {\n      name: 'quality',\n      type: this.binding.TF_ATTR_INT,\n      value: quality\n    }, {\n      name: 'progressive',\n      type: this.binding.TF_ATTR_BOOL,\n      value: progressive\n    }, {\n      name: 'optimize_size',\n      type: this.binding.TF_ATTR_BOOL,\n      value: optimizeSize\n    }, {\n      name: 'chroma_downsampling',\n      type: this.binding.TF_ATTR_BOOL,\n      value: chromaDownsampling\n    }, {\n      name: 'density_unit',\n      type: this.binding.TF_ATTR_STRING,\n      value: densityUnit\n    }, {\n      name: 'x_density',\n      type: this.binding.TF_ATTR_INT,\n      value: xDensity\n    }, {\n      name: 'y_density',\n      type: this.binding.TF_ATTR_INT,\n      value: yDensity\n    }, {\n      name: 'xmp_metadata',\n      type: this.binding.TF_ATTR_STRING,\n      value: xmpMetadata\n    }];\n    return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n    var opAttrs = [{\n      name: 'compression',\n      type: this.binding.TF_ATTR_INT,\n      value: compression\n    }];\n    return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n  };\n\n  NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n    this.binding.deleteSavedModel(id);\n  };\n\n  NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n    return this.binding.loadSavedModel(path, tags);\n  };\n\n  NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputOpNames, outputOpNames) {\n    var _this = this;\n\n    var outputMetadata = this.binding.runSavedModel(id, this.getInputTensorIds(inputs), inputOpNames.join(','), outputOpNames.join(','));\n    return outputMetadata.map(function (m) {\n      return _this.createOutputTensor(m);\n    });\n  }; // ------------------------------------------------------------\n  // TensorBoard-related (tfjs-node-specific) backend kernels.\n\n\n  NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n    var opAttrs = [{\n      name: 'shared_name',\n      type: this.binding.TF_ATTR_STRING,\n      value: \"logdir:\" + logdir\n    }, {\n      name: 'container',\n      type: this.binding.TF_ATTR_STRING,\n      value: ''\n    }];\n    var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n    return writerResource;\n  };\n\n  NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n    var inputArgs = [resourceHandle, tfjs_1.scalar(logdir), tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'), tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'), tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)];\n    this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n  };\n\n  NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n    var _this = this;\n\n    tfjs_1.tidy(function () {\n      tfjs_1.util.assert(Number.isInteger(step), function () {\n        return \"step is expected to be an integer, but is instead \" + step;\n      });\n      var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n      var typeAttr;\n\n      if (typeof value === 'number') {\n        inputArgs.push(tfjs_1.scalar(value));\n        typeAttr = _this.binding.TF_FLOAT;\n      } else {\n        // `value` is a Scalar.\n        tfjs_1.util.assert(value.rank === 0, function () {\n          return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" + \"writeScalarSummary()\";\n        });\n        inputArgs.push(value);\n        typeAttr = _this.typeAttributeFromTensor(value);\n      }\n\n      var opAttrs = [{\n        name: 'T',\n        type: _this.binding.TF_ATTR_TYPE,\n        value: typeAttr\n      }];\n\n      _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n    });\n  };\n\n  NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n    var inputArgs = [resourceHandle];\n    this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n  }; // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n  // ------------------------------------------------------------\n\n\n  NodeJSKernelBackend.prototype.memory = function () {\n    // Due to automatic garbage collection, the numbers are unreliable.\n    // TODO(kreeger): Since there is finalization in C, count the true\n    // number of undisposed tensors.\n    return {\n      unreliable: true\n    };\n  };\n\n  NodeJSKernelBackend.prototype.time = function (f) {\n    return __awaiter(this, void 0, void 0, function () {\n      var start, elapsed;\n      return __generator(this, function (_a) {\n        start = process.hrtime();\n        f();\n        elapsed = process.hrtime(start);\n        return [2\n        /*return*/\n        , {\n          kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000\n        }];\n      });\n    });\n  };\n\n  NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n    return this.binding.getNumOfSavedModels();\n  };\n\n  return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend);\n\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\n\nfunction nodeBackend() {\n  return tf.findBackend('tensorflow');\n}\n\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\n\nfunction getTFDType(dataType) {\n  var binding = nodeBackend().binding;\n\n  switch (dataType) {\n    case 'float32':\n      return binding.TF_FLOAT;\n\n    case 'int32':\n      return binding.TF_INT32;\n\n    case 'bool':\n      return binding.TF_BOOL;\n\n    case 'complex64':\n      return binding.TF_COMPLEX64;\n\n    case 'string':\n      return binding.TF_STRING;\n    // tslint:disable-next-line:no-any\n\n    case 'int64':\n      // int64 is not a generally supported dtype in TensorFlow.js\n      // (tfjs-core). However, it needs to be included here for the purpose of\n      // writing the `step` value to TensorBoard via WriteScalarSummary and\n      // other op kernels.\n      return binding.TF_INT64;\n\n    default:\n      var errorMessage = \"Unknown dtype: \" + dataType;\n      throw new Error(errorMessage);\n  }\n}\n\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\n\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_ATTR_TYPE,\n    value: tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype) ? getTFDTypeForInputs(tensorsOrDtype) : getTFDType(tensorsOrDtype)\n  };\n}\n\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\n\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n  if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  return {\n    name: attrName,\n    type: nodeBackend().binding.TF_BOOL,\n    value: value\n  };\n}\n\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\n\nfunction getTFDTypeForInputs(tensors) {\n  if (util_1.isNullOrUndefined(tensors)) {\n    throw new Error('Invalid input tensors value.');\n  }\n\n  if (util_1.isArray(tensors)) {\n    for (var i = 0; i < tensors.length; i++) {\n      return getTFDType(tensors[i].dtype);\n    }\n\n    return -1;\n  } else {\n    return getTFDType(tensors.dtype);\n  }\n}\n\nfunction ensureTensorflowBackend() {\n  tf.util.assert(tf.getBackend() === 'tensorflow', function () {\n    return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\";\n  });\n}\n\nexports.ensureTensorflowBackend = ensureTensorflowBackend;","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/node_modules/@tensorflow/tfjs-node-gpu/dist/nodejs_kernel_backend.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","defineProperty","exports","tf","require","tfjs_1","util_1","int64_tensors_1","NodeJSKernelBackend","_super","binding","packageName","_this","isGPUPackage","isUsingGpuDevice","tensorMap","DataStorage","engine","getDTypeInteger","dtype","TF_FLOAT","TF_INT32","TF_BOOL","TF_COMPLEX64","TF_STRING","Error","typeAttributeFromTensor","createOutputTensor","metadata","newId","set","shape","id","values","TF_RESOURCE","TF_UINT8","makeTensorFromDataId","getInputTensorIds","tensors","ids","i","Int64Scalar","valueArray","createTensor","TF_INT64","info","get","dataId","createReductionOpAttrs","tensor","name","type","TF_ATTR_BOOL","createTensorsTypeOpAttr","executeSingleInput","input","opAttrs","executeSingleOutput","floatPrecision","epsilon","inputs","outputMetadata","executeOp","executeMultipleOutputs","numOutputs","map","m","numDataIds","dispose","read","_a","readSync","has","tensorDataSync","disposeData","deleteTensor","delete","move","getTFDType","write","fill","shapeTensor","tensor1d","valueTensor","scalar","TF_ATTR_TYPE","onesLike","x","zerosLike","stridedSlice","begin","end","strides","beginTensor","axis","endTensor","stridesTensor","TF_ATTR_INT","unstack","num","batchMatMul","a","transposeA","transposeB","applyActivation","activation","preluActivationWeights","relu","prelu","elu","relu6","fusedConv2d","filter","convInfo","bias","conv2d","add","fusedBatchMatMul","slice","size","sizeTensor","reverse","axisTensor","concat","from","neg","diag","backend_util","upcastType","select","condition","addN","subtract","multiply","realDivide","floorDiv","divide","divNoNan","unsortedSegmentSum","segmentIds","numSegments","sum","axes","prod","axesTensor","argMin","xInput","toInt","axisScalar","argMax","equal","notEqual","less","lessEqual","greater","greaterEqual","logicalNot","logicalAnd","logicalOr","where","topKValues","k","topKIndices","topk","sorted","kCount","isNullOrUndefined","isSorted","kTensor","min","minimum","max","maximum","all","any","ceil","floor","pow","cast","exp","xTensor","toFloat","log","log1p","sqrt","square","pos","mul","sub","abs","eluDer","dy","selu","int","clip","xMin","complexAbs","sigmoid","sin","cos","tan","asin","acos","atan","sinh","cosh","tanh","mod","round","sign","isNaN","isInf","isFinite","rsqrt","reciprocal","asinh","acosh","atanh","erf","squaredDifference","expm1","softplus","atan2","alpha","nans","stepNoNans","ones","padInfo","strideHeight","strideWidth","padding","dataFormat","dilations","dilationHeight","dilationWidth","TF_ATTR_STRING","padValue","top","bottom","left","right","conv2dDerInput","inputSizes","inShape","conv2dDerFilter","filterSizes","filterShape","depthwiseConv2DDerInput","depthwiseConv2DDerFilter","dY","fusedDepthwiseConv2D","depthwiseConv2D","conv3d","strideDepth","dilationDepth","conv3dDerInput","conv3dDerFilter","maxPool","ksize","filterHeight","filterWidth","maxPoolBackprop","avgPool","avgPoolBackprop","origInputShape","avgPool3d","filterDepth","avgPool3dBackprop","maxPool3d","maxPool3dBackprop","reshape","tile","reps","multiples","pad","paddings","constantValue","paddingsTensor","tensor2d","constantTensor","transpose","perm","permTensor","gather","indices","gatherND","scatterND","updates","batchToSpaceND","blockShape","crops","blockShapeTensor","cropsTensor","spaceToBatchND","resizeBilinear","newHeight","newWidth","alignCorners","resizeBilinearBackprop","resizeNearestNeighbor","resizeNearestNeighborBackprop","origHeight","origWidth","batchNorm","mean","variance","offset","scale","varianceEpsilon","rank","inv","xNorm","depth","TF_ATTR_FLOAT","localResponseNormalization4D","radius","beta","LRNGrad","inputImage","outputImage","multinomial","logits","normalized","numSamples","seed","oneHot","onValue","offValue","depthTensor","onValueTensor","offValueTensor","cumsum","exclusive","nonMaxSuppression","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","maxOutputSizeTensor","iouThresholdTensor","scoreThresholdTensor","fft","ifft","complex","real","imag","cropAndResize","image","boxIndex","cropSize","method","extrapolationValue","cropSizeTensor","depthToSpace","blockSize","split","sizeSplits","sparseToDense","sparseIndices","sparseValues","outputShape","defaultValue","outputShapeTensor","linspace","start","stop","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","inputArgs","decodePng","decodeBmp","decodeGif","executeEncodeImageOp","imageData","imageShape","inputTensorId","outputTensorInfo","encodeJpeg","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","encodePng","compression","deleteSavedModel","loadSavedModelMetaGraph","path","tags","loadSavedModel","runSavedModel","inputOpNames","outputOpNames","join","summaryWriter","logdir","writerResource","createSummaryFileWriter","resourceHandle","maxQueue","flushMillis","filenameSuffix","writeScalarSummary","tidy","util","assert","Number","isInteger","typeAttr","flushSummaryWriter","memory","unreliable","time","elapsed","process","hrtime","kernelMs","getNumOfSavedModels","KernelBackend","nodeBackend","findBackend","dataType","errorMessage","attrName","tensorsOrDtype","Tensor","isArray","getTFDTypeForInputs","createOpAttr","ensureTensorflowBackend","getBackend"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar int64_tensors_1 = require(\"./int64_tensors\");\nvar NodeJSKernelBackend = /** @class */ (function (_super) {\n    __extends(NodeJSKernelBackend, _super);\n    function NodeJSKernelBackend(binding, packageName) {\n        var _this = _super.call(this) || this;\n        _this.binding = binding;\n        _this.isGPUPackage = packageName === '@tensorflow/tfjs-node-gpu';\n        _this.isUsingGpuDevice = _this.binding.isUsingGpuDevice();\n        _this.tensorMap = new tf.DataStorage(_this, tf.engine());\n        return _this;\n    }\n    NodeJSKernelBackend.prototype.getDTypeInteger = function (dtype) {\n        switch (dtype) {\n            case 'float32':\n                return this.binding.TF_FLOAT;\n            case 'int32':\n                return this.binding.TF_INT32;\n            case 'bool':\n                return this.binding.TF_BOOL;\n            case 'complex64':\n                return this.binding.TF_COMPLEX64;\n            case 'string':\n                return this.binding.TF_STRING;\n            default:\n                throw new Error(\"Unsupported DType: \" + dtype);\n        }\n    };\n    NodeJSKernelBackend.prototype.typeAttributeFromTensor = function (value) {\n        return this.getDTypeInteger(value.dtype);\n    };\n    // Creates a new Tensor and maps the dataId to the passed in ID.\n    NodeJSKernelBackend.prototype.createOutputTensor = function (metadata) {\n        var newId = {};\n        this.tensorMap.set(newId, {\n            shape: metadata.shape,\n            dtype: metadata.dtype,\n            id: metadata.id,\n            values: null\n        });\n        var dtype;\n        switch (metadata.dtype) {\n            case this.binding.TF_FLOAT:\n                dtype = 'float32';\n                break;\n            case this.binding.TF_INT32:\n                dtype = 'int32';\n                break;\n            case this.binding.TF_BOOL:\n                dtype = 'bool';\n                break;\n            case this.binding.TF_COMPLEX64:\n                dtype = 'complex64';\n                break;\n            case this.binding.TF_STRING:\n                dtype = 'string';\n                break;\n            case this.binding.TF_RESOURCE:\n                // NOTE(cais): We currently represent resource-type Tensors\n                // as string of ubytes.\n                dtype = 'string';\n                break;\n            case this.binding.TF_UINT8:\n                // TensorFlow uses UINT8 as dtype for image tensor. UINT8 is not\n                // supported in TFJS yet, cast it to int32.\n                dtype = 'int32';\n                break;\n            default:\n                throw new Error(\"Unknown dtype enum \" + metadata.dtype);\n        }\n        return tf.engine().makeTensorFromDataId(newId, metadata.shape, dtype);\n    };\n    // Prepares Tensor instances for Op execution.\n    NodeJSKernelBackend.prototype.getInputTensorIds = function (tensors) {\n        var ids = [];\n        for (var i = 0; i < tensors.length; i++) {\n            if (tensors[i] instanceof int64_tensors_1.Int64Scalar) {\n                // Then `tensors[i]` is a Int64Scalar, which we currently represent\n                // using an `Int32Array`.\n                var value = tensors[i].valueArray;\n                var id = this.binding.createTensor([], this.binding.TF_INT64, value);\n                ids.push(id);\n            }\n            else {\n                var info = this.tensorMap.get(tensors[i].dataId);\n                // TODO - what about ID in this case? Handle in write()??\n                if (info.values != null) {\n                    // Values were delayed to write into the TensorHandle. Do that before\n                    // Op execution and clear stored values.\n                    info.id =\n                        this.binding.createTensor(info.shape, info.dtype, info.values);\n                    info.values = null;\n                }\n                ids.push(info.id);\n            }\n        }\n        return ids;\n    };\n    NodeJSKernelBackend.prototype.createReductionOpAttrs = function (tensor) {\n        return [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('T', tensor.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n    };\n    NodeJSKernelBackend.prototype.executeSingleInput = function (name, input) {\n        var opAttrs = [createTensorsTypeOpAttr('T', input.dtype)];\n        return this.executeSingleOutput(name, opAttrs, [input]);\n    };\n    NodeJSKernelBackend.prototype.floatPrecision = function () {\n        return 32;\n    };\n    NodeJSKernelBackend.prototype.epsilon = function () {\n        return _super.prototype.epsilon.call(this);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides one output Tensor.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @return A resulting Tensor from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeSingleOutput = function (name, opAttrs, inputs) {\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), 1);\n        return this.createOutputTensor(outputMetadata[0]);\n    };\n    /**\n     * Executes a TensorFlow Eager Op that provides multiple output Tensors.\n     * @param name The name of the Op to execute.\n     * @param opAttrs The list of Op attributes required to execute.\n     * @param inputs The list of input Tensors for the Op.\n     * @param numOutputs The number of output Tensors for Op execution.\n     * @return A resulting Tensor array from Op execution.\n     */\n    NodeJSKernelBackend.prototype.executeMultipleOutputs = function (name, opAttrs, inputs, numOutputs) {\n        var _this = this;\n        var outputMetadata = this.binding.executeOp(name, opAttrs, this.getInputTensorIds(inputs), numOutputs);\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    NodeJSKernelBackend.prototype.numDataIds = function () {\n        return this.tensorMap.numDataIds();\n    };\n    NodeJSKernelBackend.prototype.dispose = function () { };\n    NodeJSKernelBackend.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.readSync(dataId)];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.readSync = function (dataId) {\n        if (!this.tensorMap.has(dataId)) {\n            throw new Error(\"Tensor \" + dataId + \" was not registered!\");\n        }\n        var info = this.tensorMap.get(dataId);\n        if (info.values != null) {\n            return info.values;\n        }\n        else {\n            return this.binding.tensorDataSync(info.id);\n        }\n    };\n    NodeJSKernelBackend.prototype.disposeData = function (dataId) {\n        // No-op if already disposed.\n        if (!this.tensorMap.has(dataId)) {\n            return;\n        }\n        var id = this.tensorMap.get(dataId).id;\n        if (id != null && id >= 0) {\n            this.binding.deleteTensor(id);\n        }\n        this.tensorMap.delete(dataId);\n    };\n    NodeJSKernelBackend.prototype.move = function (dataId, values, shape, dtype) {\n        this.tensorMap.set(dataId, { shape: shape, dtype: getTFDType(dtype), values: values, id: -1 });\n    };\n    NodeJSKernelBackend.prototype.write = function (values, shape, dtype) {\n        var dataId = {};\n        this.move(dataId, values, shape, dtype);\n        return dataId;\n    };\n    NodeJSKernelBackend.prototype.fill = function (shape, value, dtype) {\n        // TODO(cais, nkreeger): Investigate whether this can be made into\n        // a dtype helper method. The underlying op kernel doesn't accept undefined\n        // or null dtype.\n        if (dtype == null) {\n            if (typeof value === 'number') {\n                dtype = 'float32';\n            }\n            else {\n                dtype = 'string';\n            }\n        }\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var valueTensor = tfjs_1.scalar(value, dtype);\n        var opAttrs = [\n            {\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(dtype)\n            },\n            {\n                name: 'index_type',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            }\n        ];\n        return this.executeSingleOutput('Fill', opAttrs, [shapeTensor, valueTensor]);\n    };\n    NodeJSKernelBackend.prototype.onesLike = function (x) {\n        var opAttrs = [{\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(x.dtype)\n            }];\n        return this.executeSingleOutput('OnesLike', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.zerosLike = function (x) {\n        var opAttrs = [{\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.getDTypeInteger(x.dtype)\n            }];\n        return this.executeSingleOutput('ZerosLike', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.stridedSlice = function (x, begin, end, strides) {\n        var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n        for (var axis = 0; axis < end.length; axis++) {\n            // Unlike Numpy, when the strides are negative, TF C uses -n-1 instead of\n            // -1 as the \"end\" in order to include the first element.\n            if (strides[axis] < 0 && end[axis] === -1) {\n                end[axis] -= x.shape[axis];\n            }\n        }\n        var endTensor = tfjs_1.tensor1d(end, 'int32');\n        var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n        // All of the masks have already been accounted for in the high level op,\n        // so the backend does NOT need to deal with masks.\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Index', 'int32'),\n            { name: 'begin_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'end_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'ellipsis_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'new_axis_mask', type: this.binding.TF_ATTR_INT, value: 0 },\n            { name: 'shrink_axis_mask', type: this.binding.TF_ATTR_INT, value: 0 }\n        ];\n        return this.executeSingleOutput('StridedSlice', opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n    };\n    NodeJSKernelBackend.prototype.unstack = function (x, axis) {\n        if (axis >= x.shape.length) {\n            throw new Error(\"Invalid axis supplied: \" + axis + \" shape length: \" + x.shape.length);\n        }\n        var num = x.shape[axis];\n        var opAttrs = [\n            { name: 'num', type: this.binding.TF_ATTR_INT, value: num },\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'axis', type: this.binding.TF_ATTR_INT, value: axis }\n        ];\n        return this.executeMultipleOutputs('Unpack', opAttrs, [x], num);\n    };\n    NodeJSKernelBackend.prototype.batchMatMul = function (a, b, transposeA, transposeB) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', a.dtype),\n            { name: 'adj_x', type: this.binding.TF_ATTR_BOOL, value: transposeA },\n            { name: 'adj_y', type: this.binding.TF_ATTR_BOOL, value: transposeB }\n        ];\n        return this.executeSingleOutput('BatchMatMul', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.applyActivation = function (input, activation, preluActivationWeights) {\n        var result = input;\n        if (activation != null) {\n            if (activation === 'linear') {\n                // No-op\n            }\n            else if (activation === 'relu') {\n                result = this.relu(result);\n            }\n            else if (activation === 'prelu') {\n                result = this.prelu(result, preluActivationWeights);\n            }\n            else if (activation === 'elu') {\n                result = this.elu(result);\n            }\n            else if (activation === 'relu6') {\n                result = this.relu6(result);\n            }\n            else {\n                throw new Error(\"Activation: \" + activation + \" has not been implemented for the Node.js backend\");\n            }\n        }\n        return result;\n    };\n    NodeJSKernelBackend.prototype.fusedConv2d = function (_a) {\n        var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        var result = this.conv2d(input, filter, convInfo);\n        if (bias != null) {\n            result = this.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.fusedBatchMatMul = function (_a) {\n        var a = _a.a, b = _a.b, transposeA = _a.transposeA, transposeB = _a.transposeB, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        // Core TensorFlow does not have a fused BatchMatMul op. Combine calls to\n        // achieve the same results:\n        var result = this.batchMatMul(a, b, transposeA, transposeB);\n        if (bias != null) {\n            result = this.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.slice = function (x, begin, size) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Index', 'int32')\n        ];\n        // Bind tensor values\n        var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n        var sizeTensor = tfjs_1.tensor1d(size, 'int32');\n        return this.executeSingleOutput('Slice', opAttrs, [x, beginTensor, sizeTensor]);\n    };\n    NodeJSKernelBackend.prototype.reverse = function (a, axis) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tidx', 'int32'),\n            createTensorsTypeOpAttr('T', a.dtype)\n        ];\n        var axisTensor = tfjs_1.tensor1d(axis, 'int32');\n        return this.executeSingleOutput('ReverseV2', opAttrs, [a, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.concat = function (tensors, axis) {\n        var opAttrs = [\n            { name: 'N', type: this.binding.TF_ATTR_INT, value: tensors.length }, {\n                name: 'Tidx',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            },\n            createTensorsTypeOpAttr('T', tensors)\n        ];\n        var inputs = Array.from(tensors);\n        inputs.push(tfjs_1.scalar(axis, 'int32'));\n        return this.executeSingleOutput('ConcatV2', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.neg = function (a) {\n        return this.executeSingleInput('Neg', a);\n    };\n    NodeJSKernelBackend.prototype.diag = function (x) {\n        return this.executeSingleInput('Diag', x);\n    };\n    NodeJSKernelBackend.prototype.add = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Add', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.select = function (condition, a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Select', opAttrs, [condition, a, b]);\n    };\n    NodeJSKernelBackend.prototype.addN = function (tensors) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', tensors[0].dtype),\n            { name: 'N', type: this.binding.TF_ATTR_INT, value: tensors.length }\n        ];\n        return this.executeSingleOutput('AddN', opAttrs, tensors);\n    };\n    NodeJSKernelBackend.prototype.subtract = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Sub', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.multiply = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Mul', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.realDivide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('RealDiv', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.floorDiv = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('FloorDiv', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divide = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Div', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.divNoNan = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('DivNoNan', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tindices', 'int32'),\n            createTensorsTypeOpAttr('Tnumsegments', 'int32')\n        ];\n        return this.executeSingleOutput('UnsortedSegmentSum', opAttrs, [x, segmentIds, tfjs_1.scalar(numSegments, 'int32')]);\n    };\n    NodeJSKernelBackend.prototype.sum = function (x, axes) {\n        var axisTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('Sum', this.createReductionOpAttrs(x), [x, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.prod = function (x, axes) {\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        var opAttrs = [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        return this.executeSingleOutput('Prod', opAttrs, [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.argMin = function (x, axis) {\n        var xInput = x.dtype === 'bool' ? x.toInt() : x;\n        var axisScalar = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', xInput.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32'),\n            createTensorsTypeOpAttr('output_type', 'int32')\n        ];\n        return this.executeSingleOutput('ArgMin', opAttrs, [xInput, axisScalar]);\n    };\n    NodeJSKernelBackend.prototype.argMax = function (x, axis) {\n        var xInput = x.dtype === 'bool' ? x.toInt() : x;\n        var axisScalar = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', xInput.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32'),\n            createTensorsTypeOpAttr('output_type', 'int32')\n        ];\n        return this.executeSingleOutput('ArgMax', opAttrs, [xInput, axisScalar]);\n    };\n    NodeJSKernelBackend.prototype.equal = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Equal', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.notEqual = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('NotEqual', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.less = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Less', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.lessEqual = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('LessEqual', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.greater = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Greater', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.greaterEqual = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('GreaterEqual', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.logicalNot = function (a) {\n        return this.executeSingleOutput('LogicalNot', [], [a]);\n    };\n    NodeJSKernelBackend.prototype.logicalAnd = function (a, b) {\n        return this.executeSingleOutput('LogicalAnd', [], [a, b]);\n    };\n    NodeJSKernelBackend.prototype.logicalOr = function (a, b) {\n        return this.executeSingleOutput('LogicalOr', [], [a, b]);\n    };\n    NodeJSKernelBackend.prototype.where = function (condition) {\n        return this.executeSingleOutput('Where', [], [condition]);\n    };\n    NodeJSKernelBackend.prototype.topKValues = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topKIndices = function (x, k) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.topk = function (x, k, sorted) {\n        var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n        var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n        var opAttrs = [\n            { name: 'sorted', type: this.binding.TF_ATTR_BOOL, value: isSorted },\n            createTensorsTypeOpAttr('T', x.dtype),\n        ];\n        var kTensor = tfjs_1.scalar(kCount, 'int32');\n        // 'TopKV2' has two-hard coded output attributes:\n        return this.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n    };\n    NodeJSKernelBackend.prototype.min = function (x, axes) {\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('Min', this.createReductionOpAttrs(x), [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.minimum = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Minimum', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.max = function (x, axes) {\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('Max', this.createReductionOpAttrs(x), [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.maximum = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', tfjs_1.backend_util.upcastType(a.dtype, b.dtype))];\n        return this.executeSingleOutput('Maximum', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.all = function (x, axes) {\n        var opAttrs = [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('All', opAttrs, [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.any = function (x, axes) {\n        var opAttrs = [\n            { name: 'keep_dims', type: this.binding.TF_ATTR_BOOL, value: false },\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var axesTensor = tfjs_1.tensor1d(axes, 'int32');\n        return this.executeSingleOutput('Any', opAttrs, [x, axesTensor]);\n    };\n    NodeJSKernelBackend.prototype.ceil = function (x) {\n        return this.executeSingleInput('Ceil', x);\n    };\n    NodeJSKernelBackend.prototype.floor = function (x) {\n        return this.executeSingleInput('Floor', x);\n    };\n    NodeJSKernelBackend.prototype.pow = function (a, b) {\n        var dtype = tfjs_1.backend_util.upcastType(a.dtype, b.dtype);\n        var opAttrs = [createTensorsTypeOpAttr('T', dtype)];\n        return this.executeSingleOutput('Pow', opAttrs, [a.cast(dtype), b.cast(dtype)]);\n    };\n    NodeJSKernelBackend.prototype.exp = function (x) {\n        var xTensor = x.dtype === 'int32' ? x.toFloat() : x;\n        return this.executeSingleInput('Exp', xTensor);\n    };\n    NodeJSKernelBackend.prototype.log = function (x) {\n        return this.executeSingleInput('Log', x);\n    };\n    NodeJSKernelBackend.prototype.log1p = function (x) {\n        return this.executeSingleInput('Log1p', x);\n    };\n    NodeJSKernelBackend.prototype.sqrt = function (x) {\n        return this.executeSingleInput('Sqrt', x);\n    };\n    NodeJSKernelBackend.prototype.square = function (x) {\n        return this.executeSingleInput('Square', x);\n    };\n    NodeJSKernelBackend.prototype.relu = function (x) {\n        return this.executeSingleInput('Relu', x);\n    };\n    NodeJSKernelBackend.prototype.relu6 = function (x) {\n        return this.executeSingleInput('Relu6', x);\n    };\n    NodeJSKernelBackend.prototype.prelu = function (x, a) {\n        var pos = this.relu(x);\n        var neg = a.mul(x.sub(this.abs(x))).mul(0.5);\n        return pos.add(neg);\n    };\n    NodeJSKernelBackend.prototype.elu = function (x) {\n        return this.executeSingleInput('Elu', x);\n    };\n    NodeJSKernelBackend.prototype.eluDer = function (dy, y) {\n        var opAttrs = [createTensorsTypeOpAttr('T', y.dtype)];\n        return this.executeSingleOutput('EluGrad', opAttrs, [dy, y]);\n    };\n    NodeJSKernelBackend.prototype.selu = function (x) {\n        return this.executeSingleInput('Selu', x);\n    };\n    NodeJSKernelBackend.prototype.int = function (x) {\n        throw new Error('Method not implemented.');\n    };\n    NodeJSKernelBackend.prototype.clip = function (x, min, max) {\n        var xMin = this.minimum(x, tfjs_1.scalar(max));\n        return this.maximum(xMin, tfjs_1.scalar(min));\n    };\n    NodeJSKernelBackend.prototype.abs = function (x) {\n        return this.executeSingleInput('Abs', x);\n    };\n    NodeJSKernelBackend.prototype.complexAbs = function (x) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tout', 'float32')\n        ];\n        return this.executeSingleOutput('ComplexAbs', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.sigmoid = function (x) {\n        return this.executeSingleInput('Sigmoid', x);\n    };\n    NodeJSKernelBackend.prototype.sin = function (x) {\n        return this.executeSingleInput('Sin', x);\n    };\n    NodeJSKernelBackend.prototype.cos = function (x) {\n        return this.executeSingleInput('Cos', x);\n    };\n    NodeJSKernelBackend.prototype.tan = function (x) {\n        return this.executeSingleInput('Tan', x);\n    };\n    NodeJSKernelBackend.prototype.asin = function (x) {\n        return this.executeSingleInput('Asin', x);\n    };\n    NodeJSKernelBackend.prototype.acos = function (x) {\n        return this.executeSingleInput('Acos', x);\n    };\n    NodeJSKernelBackend.prototype.atan = function (x) {\n        return this.executeSingleInput('Atan', x);\n    };\n    NodeJSKernelBackend.prototype.sinh = function (x) {\n        return this.executeSingleInput('Sinh', x);\n    };\n    NodeJSKernelBackend.prototype.cosh = function (x) {\n        return this.executeSingleInput('Cosh', x);\n    };\n    NodeJSKernelBackend.prototype.tanh = function (x) {\n        return this.executeSingleInput('Tanh', x);\n    };\n    NodeJSKernelBackend.prototype.mod = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('FloorMod', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.round = function (x) {\n        return this.executeSingleInput('Round', x);\n    };\n    NodeJSKernelBackend.prototype.sign = function (x) {\n        return this.executeSingleInput('Sign', x);\n    };\n    NodeJSKernelBackend.prototype.isNaN = function (x) {\n        return this.executeSingleInput('IsNan', x);\n    };\n    NodeJSKernelBackend.prototype.isInf = function (x) {\n        return this.executeSingleInput('IsInf', x);\n    };\n    NodeJSKernelBackend.prototype.isFinite = function (x) {\n        return this.executeSingleInput('IsFinite', x);\n    };\n    NodeJSKernelBackend.prototype.rsqrt = function (x) {\n        return this.executeSingleInput('Rsqrt', x);\n    };\n    NodeJSKernelBackend.prototype.reciprocal = function (x) {\n        return this.executeSingleInput('Reciprocal', x);\n    };\n    NodeJSKernelBackend.prototype.asinh = function (x) {\n        return this.executeSingleInput('Asinh', x);\n    };\n    NodeJSKernelBackend.prototype.acosh = function (x) {\n        return this.executeSingleInput('Acosh', x);\n    };\n    NodeJSKernelBackend.prototype.atanh = function (x) {\n        return this.executeSingleInput('Atanh', x);\n    };\n    NodeJSKernelBackend.prototype.erf = function (x) {\n        return this.executeSingleInput('Erf', x);\n    };\n    NodeJSKernelBackend.prototype.squaredDifference = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('SquaredDifference', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.expm1 = function (x) {\n        return this.executeSingleInput('Expm1', x);\n    };\n    NodeJSKernelBackend.prototype.softplus = function (x) {\n        return this.executeSingleInput('Softplus', x);\n    };\n    NodeJSKernelBackend.prototype.atan2 = function (a, b) {\n        var opAttrs = [createTensorsTypeOpAttr('T', a.dtype)];\n        return this.executeSingleOutput('Atan2', opAttrs, [a, b]);\n    };\n    NodeJSKernelBackend.prototype.step = function (x, alpha) {\n        var dtype = x.dtype;\n        var nans = this.isNaN(x);\n        var stepNoNans = this.select(this.greater(x, tfjs_1.scalar(0, dtype)), tfjs_1.ones(x.shape), tfjs_1.fill(x.shape, alpha, dtype));\n        return this.select(nans, x, stepNoNans);\n    };\n    NodeJSKernelBackend.prototype.conv2d = function (x, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME' &&\n            convInfo.padInfo.type !== 'EXPLICIT') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations },\n        ];\n        if (padding === 'EXPLICIT') {\n            var padValue = [\n                convInfo.padInfo.top, convInfo.padInfo.bottom, convInfo.padInfo.left,\n                convInfo.padInfo.right\n            ];\n            opAttrs.push({\n                name: 'explicit_paddings',\n                type: this.binding.TF_ATTR_INT,\n                value: dataFormat === 'NHWC' ? [0, 0].concat(padValue, [0, 0]) : [0, 0, 0, 0].concat(padValue)\n            });\n        }\n        return this.executeSingleOutput('Conv2D', opAttrs, [x, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('Conv2DBackpropInput', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'use_cudnn_on_gpu', type: this.binding.TF_ATTR_BOOL, value: true },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('Conv2DBackpropFilter', opAttrs, [x, filterSizes, dy]);\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('DepthwiseConv2dNativeBackpropInput', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2DDerFilter = function (x, dY, convInfo) {\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('DepthwiseConv2dNativeBackpropFilter', opAttrs, [x, filterSizes, dY]);\n    };\n    NodeJSKernelBackend.prototype.fusedDepthwiseConv2D = function (_a) {\n        var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;\n        var result = this.depthwiseConv2D(input, filter, convInfo);\n        if (bias != null) {\n            result = this.add(result, bias);\n        }\n        result = this.applyActivation(result, activation, preluActivationWeights);\n        return result;\n    };\n    NodeJSKernelBackend.prototype.depthwiseConv2D = function (input, filter, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var dilations = [1, convInfo.dilationHeight, convInfo.dilationWidth, 1];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', input.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        return this.executeSingleOutput('DepthwiseConv2dNative', opAttrs, [input, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv3d = function (x, filter, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        return this.executeSingleOutput('Conv3D', opAttrs, [x, filter]);\n    };\n    NodeJSKernelBackend.prototype.conv3dDerInput = function (dy, filter, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', dy.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations },\n            createTensorsTypeOpAttr('Tshape', 'int32')\n        ];\n        var inputSizes = tfjs_1.tensor1d(convInfo.inShape, 'int32');\n        return this.executeSingleOutput('Conv3DBackpropInputV2', opAttrs, [inputSizes, filter, dy]);\n    };\n    NodeJSKernelBackend.prototype.conv3dDerFilter = function (x, dY, convInfo) {\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        if (!this.isGPUPackage && convInfo.dilationDepth > 1) {\n            throw new Error('CPU Dilation depth must be 1');\n        }\n        var dilations = [\n            1, convInfo.dilationDepth, convInfo.dilationHeight,\n            convInfo.dilationWidth, 1\n        ];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'dilations', type: this.binding.TF_ATTR_INT, value: dilations }\n        ];\n        var filterSizes = tfjs_1.tensor1d(convInfo.filterShape, 'int32');\n        return this.executeSingleOutput('Conv3DBackpropFilterV2', opAttrs, [x, filterSizes, dY]);\n    };\n    NodeJSKernelBackend.prototype.maxPool = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        return this.executeSingleOutput('MaxPool', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('MaxPoolGrad', opAttrs, [x, y, dy]);\n    };\n    NodeJSKernelBackend.prototype.avgPool = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('AvgPool', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n        return this.executeSingleOutput('AvgPoolGrad', opAttrs, [origInputShape, dy]);\n    };\n    NodeJSKernelBackend.prototype.avgPool3d = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('AvgPool3D', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.avgPool3dBackprop = function (dy, x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        var origInputShape = tfjs_1.tensor1d(x.shape, 'int32');\n        return this.executeSingleOutput('AvgPool3DGrad', opAttrs, [origInputShape, dy]);\n    };\n    NodeJSKernelBackend.prototype.maxPool3d = function (x, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding }, {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        return this.executeSingleOutput('MaxPool3D', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [\n            1, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, 1\n        ];\n        var strides = [\n            1, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, 1\n        ];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NDHWC' : 'NCDHW';\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'ksize', type: this.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: this.binding.TF_ATTR_INT, value: strides },\n            { name: 'padding', type: this.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return this.executeSingleOutput('MaxPool3DGrad', opAttrs, [x, y, dy]);\n    };\n    NodeJSKernelBackend.prototype.reshape = function (x, shape) {\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tshape', shapeTensor.dtype)\n        ];\n        return this.executeSingleOutput('Reshape', opAttrs, [x, shapeTensor]);\n    };\n    NodeJSKernelBackend.prototype.cast = function (x, dtype) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('SrcT', x.dtype),\n            createTensorsTypeOpAttr('DstT', dtype),\n            { name: 'Truncate', type: this.binding.TF_ATTR_BOOL, value: false }\n        ];\n        return this.executeSingleOutput('Cast', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.tile = function (x, reps) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tmultiples', 'int32')\n        ];\n        var multiples = tfjs_1.tensor1d(reps, 'int32');\n        return this.executeSingleOutput('Tile', opAttrs, [x, multiples]);\n    };\n    NodeJSKernelBackend.prototype.pad = function (x, paddings, constantValue) {\n        // Bind tensor values\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n        var constantTensor = tfjs_1.scalar(constantValue, x.dtype);\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)\n        ];\n        return this.executeSingleOutput('PadV2', opAttrs, [x, paddingsTensor, constantTensor]);\n    };\n    NodeJSKernelBackend.prototype.transpose = function (x, perm) {\n        var permTensor = tfjs_1.tensor1d(perm, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tperm', 'int32')\n        ];\n        return this.executeSingleOutput('Transpose', opAttrs, [x, permTensor]);\n    };\n    NodeJSKernelBackend.prototype.gather = function (x, indices, axis) {\n        var axisTensor = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tparams', x.dtype),\n            createTensorsTypeOpAttr('Tindices', indices.dtype),\n            createTensorsTypeOpAttr('Taxis', 'int32')\n        ];\n        return this.executeSingleOutput('GatherV2', opAttrs, [x, indices, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.gatherND = function (x, indices) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('Tparams', x.dtype),\n            createTensorsTypeOpAttr('Tindices', 'int32')\n        ];\n        return this.executeSingleOutput('GatherNd', opAttrs, [x, indices]);\n    };\n    NodeJSKernelBackend.prototype.scatterND = function (indices, updates, shape) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', updates.dtype),\n            createTensorsTypeOpAttr('Tindices', 'int32')\n        ];\n        var shapeTensor = tfjs_1.tensor1d(shape, 'int32');\n        return this.executeSingleOutput('ScatterNd', opAttrs, [indices, updates, shapeTensor]);\n    };\n    NodeJSKernelBackend.prototype.batchToSpaceND = function (x, blockShape, crops) {\n        var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n        var cropsTensor = tfjs_1.tensor2d(crops, [crops.length, crops[0].length], 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tblock_shape', 'int32'),\n            createTensorsTypeOpAttr('Tcrops', cropsTensor.dtype)\n        ];\n        return this.executeSingleOutput('BatchToSpaceND', opAttrs, [x, blockShapeTensor, cropsTensor]);\n    };\n    NodeJSKernelBackend.prototype.spaceToBatchND = function (x, blockShape, paddings) {\n        var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tblock_shape', 'int32'),\n            createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)\n        ];\n        return this.executeSingleOutput('SpaceToBatchND', opAttrs, [x, blockShapeTensor, paddingsTensor]);\n    };\n    NodeJSKernelBackend.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            },\n        ];\n        var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n        return this.executeSingleOutput('ResizeBilinear', opAttrs, [x, size]);\n    };\n    NodeJSKernelBackend.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype), {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            }\n        ];\n        return this.executeSingleOutput('ResizeBilinearGrad', opAttrs, [dy, x]);\n    };\n    NodeJSKernelBackend.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            },\n        ];\n        var size = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n        return this.executeSingleOutput('ResizeNearestNeighbor', opAttrs, [x, size]);\n    };\n    NodeJSKernelBackend.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype), {\n                name: 'align_corners',\n                type: this.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            }\n        ];\n        var _a = x.shape, origHeight = _a[1], origWidth = _a[2];\n        var size = tfjs_1.tensor1d([origHeight, origWidth], 'int32');\n        return this.executeSingleOutput('ResizeNearestNeighborGrad', opAttrs, [dy, size]);\n    };\n    NodeJSKernelBackend.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {\n        if (mean.rank > 1) {\n            // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n            var inv = tfjs_1.rsqrt(variance.add(tfjs_1.scalar(varianceEpsilon)));\n            if (scale != null) {\n                inv = inv.mul(scale);\n            }\n            var xNorm = x.sub(mean).mul(inv);\n            return offset != null ? xNorm.add(offset) : xNorm;\n        }\n        var dataFormat = 'NHWC';\n        var depth = x.shape[3];\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            {\n                name: 'epsilon',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: varianceEpsilon\n            },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n            { name: 'is_training', type: this.binding.TF_ATTR_BOOL, value: false },\n        ];\n        var numOutputs = 5;\n        if (scale == null) {\n            scale = tfjs_1.fill([depth], 1);\n        }\n        if (offset == null) {\n            offset = tfjs_1.fill([depth], 0);\n        }\n        return this.executeMultipleOutputs('FusedBatchNorm', opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n    };\n    NodeJSKernelBackend.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x.dtype),\n            { name: 'depth_radius', type: this.binding.TF_ATTR_INT, value: radius },\n            { name: 'bias', type: this.binding.TF_ATTR_FLOAT, value: bias },\n            { name: 'alpha', type: this.binding.TF_ATTR_FLOAT, value: alpha },\n            { name: 'beta', type: this.binding.TF_ATTR_FLOAT, value: beta },\n        ];\n        return this.executeSingleOutput('LRN', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.LRNGrad = function (dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', dy.dtype),\n            { name: 'depth_radius', type: this.binding.TF_ATTR_INT, value: radius },\n            { name: 'bias', type: this.binding.TF_ATTR_FLOAT, value: bias },\n            { name: 'alpha', type: this.binding.TF_ATTR_FLOAT, value: alpha },\n            { name: 'beta', type: this.binding.TF_ATTR_FLOAT, value: beta },\n        ];\n        return this.executeSingleOutput('LRNGrad', opAttrs, [dy, inputImage, outputImage]);\n    };\n    NodeJSKernelBackend.prototype.multinomial = function (logits, normalized, numSamples, seed) {\n        if (normalized) {\n            throw new Error('TF Node backend does not support normalized logits ' +\n                'passed to multinomial');\n        }\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', logits.dtype),\n            createTensorsTypeOpAttr('output_dtype', 'int32'),\n            { name: 'seed', type: this.binding.TF_ATTR_INT, value: seed },\n            { name: 'seed2', type: this.binding.TF_ATTR_INT, value: seed * seed },\n        ];\n        return this.executeSingleOutput('Multinomial', opAttrs, [logits, tfjs_1.scalar(numSamples, 'int32')]);\n    };\n    NodeJSKernelBackend.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var depthTensor = tfjs_1.scalar(depth, 'int32');\n        var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n        var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n        var opAttrs = [\n            { name: 'axis', type: this.binding.TF_ATTR_INT, value: -1 },\n            createTensorsTypeOpAttr('T', indices.dtype),\n            createTensorsTypeOpAttr('TI', indices.dtype)\n        ];\n        return this.executeSingleOutput('OneHot', opAttrs, [\n            indices, depthTensor, onValueTensor, offValueTensor\n        ]);\n    };\n    NodeJSKernelBackend.prototype.cumsum = function (x, axis, exclusive, reverse) {\n        var axisTensor = tfjs_1.scalar(axis, 'int32');\n        var opAttrs = [\n            { name: 'exclusive', type: this.binding.TF_ATTR_BOOL, value: exclusive },\n            { name: 'reverse', type: this.binding.TF_ATTR_BOOL, value: reverse },\n            createTensorsTypeOpAttr('T', x.dtype),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        return this.executeSingleOutput('Cumsum', opAttrs, [x, axisTensor]);\n    };\n    NodeJSKernelBackend.prototype.nonMaxSuppression = function (boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        var opAttrs = [createTensorsTypeOpAttr('T', boxes.dtype)];\n        var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n        var iouThresholdTensor = tfjs_1.scalar(iouThreshold);\n        var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold);\n        return this.executeSingleOutput('NonMaxSuppressionV3', opAttrs, [\n            boxes, scores, maxOutputSizeTensor, iouThresholdTensor,\n            scoreThresholdTensor\n        ]);\n    };\n    NodeJSKernelBackend.prototype.fft = function (x) {\n        var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n        return this.executeSingleOutput('FFT', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.ifft = function (x) {\n        var opAttrs = [createTensorsTypeOpAttr('Tcomplex', x.dtype)];\n        return this.executeSingleOutput('IFFT', opAttrs, [x]);\n    };\n    NodeJSKernelBackend.prototype.complex = function (real, imag) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', real),\n            {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_COMPLEX64\n            },\n        ];\n        var inputs = [real, imag];\n        return this.executeSingleOutput('Complex', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.real = function (input) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', input), {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_FLOAT\n            }\n        ];\n        var inputs = [input];\n        return this.executeSingleOutput('Real', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.imag = function (input) {\n        var opAttrs = [\n            {\n                name: 'T',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_COMPLEX64\n            },\n            {\n                name: 'Tout',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_FLOAT\n            }\n        ];\n        var inputs = [input];\n        return this.executeSingleOutput('Imag', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', image.dtype),\n            { name: 'method', type: this.binding.TF_ATTR_STRING, value: method }, {\n                name: 'extrapolation_value',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: extrapolationValue\n            }\n        ];\n        var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n        return this.executeSingleOutput('CropAndResize', opAttrs, [image, boxes, boxIndex, cropSizeTensor]);\n    };\n    NodeJSKernelBackend.prototype.depthToSpace = function (x, blockSize, dataFormat) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', x), {\n                name: 'block_size',\n                type: this.binding.TF_ATTR_INT,\n                value: blockSize < 2 ? 2 : blockSize\n            },\n            {\n                name: 'data_format',\n                type: this.binding.TF_ATTR_STRING,\n                value: dataFormat\n            }\n        ];\n        var inputs = [x];\n        return this.executeSingleOutput('DepthToSpace', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.split = function (value, sizeSplits, axis) {\n        var opAttrs = [\n            {\n                name: 'num_split',\n                type: this.binding.TF_ATTR_INT,\n                value: sizeSplits.length\n            },\n            createTensorsTypeOpAttr('T', value), {\n                name: 'Tlen',\n                type: this.binding.TF_ATTR_TYPE,\n                value: this.binding.TF_INT32\n            }\n        ];\n        var inputs = [value];\n        inputs.push(tfjs_1.tensor1d(sizeSplits, 'int32'));\n        inputs.push(tfjs_1.scalar(axis, 'int32'));\n        return this.executeMultipleOutputs('SplitV', opAttrs, inputs, sizeSplits.length);\n    };\n    NodeJSKernelBackend.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {\n        var opAttrs = [\n            { name: 'validate_indices', type: this.binding.TF_ATTR_BOOL, value: true },\n            createTensorsTypeOpAttr('T', sparseValues.dtype),\n            createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)\n        ];\n        var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n        return this.executeSingleOutput('SparseToDense', opAttrs, [\n            sparseIndices, outputShapeTensor, sparseValues, defaultValue\n        ]);\n    };\n    NodeJSKernelBackend.prototype.linspace = function (start, stop, num) {\n        var opAttrs = [\n            createTensorsTypeOpAttr('T', 'float32'),\n            createTensorsTypeOpAttr('Tidx', 'int32')\n        ];\n        var inputs = [\n            tfjs_1.scalar(start, 'float32'), tfjs_1.scalar(stop, 'float32'), tfjs_1.scalar(num, 'int32')\n        ];\n        return this.executeSingleOutput('LinSpace', opAttrs, inputs);\n    };\n    NodeJSKernelBackend.prototype.decodeJpeg = function (contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n        var opAttrs = [\n            { name: 'channels', type: this.binding.TF_ATTR_INT, value: channels },\n            { name: 'ratio', type: this.binding.TF_ATTR_INT, value: ratio }, {\n                name: 'fancy_upscaling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: fancyUpscaling\n            },\n            {\n                name: 'try_recover_truncated',\n                type: this.binding.TF_ATTR_BOOL,\n                value: tryRecoverTruncated\n            },\n            {\n                name: 'acceptable_fraction',\n                type: this.binding.TF_ATTR_FLOAT,\n                value: acceptableFraction\n            },\n            { name: 'dct_method', type: this.binding.TF_ATTR_STRING, value: dctMethod }\n        ];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeJpeg', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodePng = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodePng', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeBmp = function (contents, channels) {\n        var opAttrs = [{ name: 'channels', type: this.binding.TF_ATTR_INT, value: channels }];\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeBmp', opAttrs, inputArgs);\n    };\n    NodeJSKernelBackend.prototype.decodeGif = function (contents) {\n        var inputArgs = [tfjs_1.scalar(contents, 'string')];\n        return this.executeSingleOutput('DecodeGif', [], inputArgs);\n    };\n    NodeJSKernelBackend.prototype.executeEncodeImageOp = function (name, opAttrs, imageData, imageShape) {\n        var inputTensorId = this.binding.createTensor(imageShape, this.binding.TF_UINT8, imageData);\n        var outputMetadata = this.binding.executeOp(name, opAttrs, [inputTensorId], 1);\n        var outputTensorInfo = outputMetadata[0];\n        // prevent the tensor data from being converted to a UTF8 string, since\n        // the encoded data is not valid UTF8\n        outputTensorInfo.dtype = this.binding.TF_UINT8;\n        return this.createOutputTensor(outputTensorInfo);\n    };\n    NodeJSKernelBackend.prototype.encodeJpeg = function (imageData, imageShape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n        var opAttrs = [\n            { name: 'format', type: this.binding.TF_ATTR_STRING, value: format },\n            { name: 'quality', type: this.binding.TF_ATTR_INT, value: quality }, {\n                name: 'progressive',\n                type: this.binding.TF_ATTR_BOOL,\n                value: progressive\n            },\n            {\n                name: 'optimize_size',\n                type: this.binding.TF_ATTR_BOOL,\n                value: optimizeSize\n            },\n            {\n                name: 'chroma_downsampling',\n                type: this.binding.TF_ATTR_BOOL,\n                value: chromaDownsampling\n            },\n            {\n                name: 'density_unit',\n                type: this.binding.TF_ATTR_STRING,\n                value: densityUnit\n            },\n            { name: 'x_density', type: this.binding.TF_ATTR_INT, value: xDensity },\n            { name: 'y_density', type: this.binding.TF_ATTR_INT, value: yDensity }, {\n                name: 'xmp_metadata',\n                type: this.binding.TF_ATTR_STRING,\n                value: xmpMetadata\n            }\n        ];\n        return this.executeEncodeImageOp('EncodeJpeg', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.encodePng = function (imageData, imageShape, compression) {\n        var opAttrs = [\n            { name: 'compression', type: this.binding.TF_ATTR_INT, value: compression }\n        ];\n        return this.executeEncodeImageOp('EncodePng', opAttrs, imageData, imageShape);\n    };\n    NodeJSKernelBackend.prototype.deleteSavedModel = function (id) {\n        this.binding.deleteSavedModel(id);\n    };\n    NodeJSKernelBackend.prototype.loadSavedModelMetaGraph = function (path, tags) {\n        return this.binding.loadSavedModel(path, tags);\n    };\n    NodeJSKernelBackend.prototype.runSavedModel = function (id, inputs, inputOpNames, outputOpNames) {\n        var _this = this;\n        var outputMetadata = this.binding.runSavedModel(id, this.getInputTensorIds(inputs), inputOpNames.join(','), outputOpNames.join(','));\n        return outputMetadata.map(function (m) { return _this.createOutputTensor(m); });\n    };\n    // ------------------------------------------------------------\n    // TensorBoard-related (tfjs-node-specific) backend kernels.\n    NodeJSKernelBackend.prototype.summaryWriter = function (logdir) {\n        var opAttrs = [\n            {\n                name: 'shared_name',\n                type: this.binding.TF_ATTR_STRING,\n                value: \"logdir:\" + logdir\n            },\n            { name: 'container', type: this.binding.TF_ATTR_STRING, value: '' }\n        ];\n        var writerResource = this.executeSingleOutput('SummaryWriter', opAttrs, []);\n        return writerResource;\n    };\n    NodeJSKernelBackend.prototype.createSummaryFileWriter = function (resourceHandle, logdir, maxQueue, flushMillis, filenameSuffix) {\n        var inputArgs = [\n            resourceHandle, tfjs_1.scalar(logdir),\n            tfjs_1.scalar(maxQueue == null ? 10 : maxQueue, 'int32'),\n            tfjs_1.scalar(flushMillis == null ? 2 * 60 * 1000 : flushMillis, 'int32'),\n            tfjs_1.scalar(filenameSuffix == null ? '.v2' : filenameSuffix)\n        ];\n        this.executeMultipleOutputs('CreateSummaryFileWriter', [], inputArgs, 0);\n    };\n    NodeJSKernelBackend.prototype.writeScalarSummary = function (resourceHandle, step, name, value) {\n        var _this = this;\n        tfjs_1.tidy(function () {\n            tfjs_1.util.assert(Number.isInteger(step), function () { return \"step is expected to be an integer, but is instead \" + step; });\n            var inputArgs = [resourceHandle, new int64_tensors_1.Int64Scalar(step), tfjs_1.scalar(name, 'string')];\n            var typeAttr;\n            if (typeof value === 'number') {\n                inputArgs.push(tfjs_1.scalar(value));\n                typeAttr = _this.binding.TF_FLOAT;\n            }\n            else {\n                // `value` is a Scalar.\n                tfjs_1.util.assert(value.rank === 0, function () { return \"A non-scalar tensor (rank \" + value.rank + \") is passed to \" +\n                    \"writeScalarSummary()\"; });\n                inputArgs.push(value);\n                typeAttr = _this.typeAttributeFromTensor(value);\n            }\n            var opAttrs = [{ name: 'T', type: _this.binding.TF_ATTR_TYPE, value: typeAttr }];\n            _this.binding.executeOp('WriteScalarSummary', opAttrs, _this.getInputTensorIds(inputArgs), 0);\n        });\n    };\n    NodeJSKernelBackend.prototype.flushSummaryWriter = function (resourceHandle) {\n        var inputArgs = [resourceHandle];\n        this.executeMultipleOutputs('FlushSummaryWriter', [], inputArgs, 0);\n    };\n    // ~ TensorBoard-related (tfjs-node-specific) backend kernels.\n    // ------------------------------------------------------------\n    NodeJSKernelBackend.prototype.memory = function () {\n        // Due to automatic garbage collection, the numbers are unreliable.\n        // TODO(kreeger): Since there is finalization in C, count the true\n        // number of undisposed tensors.\n        return { unreliable: true };\n    };\n    NodeJSKernelBackend.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, elapsed;\n            return __generator(this, function (_a) {\n                start = process.hrtime();\n                f();\n                elapsed = process.hrtime(start);\n                return [2 /*return*/, { kernelMs: elapsed[0] * 1000 + elapsed[1] / 1000000 }];\n            });\n        });\n    };\n    NodeJSKernelBackend.prototype.getNumOfSavedModels = function () {\n        return this.binding.getNumOfSavedModels();\n    };\n    return NodeJSKernelBackend;\n}(tfjs_1.KernelBackend));\nexports.NodeJSKernelBackend = NodeJSKernelBackend;\n/** Returns an instance of the Node.js backend. */\nfunction nodeBackend() {\n    return tf.findBackend('tensorflow');\n}\nexports.nodeBackend = nodeBackend;\n/** Returns the TF dtype for a given DataType. */\nfunction getTFDType(dataType) {\n    var binding = nodeBackend().binding;\n    switch (dataType) {\n        case 'float32':\n            return binding.TF_FLOAT;\n        case 'int32':\n            return binding.TF_INT32;\n        case 'bool':\n            return binding.TF_BOOL;\n        case 'complex64':\n            return binding.TF_COMPLEX64;\n        case 'string':\n            return binding.TF_STRING;\n        // tslint:disable-next-line:no-any\n        case 'int64':\n            // int64 is not a generally supported dtype in TensorFlow.js\n            // (tfjs-core). However, it needs to be included here for the purpose of\n            // writing the `step` value to TensorBoard via WriteScalarSummary and\n            // other op kernels.\n            return binding.TF_INT64;\n        default:\n            var errorMessage = \"Unknown dtype: \" + dataType;\n            throw new Error(errorMessage);\n    }\n}\nexports.getTFDType = getTFDType;\n/**\n * Creates a TFEOpAttr for a 'type' OpDef attribute from a Tensor or list of\n * Tensors.\n */\nfunction createTensorsTypeOpAttr(attrName, tensorsOrDtype) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return {\n        name: attrName,\n        type: nodeBackend().binding.TF_ATTR_TYPE,\n        value: (tensorsOrDtype instanceof tf.Tensor || Array.isArray(tensorsOrDtype)) ?\n            getTFDTypeForInputs(tensorsOrDtype) :\n            getTFDType(tensorsOrDtype)\n    };\n}\nexports.createTensorsTypeOpAttr = createTensorsTypeOpAttr;\nfunction createOpAttr(attrName, tensorsOrDtype, value) {\n    if (util_1.isNullOrUndefined(tensorsOrDtype)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    return { name: attrName, type: nodeBackend().binding.TF_BOOL, value: value };\n}\nexports.createOpAttr = createOpAttr;\n/** Returns the dtype number for a single or list of input Tensors. */\nfunction getTFDTypeForInputs(tensors) {\n    if (util_1.isNullOrUndefined(tensors)) {\n        throw new Error('Invalid input tensors value.');\n    }\n    if (util_1.isArray(tensors)) {\n        for (var i = 0; i < tensors.length; i++) {\n            return getTFDType(tensors[i].dtype);\n        }\n        return -1;\n    }\n    else {\n        return getTFDType(tensors.dtype);\n    }\n}\nfunction ensureTensorflowBackend() {\n    tf.util.assert(tf.getBackend() === 'tensorflow', function () { return \"Expect the current backend to be \\\"tensorflow\\\", but got \\\"\" + tf.getBackend() + \"\\\"\"; });\n}\nexports.ensureTensorflowBackend = ensureTensorflowBackend;\n"]},"metadata":{},"sourceType":"script"}