{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n */\n\n/** @doc {heading: 'Environment'} */\n\nexport class Environment {\n  // tslint:disable-next-line: no-any\n  constructor(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      console.warn(\"Platform \".concat(this.platformName, \" has already been set. \") + \"Overwriting the platform with \".concat(platform, \".\"));\n    }\n\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn,\n      setHook\n    }; // Override the flag value from the URL. This has to happen here because the\n    // environment is initialized before flags get registered.\n\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      console.warn(\"Setting feature override from URL \".concat(flagName, \": \").concat(flagValue, \".\"));\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n\n    if (flagValue instanceof Promise) {\n      throw new Error(\"Flag \".concat(flagName, \" cannot be synchronously evaluated. \") + \"Please use getAsync() instead.\");\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n\n  getFlags() {\n    return this.flags;\n  } // For backwards compatibility.\n\n\n  get features() {\n    return this.flags;\n  }\n\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\"Cannot set flag \".concat(flagName, \" as it has not been registered.\"));\n    }\n\n    this.flags[flagName] = value;\n\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\"Cannot evaluate flag '\".concat(flagName, \"': no evaluation function found.\"));\n    }\n\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  populateURLFlags() {\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = getQueryParams(this.global.location.search);\n\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const _keyValue$split = keyValue.split(':'),\n              _keyValue$split2 = _slicedToArray(_keyValue$split, 2),\n              key = _keyValue$split2[0],\n              value = _keyValue$split2[1];\n\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n\n}\nexport function getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (\"\".concat(+value) === value) {\n    return +value;\n  }\n\n  throw new Error(\"Could not parse value flag value \".concat(value, \" for flag \").concat(flagName, \".\"));\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n */\n\n/** @doc {heading: 'Environment'} */\n\n\nexport function env() {\n  return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":null,"metadata":{},"sourceType":"module"}