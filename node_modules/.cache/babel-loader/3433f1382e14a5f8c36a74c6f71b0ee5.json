{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport function useUserMedia(requestedMedia) {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        mediaStream = _useState2[0],\n        setMediaStream = _useState2[1];\n\n  useEffect(() => {\n    async function enableStream() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(requestedMedia);\n        setMediaStream(stream);\n      } catch (err) {// Removed for brevity\n      }\n    }\n\n    if (!mediaStream) {\n      enableStream();\n    } else {\n      return function cleanup() {\n        mediaStream.getTracks().forEach(track => {\n          track.stop();\n        });\n      };\n    }\n  }, [mediaStream, requestedMedia]);\n  return mediaStream;\n}","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/scan/components/useUserMedia.js"],"names":["useState","useEffect","useUserMedia","requestedMedia","mediaStream","setMediaStream","enableStream","stream","navigator","mediaDevices","getUserMedia","err","cleanup","getTracks","forEach","track","stop"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,SAASC,YAAT,CAAsBC,cAAtB,EAAsC;AAAA,oBACLH,QAAQ,CAAC,IAAD,CADH;AAAA;AAAA,QACpCI,WADoC;AAAA,QACvBC,cADuB;;AAG3CJ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeK,YAAf,GAA8B;AAC5B,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCP,cAApC,CAArB;AACAE,QAAAA,cAAc,CAACE,MAAD,CAAd;AACD,OAHD,CAGE,OAAMI,GAAN,EAAW,CACX;AACD;AACF;;AAED,QAAI,CAACP,WAAL,EAAkB;AAChBE,MAAAA,YAAY;AACb,KAFD,MAEO;AACL,aAAO,SAASM,OAAT,GAAmB;AACxBR,QAAAA,WAAW,CAACS,SAAZ,GAAwBC,OAAxB,CAAgCC,KAAK,IAAI;AACvCA,UAAAA,KAAK,CAACC,IAAN;AACD,SAFD;AAGD,OAJD;AAKD;AACF,GAnBQ,EAmBN,CAACZ,WAAD,EAAcD,cAAd,CAnBM,CAAT;AAqBA,SAAOC,WAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useUserMedia(requestedMedia) {\n  const [mediaStream, setMediaStream] = useState(null);\n\n  useEffect(() => {\n    async function enableStream() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(requestedMedia);\n        setMediaStream(stream);\n      } catch(err) {\n        // Removed for brevity\n      }\n    }\n\n    if (!mediaStream) {\n      enableStream();\n    } else {\n      return function cleanup() {\n        mediaStream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n    }\n  }, [mediaStream, requestedMedia]);\n\n  return mediaStream;\n}"]},"metadata":{},"sourceType":"module"}