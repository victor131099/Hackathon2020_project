{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, concat, slice, stack, tensor, tidy, unstack, util, io, Tensor, add, addN, mod, mul, div, divNoNan, floorDiv, sub, minimum, maximum, pow, squaredDifference, abs, acos, acosh, asin, asinh, atan, atan2, atanh, ceil, complex, cos, cosh, elu, erf, exp, expm1, floor, log, log1p, imag, neg, reciprocal, real, relu, round, selu, sigmoid, sin, sign, sinh, softplus, sqrt, square, tanh, tan, clipByValue, rsqrt, prod, leakyRelu, prelu, scalar, conv1d, conv2d, fused, conv2dTranspose, depthwiseConv2d, conv3d, avgPool, maxPool, maxPoolWithArgmax, avgPool3d, maxPool3d, fill, linspace, multinomial, oneHot, ones, onesLike, randomUniform, range, truncatedNormal, zeros, zerosLike, image, whereAsync, setdiff1dAsync, topk, tensor1d, equal, notEqual, greater, greaterEqual, less, lessEqual, logicalAnd, logicalNot, logicalOr, where, matMul, transpose, batchNorm, localResponseNormalization, softmax, logSoftmax, sparseToDense, max, mean, min, sum, all, any, argMax, argMin, gather, reverse, stridedSlice, tile, split, scatterND, gatherND, fft, ifft, rfft, irfft, cast, expandDims, squeeze, reshape, pad, spaceToBatchND, batchToSpaceND, depthToSpace } from \"@tensorflow/tfjs-core\";\n\nvar DataType,\n    SaverDef,\n    __assign = function () {\n  return (__assign = Object.assign || function (e) {\n    for (var t, a = 1, r = arguments.length; a < r; a++) for (var n in t = arguments[a]) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n\n    return e;\n  }).apply(this, arguments);\n};\n\nfunction __awaiter(e, t, a, r) {\n  return new (a || (a = Promise))(function (n, s) {\n    function o(e) {\n      try {\n        u(r.next(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n\n    function p(e) {\n      try {\n        u(r.throw(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n\n    function u(e) {\n      e.done ? n(e.value) : new a(function (t) {\n        t(e.value);\n      }).then(o, p);\n    }\n\n    u((r = r.apply(e, t || [])).next());\n  });\n}\n\nfunction __generator(e, t) {\n  var a,\n      r,\n      n,\n      s,\n      o = {\n    label: 0,\n    sent: function () {\n      if (1 & n[0]) throw n[1];\n      return n[1];\n    },\n    trys: [],\n    ops: []\n  };\n  return s = {\n    next: p(0),\n    throw: p(1),\n    return: p(2)\n  }, \"function\" == typeof Symbol && (s[Symbol.iterator] = function () {\n    return this;\n  }), s;\n\n  function p(s) {\n    return function (p) {\n      return function (s) {\n        if (a) throw new TypeError(\"Generator is already executing.\");\n\n        for (; o;) try {\n          if (a = 1, r && (n = 2 & s[0] ? r.return : s[0] ? r.throw || ((n = r.return) && n.call(r), 0) : r.next) && !(n = n.call(r, s[1])).done) return n;\n\n          switch (r = 0, n && (s = [2 & s[0], n.value]), s[0]) {\n            case 0:\n            case 1:\n              n = s;\n              break;\n\n            case 4:\n              return o.label++, {\n                value: s[1],\n                done: !1\n              };\n\n            case 5:\n              o.label++, r = s[1], s = [0];\n              continue;\n\n            case 7:\n              s = o.ops.pop(), o.trys.pop();\n              continue;\n\n            default:\n              if (!(n = (n = o.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {\n                o = 0;\n                continue;\n              }\n\n              if (3 === s[0] && (!n || s[1] > n[0] && s[1] < n[3])) {\n                o.label = s[1];\n                break;\n              }\n\n              if (6 === s[0] && o.label < n[1]) {\n                o.label = n[1], n = s;\n                break;\n              }\n\n              if (n && o.label < n[2]) {\n                o.label = n[2], o.ops.push(s);\n                break;\n              }\n\n              n[2] && o.ops.pop(), o.trys.pop();\n              continue;\n          }\n\n          s = t.call(e, o);\n        } catch (e) {\n          s = [6, e], r = 0;\n        } finally {\n          a = n = 0;\n        }\n\n        if (5 & s[0]) throw s[1];\n        return {\n          value: s[0] ? s[1] : void 0,\n          done: !0\n        };\n      }([s, p]);\n    };\n  }\n}\n\n!function (e) {\n  e[e.DT_INVALID = 0] = \"DT_INVALID\", e[e.DT_FLOAT = 1] = \"DT_FLOAT\", e[e.DT_DOUBLE = 2] = \"DT_DOUBLE\", e[e.DT_INT32 = 3] = \"DT_INT32\", e[e.DT_UINT8 = 4] = \"DT_UINT8\", e[e.DT_INT16 = 5] = \"DT_INT16\", e[e.DT_INT8 = 6] = \"DT_INT8\", e[e.DT_STRING = 7] = \"DT_STRING\", e[e.DT_COMPLEX64 = 8] = \"DT_COMPLEX64\", e[e.DT_INT64 = 9] = \"DT_INT64\", e[e.DT_BOOL = 10] = \"DT_BOOL\", e[e.DT_QINT8 = 11] = \"DT_QINT8\", e[e.DT_QUINT8 = 12] = \"DT_QUINT8\", e[e.DT_QINT32 = 13] = \"DT_QINT32\", e[e.DT_BFLOAT16 = 14] = \"DT_BFLOAT16\", e[e.DT_FLOAT_REF = 101] = \"DT_FLOAT_REF\", e[e.DT_DOUBLE_REF = 102] = \"DT_DOUBLE_REF\", e[e.DT_INT32_REF = 103] = \"DT_INT32_REF\", e[e.DT_UINT8_REF = 104] = \"DT_UINT8_REF\", e[e.DT_INT16_REF = 105] = \"DT_INT16_REF\", e[e.DT_INT8_REF = 106] = \"DT_INT8_REF\", e[e.DT_STRING_REF = 107] = \"DT_STRING_REF\", e[e.DT_COMPLEX64_REF = 108] = \"DT_COMPLEX64_REF\", e[e.DT_INT64_REF = 109] = \"DT_INT64_REF\", e[e.DT_BOOL_REF = 110] = \"DT_BOOL_REF\", e[e.DT_QINT8_REF = 111] = \"DT_QINT8_REF\", e[e.DT_QUINT8_REF = 112] = \"DT_QUINT8_REF\", e[e.DT_QINT32_REF = 113] = \"DT_QINT32_REF\", e[e.DT_BFLOAT16_REF = 114] = \"DT_BFLOAT16_REF\";\n}(DataType || (DataType = {})), function (e) {\n  !function (e) {\n    e[e.LEGACY = 0] = \"LEGACY\", e[e.V1 = 1] = \"V1\", e[e.V2 = 2] = \"V2\";\n  }(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));\n}(SaverDef || (SaverDef = {}));\nvar CUSTOM_OPS = {};\n\nfunction registerOp(e, t) {\n  var a = {\n    tfOpName: e,\n    category: \"custom\",\n    inputs: [],\n    attrs: [],\n    customExecutor: t\n  };\n  CUSTOM_OPS[e] = a;\n}\n\nfunction getRegisteredOp(e) {\n  return CUSTOM_OPS[e];\n}\n\nfunction deregisterOp(e) {\n  delete CUSTOM_OPS[e];\n}\n\nfunction getParamValue(e, t, a, r) {\n  var n = t.inputParams[e];\n\n  if (n && void 0 !== n.inputIndexStart) {\n    var s = n.inputIndexStart,\n        o = 0 === n.inputIndexEnd ? void 0 : void 0 === n.inputIndexEnd ? s + 1 : n.inputIndexEnd;\n    if (\"tensor\" === n.type) return getTensor(t.inputNames[n.inputIndexStart], a, r);\n    if (\"tensors\" === n.type) return t.inputNames.slice(s, o).map(function (e) {\n      return getTensor(e, a, r);\n    });\n    var p = Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0], a, r).dataSync());\n    return \"number\" === n.type ? p[0] : p;\n  }\n\n  var u = t.attrParams[e];\n  return u && u.value;\n}\n\nfunction getTensor(e, t, a) {\n  var r = parseNodeName(e),\n      n = r[0],\n      s = r[1],\n      o = a.currentContextIds.find(function (e) {\n    return !!t[getNodeNameWithContextId(n, e)];\n  });\n  return void 0 !== o ? t[getNodeNameWithContextId(n, o)][s] : void 0;\n}\n\nfunction getTensorsForCurrentContenxt(e, t, a) {\n  return t[getNodeNameWithContextId(e, a.currentContextId)];\n}\n\nfunction getNodeNameAndIndex(e, t) {\n  var a = parseNodeName(e),\n      r = a[0],\n      n = a[1];\n  return [getNodeNameWithContextId(r, t && t.currentContextId), n];\n}\n\nfunction getNodeNameWithContextId(e, t) {\n  return t ? e + \"-\" + t : e;\n}\n\nfunction parseNodeName(e) {\n  var t = e.lastIndexOf(\":\");\n  return -1 === t ? [e, 0] : [e.substring(0, t), Number(e.substring(t + 1))];\n}\n\nfunction split$1(e, t) {\n  for (var a = [], r = 0; r < e.length; r += t) a.push(e.slice(r, r + t));\n\n  return a;\n}\n\nvar json = [{\n  tfOpName: \"Add\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"AddV2\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"AddN\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    end: 0,\n    name: \"tensors\",\n    type: \"tensors\"\n  }]\n}, {\n  tfOpName: \"BiasAdd\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sub\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"RealDiv\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Div\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"DivNoNan\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"FloorDiv\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Mul\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Maximum\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Minimum\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Pow\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"SquaredDifference\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Mod\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"FloorMod\",\n  category: \"arithmetic\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}],\n    arithmetic = Object.freeze({\n  json: json\n}),\n    json$1 = [{\n  tfOpName: \"Abs\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Acos\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Asin\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Atan\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Atan2\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"y\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Ceil\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"ClipByValue\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"clip_value_min\",\n    name: \"clipValueMin\",\n    type: \"number\"\n  }, {\n    tfName: \"clip_value_max\",\n    name: \"clipValueMax\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"Complex\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"real\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"imag\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"ComplexAbs\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Cos\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Cosh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Elu\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Exp\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Floor\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Log\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Imag\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"Tout\",\n    name: \"outputType\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Neg\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Real\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"Tout\",\n    name: \"outputType\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Prelu\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"alpha\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Relu\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Relu6\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"clipValueMin\",\n    name: \"clipValueMin\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"clipValueMax\",\n    name: \"clipValueMax\",\n    type: \"number\",\n    defaultValue: 6\n  }]\n}, {\n  tfOpName: \"Selu\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sigmoid\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sin\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sinh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sqrt\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Rsqrt\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Square\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Tan\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Tanh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Sign\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Round\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Expm1\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Log1p\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Reciprocal\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Softplus\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Asinh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Acosh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Atanh\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Erf\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Prod\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axes\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\",\n    notSupported: !0\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LeakyRelu\",\n  category: \"basic_math\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"alpha\",\n    name: \"alpha\",\n    type: \"number\",\n    defaultValue: .2\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}],\n    basicMath = Object.freeze({\n  json: json$1\n}),\n    json$2 = [{\n  tfOpName: \"LoopCond\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"pred\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Switch\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"data\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"pred\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Merge\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    end: 0,\n    name: \"tensors\",\n    type: \"tensors\"\n  }]\n}, {\n  tfOpName: \"Enter\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensor\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"frame_name\",\n    name: \"frameName\",\n    type: \"string\"\n  }, {\n    tfName: \"is_constant\",\n    name: \"isConstant\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"Exit\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensor\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"NextIteration\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensor\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"TensorArrayV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"size\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"element_shape\",\n    name: \"elementShape\",\n    type: \"shape\"\n  }, {\n    tfName: \"dynamic_size\",\n    name: \"dynamicSize\",\n    type: \"bool\"\n  }, {\n    tfName: \"clear_after_read\",\n    name: \"clearAfterRead\",\n    type: \"bool\"\n  }, {\n    tfName: \"identical_element_shapes\",\n    name: \"identicalElementShapes\",\n    type: \"bool\"\n  }, {\n    tfName: \"tensor_array_name\",\n    name: \"name\",\n    type: \"string\"\n  }]\n}, {\n  tfOpName: \"TensorArrayWriteV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"index\",\n    type: \"number\"\n  }, {\n    start: 2,\n    name: \"tensor\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"TensorArrayReadV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"index\",\n    type: \"number\"\n  }, {\n    start: 2,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"TensorArrayGatherV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"indices\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"element_shape\",\n    name: \"elementShape\",\n    type: \"shape\"\n  }]\n}, {\n  tfOpName: \"TensorArrayScatterV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"indices\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"tensor\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"TensorArrayConcatV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"element_shape_except0\",\n    name: \"elementShapeExcept0\",\n    type: \"shape\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"TensorArraySplitV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"tensor\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"lengths\",\n    type: \"number[]\"\n  }, {\n    start: 3,\n    name: \"flowIn\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"TensorArraySizeV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"flowIn\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"TensorArrayCloseV3\",\n  category: \"control\",\n  inputs: [{\n    start: 0,\n    name: \"tensorArrayId\",\n    type: \"number\"\n  }]\n}],\n    control = Object.freeze({\n  json: json$2\n}),\n    json$3 = [{\n  tfOpName: \"AvgPool\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }, {\n    tfName: \"ksize\",\n    name: \"kernelSize\",\n    type: \"number[]\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"MaxPool\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }, {\n    tfName: \"ksize\",\n    name: \"kernelSize\",\n    type: \"number[]\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"MaxPoolWithArgmax\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"ksize\",\n    name: \"kernelSize\",\n    type: \"number[]\"\n  }, {\n    tfName: \"include_batch_in_index\",\n    name: \"includeBatchInIndex\",\n    type: \"bool\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"AvgPool3D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }, {\n    tfName: \"ksize\",\n    name: \"kernelSize\",\n    type: \"number[]\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"MaxPool3D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }, {\n    tfName: \"ksize\",\n    name: \"kernelSize\",\n    type: \"number[]\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Conv1D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"stride\",\n    name: \"stride\",\n    type: \"number\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NWC\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"dilation\",\n    name: \"dilation\",\n    type: \"number\",\n    defaultValue: 1\n  }]\n}, {\n  tfOpName: \"Conv2D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"useCudnnOnGpu\",\n    name: \"useCudnnOnGpu\",\n    type: \"bool\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"_FusedConv2D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    end: 0,\n    name: \"args\",\n    type: \"tensors\"\n  }],\n  attrs: [{\n    tfName: \"num_args\",\n    name: \"numArgs\",\n    type: \"number\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"explicit_paddings\",\n    name: \"explicitPaddings\",\n    type: \"number[]\",\n    defaultValue: []\n  }, {\n    tfName: \"use_cudnn_on_gpu\",\n    name: \"useCudnnOnGpu\",\n    type: \"bool\",\n    defaultValue: !0\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\",\n    defaultValue: [1, 1, 1, 1]\n  }, {\n    tfName: \"fused_ops\",\n    name: \"fusedOps\",\n    type: \"string[]\",\n    defaultValue: []\n  }, {\n    tfName: \"epsilon\",\n    name: \"epsilon\",\n    type: \"number\",\n    defaultValue: 1e-4\n  }]\n}, {\n  tfOpName: \"Conv2DBackpropInput\",\n  category: \"convolution\",\n  inputs: [{\n    start: 2,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }, {\n    start: 0,\n    name: \"outputShape\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"DepthwiseConv2d\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"input\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"DepthwiseConv2dNative\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"input\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"FusedDepthwiseConv2dNative\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    end: 0,\n    name: \"args\",\n    type: \"tensors\"\n  }],\n  attrs: [{\n    tfName: \"num_args\",\n    name: \"numArgs\",\n    type: \"number\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\",\n    defaultValue: [1, 1, 1, 1]\n  }, {\n    tfName: \"fused_ops\",\n    name: \"fusedOps\",\n    type: \"string[]\",\n    defaultValue: []\n  }]\n}, {\n  tfOpName: \"Conv3D\",\n  category: \"convolution\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"filter\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"strides\",\n    name: \"strides\",\n    type: \"number[]\"\n  }, {\n    tfName: \"padding\",\n    name: \"pad\",\n    type: \"string\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    defaultValue: \"NHWC\"\n  }, {\n    tfName: \"dilations\",\n    name: \"dilations\",\n    type: \"number[]\"\n  }]\n}],\n    convolution = Object.freeze({\n  json: json$3\n}),\n    json$4 = [{\n  tfOpName: \"Fill\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"shape\",\n    type: \"number[]\"\n  }, {\n    start: 1,\n    name: \"value\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"LinSpace\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"start\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"stop\",\n    type: \"number\"\n  }, {\n    start: 2,\n    name: \"num\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"OneHot\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"indices\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"depth\",\n    type: \"number\"\n  }, {\n    start: 2,\n    name: \"onValue\",\n    type: \"number\",\n    defaultValue: 1\n  }, {\n    start: 3,\n    name: \"offValue\",\n    type: \"number\",\n    defaultValue: 0\n  }],\n  attrs: [{\n    tfName: \"axis\",\n    name: \"axis\",\n    type: \"number\",\n    notSupported: !0\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Ones\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"shape\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"OnesLike\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"RandomUniform\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"shape\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"minval\",\n    name: \"minval\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"maxval\",\n    name: \"maxval\",\n    type: \"number\",\n    defaultValue: 1\n  }, {\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"seed\",\n    name: \"seed\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"seed2\",\n    name: \"seed2\",\n    type: \"number\",\n    defaultValue: 0,\n    notSupported: !0\n  }, {\n    tfName: \"T\",\n    name: \"T\",\n    type: \"number\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Range\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"start\",\n    type: \"number\"\n  }, {\n    start: 1,\n    name: \"stop\",\n    type: \"number\"\n  }, {\n    start: 2,\n    name: \"step\",\n    type: \"number\",\n    defaultValue: 0\n  }],\n  attrs: [{\n    tfName: \"Tidx\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"TruncatedNormal\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"shape\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"means\",\n    name: \"mean\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"stddev\",\n    name: \"stdDev\",\n    type: \"number\",\n    defaultValue: 1\n  }, {\n    tfName: \"seed\",\n    name: \"seed\",\n    type: \"number\"\n  }, {\n    tfName: \"seed2\",\n    name: \"seed2\",\n    type: \"number\",\n    defaultValue: 0,\n    notSupported: !0\n  }, {\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"T\",\n    name: \"T\",\n    type: \"number\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Zeros\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"shape\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"ZerosLike\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"Multinomial\",\n  category: \"creation\",\n  inputs: [{\n    start: 0,\n    name: \"logits\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"numSamples\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"seed\",\n    name: \"seed\",\n    type: \"number\"\n  }, {\n    tfName: \"seed2\",\n    name: \"seed2\",\n    type: \"number\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }, {\n    tfName: \"output_dtype\",\n    name: \"output_dtype\",\n    type: \"dtype\"\n  }]\n}],\n    creation = Object.freeze({\n  json: json$4\n}),\n    json$5 = [{\n  tfOpName: \"NonMaxSuppressionV2\",\n  category: \"dynamic\",\n  inputs: [{\n    start: 0,\n    name: \"boxes\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scores\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"maxOutputSize\",\n    type: \"number\"\n  }, {\n    start: 3,\n    name: \"iouThreshold\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"NonMaxSuppressionV3\",\n  category: \"dynamic\",\n  inputs: [{\n    start: 0,\n    name: \"boxes\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scores\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"maxOutputSize\",\n    type: \"number\"\n  }, {\n    start: 3,\n    name: \"iouThreshold\",\n    type: \"number\"\n  }, {\n    start: 4,\n    name: \"scoreThreshold\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"NonMaxSuppressionV5\",\n  category: \"dynamic\",\n  inputs: [{\n    start: 0,\n    name: \"boxes\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scores\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"maxOutputSize\",\n    type: \"number\"\n  }, {\n    start: 3,\n    name: \"iouThreshold\",\n    type: \"number\"\n  }, {\n    start: 4,\n    name: \"scoreThreshold\",\n    type: \"number\"\n  }, {\n    start: 5,\n    name: \"softNmsSigma\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"Where\",\n  category: \"dynamic\",\n  inputs: [{\n    start: 0,\n    name: \"condition\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"ListDiff\",\n  category: \"dynamic\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"y\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}],\n    dynamic = Object.freeze({\n  json: json$5\n}),\n    json$6 = [{\n  tfOpName: \"TopKV2\",\n  category: \"evaluation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"k\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"sorted\",\n    name: \"sorted\",\n    type: \"bool\"\n  }]\n}],\n    evaluation = Object.freeze({\n  json: json$6\n}),\n    json$7 = [{\n  tfOpName: \"PlaceholderWithDefault\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"default\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"shape\",\n    name: \"shape\",\n    type: \"shape\"\n  }, {\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"Placeholder\",\n  category: \"graph\",\n  attrs: [{\n    tfName: \"shape\",\n    name: \"shape\",\n    type: \"shape\"\n  }, {\n    tfName: \"dtype\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"Const\",\n  category: \"graph\"\n}, {\n  tfOpName: \"Identity\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"IdentityN\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    end: 0,\n    name: \"x\",\n    type: \"tensors\"\n  }]\n}, {\n  tfOpName: \"Snapshot\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Rank\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Size\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"Shape\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"ShapeN\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    end: 0,\n    name: \"x\",\n    type: \"tensors\"\n  }]\n}, {\n  tfOpName: \"Print\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"data\",\n    type: \"tensors\"\n  }],\n  attrs: [{\n    tfName: \"message\",\n    name: \"message\",\n    type: \"string\"\n  }, {\n    tfName: \"first_n\",\n    name: \"firstN\",\n    type: \"number\",\n    notSupported: !0\n  }, {\n    tfName: \"summarize\",\n    name: \"summarize\",\n    type: \"number\",\n    defaultValue: 3\n  }]\n}, {\n  tfOpName: \"NoOp\",\n  category: \"graph\",\n  inputs: []\n}, {\n  tfOpName: \"StopGradient\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"FakeQuantWithMinMaxVars\",\n  category: \"graph\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"min\",\n    name: \"min\",\n    type: \"number\"\n  }, {\n    tfName: \"max\",\n    name: \"max\",\n    type: \"number\"\n  }]\n}],\n    graph = Object.freeze({\n  json: json$7\n}),\n    json$8 = [{\n  tfOpName: \"ResizeBilinear\",\n  category: \"image\",\n  inputs: [{\n    start: 0,\n    name: \"images\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"size\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"align_corners\",\n    name: \"alignCorners\",\n    type: \"bool\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"ResizeNearestNeighbor\",\n  category: \"image\",\n  inputs: [{\n    start: 0,\n    name: \"images\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"size\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"align_corners\",\n    name: \"alignCorners\",\n    type: \"bool\"\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"CropAndResize\",\n  category: \"image\",\n  inputs: [{\n    start: 0,\n    name: \"image\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"boxes\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"boxInd\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"cropSize\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"method\",\n    name: \"method\",\n    type: \"string\"\n  }, {\n    tfName: \"extrapolation_value\",\n    name: \"extrapolationValue\",\n    type: \"number\"\n  }]\n}],\n    image$1 = Object.freeze({\n  json: json$8\n}),\n    json$9 = [{\n  tfOpName: \"Equal\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"NotEqual\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Greater\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"GreaterEqual\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Less\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LessEqual\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LogicalAnd\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LogicalNot\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LogicalOr\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Select\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"condition\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"SelectV2\",\n  category: \"logical\",\n  inputs: [{\n    start: 0,\n    name: \"condition\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}],\n    logical = Object.freeze({\n  json: json$9\n}),\n    json$10 = [{\n  tfOpName: \"_FusedMatMul\",\n  category: \"matrices\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    end: 0,\n    name: \"args\",\n    type: \"tensors\"\n  }],\n  attrs: [{\n    tfName: \"num_args\",\n    name: \"numArgs\",\n    type: \"number\"\n  }, {\n    tfName: \"fused_ops\",\n    name: \"fusedOps\",\n    type: \"string[]\",\n    defaultValue: []\n  }, {\n    tfName: \"epsilon\",\n    name: \"epsilon\",\n    type: \"number\",\n    defaultValue: 1e-4\n  }, {\n    tfName: \"transpose_a\",\n    name: \"transposeA\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"transpose_b\",\n    name: \"transposeB\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"MatMul\",\n  category: \"matrices\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"transpose_a\",\n    name: \"transposeA\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"transpose_b\",\n    name: \"transposeB\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"BatchMatMul\",\n  category: \"matrices\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"adj_x\",\n    name: \"transposeA\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"adj_y\",\n    name: \"transposeB\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"BatchMatMulV2\",\n  category: \"matrices\",\n  inputs: [{\n    start: 0,\n    name: \"a\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"b\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"adj_x\",\n    name: \"transposeA\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"adj_y\",\n    name: \"transposeB\",\n    type: \"bool\",\n    defaultValue: !1\n  }, {\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Transpose\",\n  category: \"matrices\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"perm\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"T\",\n    name: \"dtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }]\n}],\n    matrices = Object.freeze({\n  json: json$10\n}),\n    json$11 = [{\n  tfOpName: \"FusedBatchNorm\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scale\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"offset\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"mean\",\n    type: \"tensor\"\n  }, {\n    start: 4,\n    name: \"variance\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"epsilon\",\n    name: \"epsilon\",\n    type: \"number\",\n    defaultValue: .001\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"FusedBatchNormV2\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scale\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"offset\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"mean\",\n    type: \"tensor\"\n  }, {\n    start: 4,\n    name: \"variance\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"epsilon\",\n    name: \"epsilon\",\n    type: \"number\",\n    defaultValue: .001\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"FusedBatchNormV3\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"scale\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"offset\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"mean\",\n    type: \"tensor\"\n  }, {\n    start: 4,\n    name: \"variance\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"epsilon\",\n    name: \"epsilon\",\n    type: \"number\",\n    defaultValue: .001\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"LRN\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"depth_radius\",\n    name: \"radius\",\n    type: \"number\",\n    defaultValue: 5\n  }, {\n    tfName: \"bias\",\n    name: \"bias\",\n    type: \"number\",\n    defaultValue: 1\n  }, {\n    tfName: \"alpha\",\n    name: \"alpha\",\n    type: \"number\",\n    defaultValue: 1\n  }, {\n    tfName: \"beta\",\n    name: \"beta\",\n    type: \"number\",\n    defaultValue: .5\n  }]\n}, {\n  tfOpName: \"Softmax\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"LogSoftmax\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"SparseToDense\",\n  category: \"normalization\",\n  inputs: [{\n    start: 0,\n    name: \"sparseIndices\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"outputShape\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"sparseValues\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"defaultValue\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"validate_indices\",\n    name: \"validateIndices\",\n    type: \"bool\",\n    defaultValue: !0,\n    notSupported: !0\n  }]\n}],\n    normalization = Object.freeze({\n  json: json$11\n}),\n    json$12 = [{\n  tfOpName: \"Max\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"Mean\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"Min\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"Sum\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"All\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"Any\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}, {\n  tfOpName: \"ArgMax\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"ArgMin\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"Prod\",\n  category: \"reduction\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"keep_dims\",\n    name: \"keepDims\",\n    type: \"bool\"\n  }]\n}],\n    reduction = Object.freeze({\n  json: json$12\n}),\n    json$13 = [{\n  tfOpName: \"ConcatV2\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    end: -1,\n    name: \"tensors\",\n    type: \"tensors\"\n  }, {\n    start: -1,\n    name: \"axis\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"N\",\n    name: \"n\",\n    type: \"number\",\n    defaultValue: 2\n  }]\n}, {\n  tfOpName: \"Concat\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 1,\n    end: 0,\n    name: \"tensors\",\n    type: \"tensors\"\n  }, {\n    start: 0,\n    name: \"axis\",\n    type: \"number\"\n  }],\n  attrs: [{\n    tfName: \"N\",\n    name: \"n\",\n    type: \"number\",\n    defaultValue: 2\n  }]\n}, {\n  tfOpName: \"GatherV2\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"indices\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"Gather\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"indices\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"axis\",\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"validate_indices\",\n    name: \"validateIndices\",\n    type: \"bool\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Reverse\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"dims\",\n    type: \"bool\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"ReverseV2\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"Slice\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"begin\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"size\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"StridedSlice\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"begin\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"end\",\n    type: \"number[]\"\n  }, {\n    start: 3,\n    name: \"strides\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"begin_mask\",\n    name: \"beginMask\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"end_mask\",\n    name: \"endMask\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"new_axis_mask\",\n    name: \"newAxisMask\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"ellipsis_mask\",\n    name: \"ellipsisMask\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"shrink_axis_mask\",\n    name: \"shrinkAxisMask\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"Pack\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    end: 0,\n    name: \"tensors\",\n    type: \"tensors\"\n  }],\n  attrs: [{\n    tfName: \"axis\",\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"Unpack\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"tensor\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"axis\",\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    tfName: \"num\",\n    name: \"num\",\n    type: \"number\",\n    defaultValue: 0,\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"Tile\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"reps\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"Split\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }, {\n    start: 1,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"num_split\",\n    name: \"numOrSizeSplits\",\n    type: \"number\",\n    defaultValue: 1\n  }]\n}, {\n  tfOpName: \"SplitV\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"numOrSizeSplits\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"axis\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"ScatterNd\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"indices\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"values\",\n    type: \"tensor\"\n  }, {\n    start: 2,\n    name: \"shape\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"GatherNd\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"indices\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"SparseToDense\",\n  category: \"slice_join\",\n  inputs: [{\n    start: 0,\n    name: \"sparseIndices\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"outputShape\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"sparseValues\",\n    type: \"tensor\"\n  }, {\n    start: 3,\n    name: \"defaultValue\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"validate_indices\",\n    name: \"validateIndices\",\n    type: \"bool\",\n    defaultValue: !1,\n    notSupported: !0\n  }]\n}],\n    sliceJoin = Object.freeze({\n  json: json$13\n}),\n    json$14 = [{\n  tfOpName: \"FFT\",\n  category: \"spectral\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"IFFT\",\n  category: \"spectral\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }]\n}, {\n  tfOpName: \"RFFT\",\n  category: \"spectral\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"fft_length\",\n    type: \"number\",\n    notSupported: !0\n  }]\n}, {\n  tfOpName: \"IRFFT\",\n  category: \"spectral\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"fft_length\",\n    type: \"number\",\n    notSupported: !0\n  }]\n}],\n    spectral = Object.freeze({\n  json: json$14\n}),\n    json$15 = [{\n  tfOpName: \"Cast\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"SrcT\",\n    name: \"sdtype\",\n    type: \"dtype\",\n    notSupported: !0\n  }, {\n    tfName: \"DstT\",\n    name: \"dtype\",\n    type: \"dtype\"\n  }]\n}, {\n  tfOpName: \"ExpandDims\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"axis\",\n    type: \"number\"\n  }]\n}, {\n  tfOpName: \"Pad\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"padding\",\n    type: \"number[]\"\n  }],\n  attrs: [{\n    tfName: \"constant_value\",\n    name: \"constantValue\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"PadV2\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"padding\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"constantValue\",\n    type: \"number\",\n    defaultValue: 0\n  }]\n}, {\n  tfOpName: \"Reshape\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"shape\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"Squeeze\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"axis\",\n    tfDeprecatedName: \"squeeze_dims\",\n    name: \"axis\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"SpaceToBatchND\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"blockShape\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"paddings\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"BatchToSpaceND\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }, {\n    start: 1,\n    name: \"blockShape\",\n    type: \"number[]\"\n  }, {\n    start: 2,\n    name: \"crops\",\n    type: \"number[]\"\n  }]\n}, {\n  tfOpName: \"DepthToSpace\",\n  category: \"transformation\",\n  inputs: [{\n    start: 0,\n    name: \"x\",\n    type: \"tensor\"\n  }],\n  attrs: [{\n    tfName: \"block_size\",\n    name: \"blockSize\",\n    type: \"number\"\n  }, {\n    tfName: \"data_format\",\n    name: \"dataFormat\",\n    type: \"string\"\n  }]\n}],\n    transformation = Object.freeze({\n  json: json$15\n}),\n    OperationMapper = function () {\n  function e() {\n    var e = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation],\n        t = [].concat.apply([], e.map(function (e) {\n      return e.json;\n    }));\n    this.opMappers = t.reduce(function (e, t) {\n      return e[t.tfOpName] = t, e;\n    }, {});\n  }\n\n  return Object.defineProperty(e, \"Instance\", {\n    get: function () {\n      return this._instance || (this._instance = new this());\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.transformGraph = function (e, t) {\n    var a = this;\n    void 0 === t && (t = {});\n    var r = [],\n        n = [],\n        s = e.node.reduce(function (e, t) {\n      return e[t.name] = a.mapNode(t), t.op.startsWith(\"Placeholder\") && r.push(e[t.name]), \"Const\" === t.op && n.push(e[t.name]), e;\n    }, {}),\n        o = [],\n        p = [],\n        u = {},\n        i = {};\n    null != t && (u = this.mapSignatureEntries(t.inputs), i = this.mapSignatureEntries(t.outputs));\n    var m = Object.keys(s);\n    return m.forEach(function (e) {\n      var t = s[e];\n      t.inputNames.forEach(function (e) {\n        var a = getNodeNameAndIndex(e)[0];\n        t.inputs.push(s[a]), s[a].children.push(t);\n      });\n    }), 0 === Object.keys(i).length ? m.forEach(function (e) {\n      var t = s[e];\n      0 === t.children.length && p.push(t);\n    }) : Object.keys(i).forEach(function (e) {\n      var t = getNodeNameAndIndex(e)[0],\n          a = s[t];\n      null != a && (a.signatureKey = i[e], p.push(a));\n    }), Object.keys(u).length > 0 ? Object.keys(u).forEach(function (e) {\n      var t = getNodeNameAndIndex(e)[0],\n          a = s[t];\n      a && (a.signatureKey = u[e], o.push(a));\n    }) : o = r, {\n      nodes: s,\n      inputs: o,\n      outputs: p,\n      weights: n,\n      placeholders: r,\n      signature: t\n    };\n  }, e.prototype.mapSignatureEntries = function (e) {\n    return Object.keys(e || {}).reduce(function (t, a) {\n      return t[e[a].name] = a, t;\n    }, {});\n  }, e.prototype.mapNode = function (e) {\n    var t = getRegisteredOp(e.op) || this.opMappers[e.op] || {};\n    null == e.attr && (e.attr = {});\n    var a = {\n      name: e.name,\n      op: e.op,\n      category: t.category,\n      inputNames: (e.input || []).map(function (e) {\n        return e.startsWith(\"^\") ? e.substr(1) : e;\n      }),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: e.attr\n    };\n    return null != t.inputs && (a.inputParams = t.inputs.reduce(function (e, t) {\n      return e[t.name] = {\n        type: t.type,\n        inputIndexStart: t.start,\n        inputIndexEnd: t.end\n      }, e;\n    }, {})), null != t.attrs && (a.attrParams = t.attrs.reduce(function (t, a) {\n      var r = a.type,\n          n = void 0;\n\n      switch (a.type) {\n        case \"string\":\n          void 0 === (n = getStringParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"string[]\":\n          void 0 === (n = getStringArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"number\":\n          void 0 === (n = getNumberParam(e.attr, a.tfName, a.defaultValue || 0)) && a.tfDeprecatedName && (n = getNumberParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"number[]\":\n          void 0 === (n = getNumericArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getNumericArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"bool\":\n          void 0 === (n = getBoolParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"bool[]\":\n          void 0 === (n = getBoolArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"shape\":\n          void 0 === (n = getTensorShapeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"shape[]\":\n          void 0 === (n = getTensorShapeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"dtype\":\n          void 0 === (n = getDtypeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"dtype[]\":\n          void 0 === (n = getDtypeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n          break;\n\n        case \"tensor\":\n        case \"tensors\":\n          break;\n\n        default:\n          throw new Error(\"Unsupported param type: \" + a.type + \" for op: \" + e.op);\n      }\n\n      return t[a.name] = {\n        value: n,\n        type: r\n      }, t;\n    }, {})), a;\n  }, e;\n}();\n\nfunction decodeBase64(e) {\n  var t = env().global;\n  if (void 0 !== t.atob) return t.atob(e);\n  if (\"undefined\" != typeof Buffer) return new Buffer(e, \"base64\").toString();\n  throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\");\n}\n\nfunction parseStringParam(e, t) {\n  var a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : decodeBase64(e);\n  return t ? a : a.toLowerCase();\n}\n\nfunction getStringParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return null != n ? parseStringParam(n.s, r) : a;\n}\n\nfunction getBoolParam(e, t, a) {\n  var r = e[t];\n  return r ? r.b : a;\n}\n\nfunction getNumberParam(e, t, a) {\n  var r = e[t] || {},\n      n = null != r.i ? r.i : null != r.f ? r.f : a;\n  return \"number\" == typeof n ? n : parseInt(n, 10);\n}\n\nfunction parseDtypeParam(e) {\n  switch (\"string\" == typeof e && (e = DataType[e]), e) {\n    case DataType.DT_FLOAT:\n      return \"float32\";\n\n    case DataType.DT_INT32:\n    case DataType.DT_INT64:\n    case DataType.DT_INT8:\n    case DataType.DT_UINT8:\n      return \"int32\";\n\n    case DataType.DT_BOOL:\n      return \"bool\";\n\n    case DataType.DT_DOUBLE:\n      return \"float32\";\n\n    case DataType.DT_STRING:\n      return \"string\";\n\n    default:\n      return null;\n  }\n}\n\nfunction getDtypeParam(e, t, a) {\n  var r = e[t];\n  return r && r.type ? parseDtypeParam(r.type) : a;\n}\n\nfunction getDtypeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.type ? r.list.type.map(function (e) {\n    return parseDtypeParam(e);\n  }) : a;\n}\n\nfunction parseTensorShapeParam(e) {\n  if (!e.unknownRank) return null != e.dim ? e.dim.map(function (e) {\n    return \"number\" == typeof e.size ? e.size : parseInt(e.size, 10);\n  }) : [];\n}\n\nfunction getTensorShapeParam(e, t, a) {\n  var r = e[t];\n  return r && r.shape ? parseTensorShapeParam(r.shape) : a;\n}\n\nfunction getNumericArrayParam(e, t, a) {\n  var r = e[t];\n  return r ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(function (e) {\n    return \"number\" == typeof e ? e : parseInt(e, 10);\n  }) : a;\n}\n\nfunction getStringArrayParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return n && n.list && n.list.s ? n.list.s.map(function (e) {\n    return parseStringParam(e, r);\n  }) : a;\n}\n\nfunction getTensorShapeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.shape ? r.list.shape.map(function (e) {\n    return parseTensorShapeParam(e);\n  }) : a;\n}\n\nfunction getBoolArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.b ? r.list.b : a;\n}\n\nvar NodeValueImpl = function () {\n  function e(e, t, a) {\n    var r = this;\n    this.node = e, this.tensorMap = t, this.context = a, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map(function (e) {\n      return r.getInput(e);\n    }), null != e.rawAttrs && (this.attrs = Object.keys(e.rawAttrs).reduce(function (e, t) {\n      return e[t] = r.getAttr(t), e;\n    }, {}));\n  }\n\n  return e.prototype.getInput = function (e) {\n    return getTensor(e, this.tensorMap, this.context);\n  }, e.prototype.getAttr = function (e, t) {\n    var a = this.node.rawAttrs[e];\n    if (null != a.tensor) return getTensor(e, this.tensorMap, this.context);\n    if (null != a.i || null != a.f) return getNumberParam(this.node.rawAttrs, e, t);\n    if (null != a.s) return getStringParam(this.node.rawAttrs, e, t);\n    if (null != a.b) return getBoolParam(this.node.rawAttrs, e, t);\n    if (null != a.shape) return getTensorShapeParam(this.node.rawAttrs, e, t);\n    if (null != a.type) return getDtypeParam(this.node.rawAttrs, e, t);\n\n    if (null != a.list) {\n      if (null != a.list.i || null != a.list.f) return getNumericArrayParam(this.node.rawAttrs, e, t);\n      if (null != a.list.s) return getStringArrayParam(this.node.rawAttrs, e, t);\n      if (null != a.list.shape) return getTensorShapeArrayParam(this.node.rawAttrs, e, t);\n      if (null != a.list.b) return getBoolArrayParam(this.node.rawAttrs, e, t);\n      if (null != a.list.type) return getDtypeArrayParam(this.node.rawAttrs, e, t);\n    }\n\n    return t;\n  }, e;\n}(),\n    executeOp = function (e, t, a) {\n  switch (e.op) {\n    case \"BiasAdd\":\n    case \"AddV2\":\n    case \"Add\":\n      return [add(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"AddN\":\n      return [addN(getParamValue(\"tensors\", e, t, a))];\n\n    case \"FloorMod\":\n    case \"Mod\":\n      return [mod(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Mul\":\n      return [mul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"RealDiv\":\n    case \"Div\":\n      return [div(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"DivNoNan\":\n      return [divNoNan(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"FloorDiv\":\n      return [floorDiv(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Sub\":\n      return [sub(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Minimum\":\n      return [minimum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Maximum\":\n      return [maximum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Pow\":\n      return [pow(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"SquaredDifference\":\n      return [squaredDifference(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$1 = function (e, t, a) {\n  switch (e.op) {\n    case \"Abs\":\n    case \"ComplexAbs\":\n      return [abs(getParamValue(\"x\", e, t, a))];\n\n    case \"Acos\":\n      return [acos(getParamValue(\"x\", e, t, a))];\n\n    case \"Acosh\":\n      return [acosh(getParamValue(\"x\", e, t, a))];\n\n    case \"Asin\":\n      return [asin(getParamValue(\"x\", e, t, a))];\n\n    case \"Asinh\":\n      return [asinh(getParamValue(\"x\", e, t, a))];\n\n    case \"Atan\":\n      return [atan(getParamValue(\"x\", e, t, a))];\n\n    case \"Atan2\":\n      return [atan2(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n\n    case \"Atanh\":\n      return [atanh(getParamValue(\"x\", e, t, a))];\n\n    case \"Ceil\":\n      return [ceil(getParamValue(\"x\", e, t, a))];\n\n    case \"Complex\":\n      return [complex(getParamValue(\"real\", e, t, a), getParamValue(\"imag\", e, t, a))];\n\n    case \"Cos\":\n      return [cos(getParamValue(\"x\", e, t, a))];\n\n    case \"Cosh\":\n      return [cosh(getParamValue(\"x\", e, t, a))];\n\n    case \"Elu\":\n      return [elu(getParamValue(\"x\", e, t, a))];\n\n    case \"Erf\":\n      return [erf(getParamValue(\"x\", e, t, a))];\n\n    case \"Exp\":\n      return [exp(getParamValue(\"x\", e, t, a))];\n\n    case \"Expm1\":\n      return [expm1(getParamValue(\"x\", e, t, a))];\n\n    case \"Floor\":\n      return [floor(getParamValue(\"x\", e, t, a))];\n\n    case \"Log\":\n      return [log(getParamValue(\"x\", e, t, a))];\n\n    case \"Log1p\":\n      return [log1p(getParamValue(\"x\", e, t, a))];\n\n    case \"Imag\":\n      return [imag(getParamValue(\"x\", e, t, a))];\n\n    case \"Neg\":\n      return [neg(getParamValue(\"x\", e, t, a))];\n\n    case \"Reciprocal\":\n      return [reciprocal(getParamValue(\"x\", e, t, a))];\n\n    case \"Real\":\n      return [real(getParamValue(\"x\", e, t, a))];\n\n    case \"Relu\":\n      return [relu(getParamValue(\"x\", e, t, a))];\n\n    case \"Round\":\n      return [round(getParamValue(\"x\", e, t, a))];\n\n    case \"Selu\":\n      return [selu(getParamValue(\"x\", e, t, a))];\n\n    case \"Sigmoid\":\n      return [sigmoid(getParamValue(\"x\", e, t, a))];\n\n    case \"Sin\":\n      return [sin(getParamValue(\"x\", e, t, a))];\n\n    case \"Sign\":\n      return [sign(getParamValue(\"x\", e, t, a))];\n\n    case \"Sinh\":\n      return [sinh(getParamValue(\"x\", e, t, a))];\n\n    case \"Softplus\":\n      return [softplus(getParamValue(\"x\", e, t, a))];\n\n    case \"Sqrt\":\n      return [sqrt(getParamValue(\"x\", e, t, a))];\n\n    case \"Square\":\n      return [square(getParamValue(\"x\", e, t, a))];\n\n    case \"Tanh\":\n      return [tanh(getParamValue(\"x\", e, t, a))];\n\n    case \"Tan\":\n      return [tan(getParamValue(\"x\", e, t, a))];\n\n    case \"Relu6\":\n    case \"ClipByValue\":\n      return [clipByValue(getParamValue(\"x\", e, t, a), getParamValue(\"clipValueMin\", e, t, a), getParamValue(\"clipValueMax\", e, t, a))];\n\n    case \"Rsqrt\":\n      return [rsqrt(getTensor(e.inputNames[0], t, a))];\n\n    case \"Prod\":\n      return [prod(getParamValue(\"x\", e, t, a), getParamValue(\"axes\", e, t, a))];\n\n    case \"LeakyRelu\":\n      return [leakyRelu(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))];\n\n    case \"Prelu\":\n      return [prelu(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    TensorArray = function () {\n  function e(t, a, r, n, s, o, p) {\n    this.name = t, this.dtype = a, this.maxSize = r, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = o, this.clearAfterRead = p, this.tensors = [], this.closed_ = !1, this.id = e.nextId++;\n  }\n\n  return Object.defineProperty(e.prototype, \"closed\", {\n    get: function () {\n      return this.closed_;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.clearAndClose = function () {\n    this.tensors.forEach(function (e) {\n      return e.tensor.dispose();\n    }), this.tensors = [], this.closed_ = !0;\n  }, e.prototype.size = function () {\n    return this.tensors.length;\n  }, e.prototype.read = function (e) {\n    if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n    if (e < 0 || e >= this.tensors.length) throw new Error(\"Tried to read from index \" + e + \", but array size is: \" + this.tensors.length);\n    var t = this.tensors[e];\n    if (t.cleared) throw new Error(\"TensorArray \" + this.name + \": Could not read index \" + e + \" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");\n    return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;\n  }, e.prototype.readMany = function (e) {\n    var t = this;\n    return e.map(function (e) {\n      return t.read(e);\n    });\n  }, e.prototype.write = function (e, t) {\n    if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n    if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(\"Tried to write to index \" + e + \", but array is not resizeable and size is: \" + this.maxSize);\n    var a = this.tensors[e] || {};\n    if (t.dtype !== this.dtype) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \",\\n          because the value dtype is \" + t.dtype + \", but TensorArray dtype is \" + this.dtype + \".\");\n    if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, \"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \".\"), a && a.read) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been read.\");\n    if (a && a.written) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been written.\");\n    a.tensor = t, a.written = !0, this.tensors[e] = a;\n  }, e.prototype.writeMany = function (e, t) {\n    var a = this;\n    if (e.length !== t.length) throw new Error(\"TensorArray \" + this.name + \": could not write multiple tensors,because the index size: \" + e.length + \" is not the same as tensors size: \" + t.length + \".\");\n    e.forEach(function (e, r) {\n      return a.write(e, t[r]);\n    });\n  }, e.prototype.gather = function (e, t) {\n    if (t && t !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but gather requested dtype \" + t);\n\n    if (!e) {\n      e = [];\n\n      for (var a = 0; a < this.size(); a++) e.push(a);\n    }\n\n    if (0 === e.length) return tensor([], [0].concat(this.elementShape));\n    var r = this.readMany(e);\n    return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: \"), stack(r, 0);\n  }, e.prototype.concat = function (e) {\n    if (e && e !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but concat requested dtype \" + e);\n    if (0 === this.size()) return tensor([], [0].concat(this.elementShape));\n\n    for (var t = [], a = 0; a < this.size(); a++) t.push(a);\n\n    var r = this.readMany(t);\n    return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: tensor array shape (\" + this.elementShape + \") vs first tensor shape (\" + r[0].shape + \")\"), concat(r, 0);\n  }, e.prototype.scatter = function (e, t) {\n    if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n    if (e.length !== t.shape[0]) throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \" + e.length + \" vs. \" + t.shape[0]);\n    var a = Math.max.apply(Math, e);\n    if (!this.dynamicSize && a >= this.maxSize) throw new Error(\"Max index must be < array size (\" + a + \"  vs. \" + this.maxSize + \")\");\n    this.writeMany(e, unstack(t, 0));\n  }, e.prototype.split = function (e, t) {\n    var a = this;\n    if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n    var r = 0,\n        n = e.map(function (e) {\n      return r += e;\n    });\n    if (r !== t.shape[0]) throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \" + r + \", and tensor's shape is: \" + t.shape);\n    if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(\"TensorArray's size is not equal to the size of lengths (\" + this.maxSize + \" vs. \" + e.length + \"), and the TensorArray is not marked as dynamically resizeable\");\n    var s = 0 === r ? 0 : t.size / r,\n        o = [];\n    tidy(function () {\n      t = t.reshape([1, r, s]);\n\n      for (var p = 0; p < e.length; ++p) {\n        var u = [0, 0 === p ? 0 : n[p - 1], 0],\n            i = [1, e[p], s];\n        o[p] = slice(t, u, i).reshape(a.elementShape);\n      }\n\n      return o;\n    });\n\n    for (var p = [], u = 0; u < e.length; u++) p[u] = u;\n\n    this.writeMany(p, o);\n  }, e.prototype.assertShapesMatchAllowUndefinedSize = function (e, t, a) {\n    void 0 === a && (a = \"\"), util.assert(this.shapesEqualAllowUndefinedSize(e, t), function () {\n      return a + \" Shapes \" + e + \" and \" + t + \" must match\";\n    });\n  }, e.prototype.shapesEqualAllowUndefinedSize = function (e, t) {\n    if (e.length !== t.length) return !1;\n\n    for (var a = 0; a < e.length; a++) if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;\n\n    return !0;\n  }, e.nextId = 0, e;\n}(),\n    _this = void 0,\n    executeOp$2 = function (e, t, a) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var r, n, s, o, p, u, i, m, l, c, d, y, f, g, h, N, x, V, b, P, T, v, O, S, _, w, A, D, E, I, M, C, k, z, F;\n\n    return __generator(this, function (j) {\n      switch (j.label) {\n        case 0:\n          switch (e.op) {\n            case \"LoopCond\":\n              return [3, 1];\n\n            case \"Switch\":\n              return [3, 2];\n\n            case \"Merge\":\n              return [3, 4];\n\n            case \"Enter\":\n              return [3, 5];\n\n            case \"Exit\":\n              return [3, 6];\n\n            case \"NextIteration\":\n              return [3, 7];\n\n            case \"TensorArrayV3\":\n              return [3, 8];\n\n            case \"TensorArrayWriteV3\":\n              return [3, 9];\n\n            case \"TensorArrayReadV3\":\n              return [3, 10];\n\n            case \"TensorArrayGatherV3\":\n              return [3, 11];\n\n            case \"TensorArrayScatterV3\":\n              return [3, 12];\n\n            case \"TensorArrayConcatV3\":\n              return [3, 13];\n\n            case \"TensorArraySplitV3\":\n              return [3, 14];\n\n            case \"TensorArraySizeV3\":\n              return [3, 15];\n\n            case \"TensorArrayCloseV3\":\n              return [3, 16];\n          }\n\n          return [3, 17];\n\n        case 1:\n          return [2, [getParamValue(\"pred\", e, t, a).clone()]];\n\n        case 2:\n          return r = getParamValue(\"pred\", e, t, a), n = getParamValue(\"data\", e, t, a), [4, r.data()];\n\n        case 3:\n          return [2, j.sent()[0] ? [void 0, n.clone()] : [n.clone(), void 0]];\n\n        case 4:\n          return [2, (s = e.inputNames.find(function (e) {\n            return void 0 !== getTensor(e, t, a);\n          })) ? [getTensor(s, t, a).clone()] : void 0];\n\n        case 5:\n          return o = getParamValue(\"frameName\", e, t, a), p = getParamValue(\"tensor\", e, t, a), a.enterFrame(o), [2, [p.clone()]];\n\n        case 6:\n          return u = getParamValue(\"tensor\", e, t, a), a.exitFrame(), [2, [u.clone()]];\n\n        case 7:\n          return i = getParamValue(\"tensor\", e, t, a), a.nextIteration(), [2, [i.clone()]];\n\n        case 8:\n          return m = getParamValue(\"size\", e, t, a), l = getParamValue(\"dtype\", e, t, a), c = getParamValue(\"elementShape\", e, t, a), d = getParamValue(\"dynamicSize\", e, t, a), y = getParamValue(\"clearAfterRead\", e, t, a), f = getParamValue(\"identicalElementShapes\", e, t, a), g = getParamValue(\"name\", e, t, a), h = new TensorArray(g, l, m, c, f, d, y), a.addTensorArray(h), [2, [scalar(h.id), scalar(1)]];\n\n        case 9:\n          return N = getParamValue(\"tensorArrayId\", e, t, a), x = getParamValue(\"index\", e, t, a), V = getParamValue(\"tensor\", e, t, a), a.getTensorArray(N).write(x, V), [2, [scalar(1)]];\n\n        case 10:\n          return b = getParamValue(\"tensorArrayId\", e, t, a), P = getParamValue(\"index\", e, t, a), [2, [a.getTensorArray(b).read(P)]];\n\n        case 11:\n          return T = getParamValue(\"tensorArrayId\", e, t, a), v = getParamValue(\"indices\", e, t, a), O = getParamValue(\"dtype\", e, t, a), [2, [a.getTensorArray(T).gather(v, O)]];\n\n        case 12:\n          return S = getParamValue(\"tensorArrayId\", e, t, a), _ = getParamValue(\"indices\", e, t, a), w = getParamValue(\"tensor\", e, t, a), a.getTensorArray(S).scatter(_, w), [2, [scalar(1)]];\n\n        case 13:\n          return A = getParamValue(\"tensorArrayId\", e, t, a), D = a.getTensorArray(A), E = getParamValue(\"dtype\", e, t, a), [2, [D.concat(E)]];\n\n        case 14:\n          return I = getParamValue(\"tensorArrayId\", e, t, a), M = getParamValue(\"tensor\", e, t, a), C = getParamValue(\"lengths\", e, t, a), a.getTensorArray(I).split(C, M), [2, [scalar(1)]];\n\n        case 15:\n          return k = getParamValue(\"tensorArrayId\", e, t, a), z = a.getTensorArray(k), [2, [scalar(z.size(), \"int32\")]];\n\n        case 16:\n          return F = getParamValue(\"tensorArrayId\", e, t, a), a.getTensorArray(F).clearAndClose(), [2, [scalar(0)]];\n\n        case 17:\n          throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n      }\n    });\n  });\n},\n    executeOp$3 = function (e, t, a) {\n  switch (e.op) {\n    case \"Conv1D\":\n      var r = getParamValue(\"stride\", e, t, a),\n          n = getParamValue(\"pad\", e, t, a),\n          s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(),\n          o = getParamValue(\"dilation\", e, t, a);\n      return [conv1d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), r, n, s, o)];\n\n    case \"Conv2D\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n      var p = getParamValue(\"dilations\", e, t, a);\n      return [conv2d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2]], n, s, [p[1], p[2]])];\n\n    case \"_FusedConv2D\":\n    case \"FusedDepthwiseConv2dNative\":\n      var u = getParamValue(\"fusedOps\", e, t, a),\n          i = u[0],\n          m = u[1],\n          l = \"biasadd\" === i,\n          c = \"prelu\" === m,\n          d = \"fusedbatchnorm\" === i,\n          y = getParamValue(\"numArgs\", e, t, a);\n\n      if (l) {\n        if (c && 2 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n        if (!c && 1 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\");\n      }\n\n      if (d) throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n      var f = getParamValue(\"args\", e, t, a),\n          g = f[0],\n          h = f[1];\n      return [(\"_FusedConv2D\" === e.op ? fused.conv2d : fused.depthwiseConv2d)({\n        x: getParamValue(\"x\", e, t, a),\n        filter: getParamValue(\"filter\", e, t, a),\n        strides: [r[1], r[2]],\n        pad: n,\n        dataFormat: s,\n        dilations: [p[1], p[2]],\n        bias: g,\n        activation: m,\n        preluActivationWeights: h\n      })];\n\n    case \"Conv2DBackpropInput\":\n    case \"Conv2dTranspose\":\n      var N = getParamValue(\"outputShape\", e, t, a);\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n      return [conv2dTranspose(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), N, [r[1], r[2]], n)];\n\n    case \"DepthwiseConv2dNative\":\n    case \"DepthwiseConv2d\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dilations\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n      return [depthwiseConv2d(getParamValue(\"input\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2]], n, s, [p[1], p[2]])];\n\n    case \"Conv3D\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n      return [conv3d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2], r[3]], n, s, [p[1], p[2], p[3]])];\n\n    case \"AvgPool\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n      var x = getParamValue(\"kernelSize\", e, t, a);\n      return [avgPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n)];\n\n    case \"MaxPool\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n      return [maxPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n)];\n\n    case \"MaxPoolWithArgmax\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n      var V = getParamValue(\"includeBatchInIndex\", e, t, a),\n          b = maxPoolWithArgmax(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n, V);\n      return [b.result, b.indexes];\n\n    case \"AvgPool3D\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n      return [avgPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [r[1], r[2], r[3]], n)];\n\n    case \"MaxPool3D\":\n      r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n      return [maxPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [r[1], r[2], r[3]], n)];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$4 = function (e, t, a) {\n  switch (e.op) {\n    case \"Fill\":\n      var r = getParamValue(\"shape\", e, t, a),\n          n = getParamValue(\"dtype\", e, t, a),\n          s = getParamValue(\"value\", e, t, a);\n      return [fill(r, s, n)];\n\n    case \"LinSpace\":\n      var o = getParamValue(\"start\", e, t, a),\n          p = getParamValue(\"stop\", e, t, a),\n          u = getParamValue(\"num\", e, t, a);\n      return [linspace(o, p, u)];\n\n    case \"Multinomial\":\n      var i = getParamValue(\"logits\", e, t, a),\n          m = getParamValue(\"numSamples\", e, t, a),\n          l = getParamValue(\"seed\", e, t, a);\n      return [multinomial(i, m, l)];\n\n    case \"OneHot\":\n      var c = getParamValue(\"indices\", e, t, a),\n          d = getParamValue(\"depth\", e, t, a),\n          y = getParamValue(\"onValue\", e, t, a),\n          f = getParamValue(\"offValue\", e, t, a);\n      return [oneHot(c, d, y, f)];\n\n    case \"Ones\":\n      return [ones(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n\n    case \"OnesLike\":\n      return [onesLike(getParamValue(\"x\", e, t, a))];\n\n    case \"RandomUniform\":\n      return [randomUniform(getParamValue(\"shape\", e, t, a), getParamValue(\"minval\", e, t, a), getParamValue(\"maxval\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n\n    case \"Range\":\n      o = getParamValue(\"start\", e, t, a);\n      var g = getParamValue(\"stop\", e, t, a),\n          h = getParamValue(\"step\", e, t, a);\n      return [range(o, g, h, getParamValue(\"dtype\", e, t, a))];\n\n    case \"TruncatedNormal\":\n      r = getParamValue(\"shape\", e, t, a);\n      var N = getParamValue(\"mean\", e, t, a),\n          x = getParamValue(\"stdDev\", e, t, a);\n      l = getParamValue(\"seed\", e, t, a);\n      return [truncatedNormal(r, N, x, getParamValue(\"dtype\", e, t, a), l)];\n\n    case \"Zeros\":\n      return [zeros(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n\n    case \"ZerosLike\":\n      return [zerosLike(getParamValue(\"x\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    _this$1 = void 0,\n    executeOp$5 = function (e, t, a) {\n  return __awaiter(_this$1, void 0, void 0, function () {\n    var r, n, s, o, p, u, i, m;\n    return __generator(this, function (l) {\n      switch (l.label) {\n        case 0:\n          switch (e.op) {\n            case \"NonMaxSuppressionV5\":\n            case \"NonMaxSuppressionV3\":\n            case \"NonMaxSuppressionV2\":\n              return [3, 1];\n\n            case \"Where\":\n              return [3, 5];\n\n            case \"ListDiff\":\n              return [3, 7];\n          }\n\n          return [3, 8];\n\n        case 1:\n          return r = getParamValue(\"boxes\", e, t, a), n = getParamValue(\"scores\", e, t, a), s = getParamValue(\"maxOutputSize\", e, t, a), o = getParamValue(\"iouThreshold\", e, t, a), p = getParamValue(\"scoreThreshold\", e, t, a), \"NonMaxSuppressionV5\" !== e.op ? [3, 3] : (u = getParamValue(\"softNmsSigma\", e, t, a), [4, image.nonMaxSuppressionWithScoreAsync(r, n, s, o, p, u)]);\n\n        case 2:\n          return [2, [(m = l.sent()).selectedIndices, m.selectedScores]];\n\n        case 3:\n          return [4, image.nonMaxSuppressionAsync(r, n, s, o, p)];\n\n        case 4:\n          return [2, [l.sent()]];\n\n        case 5:\n          return i = getParamValue(\"condition\", e, t, a).asType(\"bool\"), [4, whereAsync(i)];\n\n        case 6:\n          return m = [l.sent()], i.dispose(), [2, m];\n\n        case 7:\n          return [2, setdiff1dAsync(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n\n        case 8:\n          throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n      }\n    });\n  });\n},\n    executeOp$6 = function (e, t, a) {\n  switch (e.op) {\n    case \"TopKV2\":\n      var r = getParamValue(\"x\", e, t, a),\n          n = getParamValue(\"k\", e, t, a),\n          s = getParamValue(\"sorted\", e, t, a),\n          o = topk(r, n, s);\n      return [o.values, o.indices];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$7 = function (e, t, a) {\n  switch (e.op) {\n    case \"Const\":\n      return t[e.name];\n\n    case \"PlaceholderWithDefault\":\n      var r = getParamValue(\"default\", e, t, a);\n      return [getTensor(e.name, t, a) || r];\n\n    case \"Placeholder\":\n      return [getTensor(e.name, t, a)];\n\n    case \"Identity\":\n    case \"StopGradient\":\n    case \"FakeQuantWithMinMaxVars\":\n      return [getParamValue(\"x\", e, t, a).clone()];\n\n    case \"IdentityN\":\n      return getParamValue(\"x\", e, t, a).map(function (e) {\n        return e.clone();\n      });\n\n    case \"Snapshot\":\n      return [getParamValue(\"x\", e, t, a).clone()];\n\n    case \"Shape\":\n      return [tensor1d(getParamValue(\"x\", e, t, a).shape, \"int32\")];\n\n    case \"ShapeN\":\n      return getParamValue(\"x\", e, t, a).map(function (e) {\n        return tensor1d(e.shape);\n      });\n\n    case \"Size\":\n      return [scalar(getParamValue(\"x\", e, t, a).size, \"int32\")];\n\n    case \"Rank\":\n      return [scalar(getParamValue(\"x\", e, t, a).rank, \"int32\")];\n\n    case \"NoOp\":\n      return [scalar(1)];\n\n    case \"Print\":\n      var n = getParamValue(\"x\", e, t, a),\n          s = getParamValue(\"data\", e, t, a),\n          o = getParamValue(\"message\", e, t, a),\n          p = getParamValue(\"summarize\", e, t, a);\n      console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"), console.log(o);\n\n      for (var u = 0; u < s.length; u++) console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0, p));\n\n      return [n];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$8 = function (e, t, a) {\n  switch (e.op) {\n    case \"ResizeBilinear\":\n      var r = getParamValue(\"images\", e, t, a),\n          n = getParamValue(\"size\", e, t, a),\n          s = getParamValue(\"alignCorners\", e, t, a);\n      return [image.resizeBilinear(r, [n[0], n[1]], s)];\n\n    case \"ResizeNearestNeighbor\":\n      r = getParamValue(\"images\", e, t, a), n = getParamValue(\"size\", e, t, a), s = getParamValue(\"alignCorners\", e, t, a);\n      return [image.resizeNearestNeighbor(r, [n[0], n[1]], s)];\n\n    case \"CropAndResize\":\n      var o = getParamValue(\"image\", e, t, a),\n          p = getParamValue(\"boxes\", e, t, a),\n          u = getParamValue(\"boxInd\", e, t, a),\n          i = getParamValue(\"cropSize\", e, t, a),\n          m = getParamValue(\"method\", e, t, a),\n          l = getParamValue(\"extrapolationValue\", e, t, a);\n      return [image.cropAndResize(o, p, u, i, m, l)];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$9 = function (e, t, a) {\n  switch (e.op) {\n    case \"Equal\":\n      return [equal(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"NotEqual\":\n      return [notEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Greater\":\n      return [greater(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"GreaterEqual\":\n      return [greaterEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Less\":\n      return [less(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"LessEqual\":\n      return [lessEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"LogicalAnd\":\n      return [logicalAnd(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"LogicalNot\":\n      return [logicalNot(getParamValue(\"a\", e, t, a))];\n\n    case \"LogicalOr\":\n      return [logicalOr(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    case \"Select\":\n    case \"SelectV2\":\n      return [where(getParamValue(\"condition\", e, t, a), getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$10 = function (e, t, a) {\n  switch (e.op) {\n    case \"BatchMatMul\":\n    case \"BatchMatMulV2\":\n    case \"MatMul\":\n      return [matMul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a), getParamValue(\"transposeA\", e, t, a), getParamValue(\"transposeB\", e, t, a))];\n\n    case \"Transpose\":\n      return [transpose(getParamValue(\"x\", e, t, a), getParamValue(\"perm\", e, t, a))];\n\n    case \"_FusedMatMul\":\n      var r = getParamValue(\"fusedOps\", e, t, a),\n          n = r[0],\n          s = r[1],\n          o = \"biasadd\" === n,\n          p = \"prelu\" === s,\n          u = getParamValue(\"numArgs\", e, t, a);\n\n      if (o) {\n        if (p && 2 !== u) throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n        if (!p && 1 !== u) throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\");\n      }\n\n      var i = getParamValue(\"args\", e, t, a),\n          m = i[0],\n          l = i[1];\n      return [fused.matMul({\n        a: getParamValue(\"a\", e, t, a),\n        b: getParamValue(\"b\", e, t, a),\n        transposeA: getParamValue(\"transposeA\", e, t, a),\n        transposeB: getParamValue(\"transposeB\", e, t, a),\n        bias: m,\n        activation: s,\n        preluActivationWeights: l\n      })];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$11 = function (e, t, a) {\n  switch (e.op) {\n    case \"FusedBatchNorm\":\n    case \"FusedBatchNormV2\":\n    case \"FusedBatchNormV3\":\n      return [batchNorm(getParamValue(\"x\", e, t, a), getParamValue(\"mean\", e, t, a), getParamValue(\"variance\", e, t, a), getParamValue(\"offset\", e, t, a), getParamValue(\"scale\", e, t, a), getParamValue(\"epsilon\", e, t, a))];\n\n    case \"LRN\":\n      return [localResponseNormalization(getParamValue(\"x\", e, t, a), getParamValue(\"radius\", e, t, a), getParamValue(\"bias\", e, t, a), getParamValue(\"alpha\", e, t, a), getParamValue(\"beta\", e, t, a))];\n\n    case \"Softmax\":\n      return [softmax(getParamValue(\"x\", e, t, a))];\n\n    case \"LogSoftmax\":\n      return [logSoftmax(getParamValue(\"x\", e, t, a))];\n\n    case \"SparseToDense\":\n      return [sparseToDense(getParamValue(\"sparseIndices\", e, t, a), getParamValue(\"outputShape\", e, t, a), getParamValue(\"sparseValues\", e, t, a), getParamValue(\"defaultValue\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$12 = function (e, t, a) {\n  switch (e.op) {\n    case \"Max\":\n      var r = getParamValue(\"axis\", e, t, a),\n          n = getParamValue(\"keepDims\", e, t, a);\n      return [max(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"Mean\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [mean(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"Min\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [min(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"Sum\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [sum(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"All\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [all(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"Any\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [any(getParamValue(\"x\", e, t, a), r, n)];\n\n    case \"ArgMax\":\n      r = getParamValue(\"axis\", e, t, a);\n      return [argMax(getParamValue(\"x\", e, t, a), r)];\n\n    case \"ArgMin\":\n      r = getParamValue(\"axis\", e, t, a);\n      return [argMin(getParamValue(\"x\", e, t, a), r)];\n\n    case \"Prod\":\n      r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n      return [prod(getParamValue(\"x\", e, t, a), r, n)];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$13 = function (e, t, a) {\n  switch (e.op) {\n    case \"ConcatV2\":\n    case \"Concat\":\n      var r = getParamValue(\"n\", e, t, a),\n          n = getParamValue(\"axis\", e, t, a),\n          s = getParamValue(\"tensors\", e, t, a);\n      return s = s.slice(0, r), [concat(s, n)];\n\n    case \"GatherV2\":\n    case \"Gather\":\n      n = getParamValue(\"axis\", e, t, a);\n      var o = getParamValue(\"x\", e, t, a),\n          p = getParamValue(\"indices\", e, t, a);\n      return [gather(o, p.asType(\"int32\"), n)];\n\n    case \"ReverseV2\":\n    case \"Reverse\":\n      n = getParamValue(\"axis\", e, t, a), o = getParamValue(\"x\", e, t, a);\n      return [reverse(o, n)];\n\n    case \"Slice\":\n      var u = getParamValue(\"begin\", e, t, a),\n          i = getParamValue(\"size\", e, t, a);\n      return [slice(getParamValue(\"x\", e, t, a), u, i)];\n\n    case \"StridedSlice\":\n      u = getParamValue(\"begin\", e, t, a);\n      var m = getParamValue(\"end\", e, t, a),\n          l = getParamValue(\"strides\", e, t, a),\n          c = getParamValue(\"beginMask\", e, t, a),\n          d = getParamValue(\"endMask\", e, t, a),\n          y = getParamValue(\"ellipsisMask\", e, t, a),\n          f = getParamValue(\"newAxisMask\", e, t, a),\n          g = getParamValue(\"shrinkAxisMask\", e, t, a),\n          h = getParamValue(\"x\", e, t, a);\n      if (1 === u.length && h.shape.length > 1) for (var N = 1; N < h.shape.length; N++) u.push(0), m.push(h.shape[N]), l.push(l[0]);\n      return [stridedSlice(h, u, m, l, c, d, y, f, g)];\n\n    case \"Pack\":\n      return tidy(function () {\n        var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensors\", e, t, a),\n            s = n[0].shape,\n            o = n[0].squeeze().shape,\n            p = n.map(function (e) {\n          var t = util.arraysEqual(e.shape, s);\n          if (!t && !util.arraysEqual(e.squeeze().shape, o)) throw new Error(\"the input tensors shape does not match\");\n          return t ? e : e.reshape(s);\n        });\n        return [stack(p, r)];\n      });\n\n    case \"Unpack\":\n      return tidy(function () {\n        var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensor\", e, t, a);\n        return unstack(n, r);\n      });\n\n    case \"Tile\":\n      var x = getParamValue(\"reps\", e, t, a);\n      return [tile(getParamValue(\"x\", e, t, a), x)];\n\n    case \"Split\":\n    case \"SplitV\":\n      n = getParamValue(\"axis\", e, t, a);\n      var V = getParamValue(\"numOrSizeSplits\", e, t, a);\n      return split(getParamValue(\"x\", e, t, a), V, n);\n\n    case \"ScatterNd\":\n      p = getParamValue(\"indices\", e, t, a);\n      var b = getParamValue(\"values\", e, t, a),\n          P = getParamValue(\"shape\", e, t, a);\n      return [scatterND(p, b, P)];\n\n    case \"GatherNd\":\n      var T = getParamValue(\"x\", e, t, a);\n      p = getParamValue(\"indices\", e, t, a);\n      return [gatherND(T, p)];\n\n    case \"SparseToDense\":\n      p = getParamValue(\"sparseIndices\", e, t, a), P = getParamValue(\"outputShape\", e, t, a);\n      var v = getParamValue(\"sparseValues\", e, t, a),\n          O = getParamValue(\"defaultValue\", e, t, a);\n      return [sparseToDense(p, v, P, v.dtype === O.dtype ? O : O.asType(v.dtype))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$14 = function (e, t, a) {\n  switch (e.op) {\n    case \"FFT\":\n      return [fft(getParamValue(\"x\", e, t, a))];\n\n    case \"IFFT\":\n      return [ifft(getParamValue(\"x\", e, t, a))];\n\n    case \"RFFT\":\n      return [rfft(getParamValue(\"x\", e, t, a))];\n\n    case \"IRFFT\":\n      return [irfft(getParamValue(\"x\", e, t, a))];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n},\n    executeOp$15 = function (e, t, a) {\n  switch (e.op) {\n    case \"Cast\":\n      return [cast(getParamValue(\"x\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n\n    case \"ExpandDims\":\n      var r = getParamValue(\"axis\", e, t, a);\n      return [expandDims(getParamValue(\"x\", e, t, a), r)];\n\n    case \"Squeeze\":\n      r = getParamValue(\"axis\", e, t, a);\n      return [squeeze(getParamValue(\"x\", e, t, a), r)];\n\n    case \"Reshape\":\n      return [reshape(getParamValue(\"x\", e, t, a), getParamValue(\"shape\", e, t, a))];\n\n    case \"PadV2\":\n    case \"Pad\":\n      return [pad(getParamValue(\"x\", e, t, a), split$1(getParamValue(\"padding\", e, t, a), 2), getParamValue(\"constantValue\", e, t, a))];\n\n    case \"SpaceToBatchND\":\n      var n = getParamValue(\"blockShape\", e, t, a),\n          s = split$1(getParamValue(\"paddings\", e, t, a), 2);\n      return [spaceToBatchND(getParamValue(\"x\", e, t, a), n, s)];\n\n    case \"BatchToSpaceND\":\n      n = getParamValue(\"blockShape\", e, t, a);\n      var o = split$1(getParamValue(\"crops\", e, t, a), 2);\n      return [batchToSpaceND(getParamValue(\"x\", e, t, a), n, o)];\n\n    case \"DepthToSpace\":\n      var p = getParamValue(\"blockSize\", e, t, a),\n          u = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n      return [depthToSpace(getParamValue(\"x\", e, t, a), p, u)];\n\n    default:\n      throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n  }\n};\n\nfunction executeOp$16(e, t, a) {\n  var r = function (e, t, a) {\n    switch (e.category) {\n      case \"arithmetic\":\n        return tidy(function () {\n          return executeOp(e, t, a);\n        });\n\n      case \"basic_math\":\n        return tidy(function () {\n          return executeOp$1(e, t, a);\n        });\n\n      case \"control\":\n        return executeOp$2(e, t, a);\n\n      case \"convolution\":\n        return tidy(function () {\n          return executeOp$3(e, t, a);\n        });\n\n      case \"creation\":\n        return tidy(function () {\n          return executeOp$4(e, t, a);\n        });\n\n      case \"dynamic\":\n        return executeOp$5(e, t, a);\n\n      case \"evaluation\":\n        return tidy(function () {\n          return executeOp$6(e, t, a);\n        });\n\n      case \"image\":\n        return tidy(function () {\n          return executeOp$8(e, t, a);\n        });\n\n      case \"graph\":\n        return tidy(function () {\n          return executeOp$7(e, t, a);\n        });\n\n      case \"logical\":\n        return tidy(function () {\n          return executeOp$9(e, t, a);\n        });\n\n      case \"matrices\":\n        return tidy(function () {\n          return executeOp$10(e, t, a);\n        });\n\n      case \"normalization\":\n        return tidy(function () {\n          return executeOp$11(e, t, a);\n        });\n\n      case \"reduction\":\n        return tidy(function () {\n          return executeOp$12(e, t, a);\n        });\n\n      case \"slice_join\":\n        return tidy(function () {\n          return executeOp$13(e, t, a);\n        });\n\n      case \"spectral\":\n        return tidy(function () {\n          return executeOp$14(e, t, a);\n        });\n\n      case \"transformation\":\n        return tidy(function () {\n          return executeOp$15(e, t, a);\n        });\n\n      case \"custom\":\n        var r = getRegisteredOp(e.op);\n        if (r && r.customExecutor) return r.customExecutor(new NodeValueImpl(e, t, a));\n        throw TypeError(\"Custom op \" + e.op + \" is not registered.\");\n\n      default:\n        throw TypeError(\"Unknown op '\" + e.op + \"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\");\n    }\n  }(e, t, a);\n\n  return r instanceof Promise ? r.then(function (e) {\n    return [].concat(e);\n  }) : [].concat(r);\n}\n\nvar ExecutionContext = function () {\n  function e(e, t) {\n    this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {\n      id: 0,\n      frameName: \"\",\n      iterationId: 0\n    }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();\n  }\n\n  return e.prototype.newFrame = function (e, t) {\n    return {\n      id: e,\n      frameName: t,\n      iterationId: 0\n    };\n  }, Object.defineProperty(e.prototype, \"currentContext\", {\n    get: function () {\n      return this.contexts;\n    },\n    set: function (e) {\n      this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextId\", {\n    get: function () {\n      return this._currentContextIds[0];\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextIds\", {\n    get: function () {\n      return this._currentContextIds;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.generateCurrentContextIds = function () {\n    for (var e = [], t = 0; t < this.contexts.length - 1; t++) {\n      var a = this.contexts.slice(0, this.contexts.length - t);\n      e.push(this.contextIdforContexts(a));\n    }\n\n    e.push(\"\"), this._currentContextIds = e;\n  }, e.prototype.contextIdforContexts = function (e) {\n    return e ? e.map(function (e) {\n      return 0 === e.id && 0 === e.iterationId ? \"\" : e.frameName + \"-\" + e.iterationId;\n    }).join(\"/\") : \"\";\n  }, e.prototype.enterFrame = function (e) {\n    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));\n  }, e.prototype.exitFrame = function () {\n    if (!(this.contexts && this.contexts.length > 1)) throw new Error(\"Cannot exit frame, the context is empty\");\n    this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();\n  }, e.prototype.nextIteration = function () {\n    if (!(this.contexts && this.contexts.length > 0)) throw new Error(\"Cannot increase frame iteration, the context is empty\");\n    this.contexts = this.contexts.slice(), this.lastId++;\n    var e = Object.assign({}, this.contexts[this.contexts.length - 1]);\n    e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n  }, e.prototype.getWeight = function (e) {\n    return this.weightMap[e];\n  }, e.prototype.addTensorArray = function (e) {\n    this.tensorArrayMap[e.id] = e;\n  }, e.prototype.getTensorArray = function (e) {\n    return this.tensorArrayMap[e];\n  }, e;\n}();\n\nfunction getExecutionSubgraph(e, t, a) {\n  for (var r = new Set(), n = [], s = null, o = null, p = new Set(), u = Object.keys(e).map(function (e) {\n    return parseNodeName(e)[0];\n  }), i = t.slice(); i.length > 0;) {\n    var m = i.pop();\n    (isControlFlow(m) || isDynamicShape(m)) && null == s && (o = (s = m).children.map(function (e) {\n      return e.name;\n    }).filter(function (e) {\n      return r.has(e);\n    })), r.add(m.name), null == a[m.name] && -1 === u.indexOf(m.name) && (0 !== m.inputs.length ? m.inputs.forEach(function (e) {\n      p.has(e.name) || (p.add(e.name), i.push(e));\n    }) : n.push(m.name));\n  }\n\n  return {\n    inputs: e,\n    outputs: t,\n    usedNodes: r,\n    missingInputs: n,\n    dynamicNode: s,\n    syncInputs: o\n  };\n}\n\nfunction getNodesInTopologicalOrder(e, t, a) {\n  var r = a.usedNodes,\n      n = a.inputs,\n      s = [];\n  Object.keys(n).map(function (e) {\n    return parseNodeName(e)[0];\n  }).map(function (t) {\n    return e.nodes[t];\n  }).forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  }), e.weights.forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  });\n\n  for (var o = new Set(), p = []; s.length > 0;) {\n    var u = s.pop();\n    o.add(u.name), t[u.name] || p.push(u), u.children.forEach(function (e) {\n      !o.has(e.name) && r.has(e.name) && e.inputs.every(function (e) {\n        return o.has(e.name);\n      }) && s.push(e);\n    });\n  }\n\n  return p;\n}\n\nvar CONTROL_FLOW_OPS = [\"Switch\", \"Merge\", \"Enter\", \"Exit\", \"NextIteration\"],\n    DYNAMIC_SHAPE_OPS = [\"NonMaxSuppressionV2\", \"NonMaxSuppressionV3\", \"NonMaxSuppressionV5\", \"Where\"];\n\nfunction isControlFlow(e) {\n  return CONTROL_FLOW_OPS.indexOf(e.op) >= 0;\n}\n\nfunction isDynamicShape(e) {\n  return DYNAMIC_SHAPE_OPS.indexOf(e.op) >= 0;\n}\n\nvar GraphExecutor = function () {\n  function e(e) {\n    this.graph = e, this.compiledMap = new Map(), this._weightMap = {}, this.SEPERATOR = \",\", this._outputs = e.outputs, this._inputs = e.inputs, this._signature = e.signature;\n  }\n\n  return Object.defineProperty(e.prototype, \"weightMap\", {\n    get: function () {\n      return this._weightMap;\n    },\n    set: function (e) {\n      var t = Object.keys(e).map(function (t) {\n        return e[t].map(function (e) {\n          return e.id;\n        });\n      });\n      this.weightIds = [].concat.apply([], t), this._weightMap = e;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"inputs\", {\n    get: function () {\n      return this._inputs.map(function (e) {\n        return {\n          name: e.name,\n          shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n          dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n        };\n      });\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"outputs\", {\n    get: function () {\n      return this._outputs.map(function (e) {\n        return {\n          name: e.name,\n          shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n          dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n        };\n      });\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"inputNodes\", {\n    get: function () {\n      return this._inputs.map(function (e) {\n        return e.signatureKey || e.name;\n      });\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"outputNodes\", {\n    get: function () {\n      return this._outputs.map(function (e) {\n        return e.signatureKey || e.name;\n      });\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.getCompilationKey = function (e, t) {\n    var a = e.map(function (e) {\n      return e.name;\n    }).sort(),\n        r = t.map(function (e) {\n      return e.name;\n    }).sort();\n    return a.join(this.SEPERATOR) + \"--\" + r.join(this.SEPERATOR);\n  }, e.prototype.compile = function (e, t) {\n    var a = getExecutionSubgraph(e, t, this.weightMap),\n        r = a.missingInputs,\n        n = a.dynamicNode,\n        s = a.syncInputs;\n    if (null != n) throw new Error(\"This execution contains the node '\" + n.name + \"', which has the dynamic op '\" + n.op + \"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\" + s + \"]\");\n\n    if (r.length > 0) {\n      var o = t.map(function (e) {\n        return e.name;\n      }),\n          p = Object.keys(e);\n      throw new Error(\"Cannot compute the outputs [\" + o + \"] from the provided inputs [\" + p + \"]. Missing the following inputs: [\" + r + \"]\");\n    }\n\n    return getNodesInTopologicalOrder(this.graph, this.weightMap, a);\n  }, e.prototype.execute = function (e, t) {\n    var a = this;\n    e = this.mapInputs(e);\n    var r = Object.keys(e).sort();\n    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);\n    var n = r.map(function (e) {\n      return a.graph.nodes[parseNodeName(e)[0]];\n    }),\n        s = t.map(function (e) {\n      return a.graph.nodes[parseNodeName(e)[0]];\n    }),\n        o = this.getCompilationKey(n, s),\n        p = this.compiledMap.get(o);\n    null == p && (p = this.compile(e, s), this.compiledMap.set(o, p));\n    var u = {};\n    return tidy(function () {\n      var r = new ExecutionContext(a._weightMap, u),\n          n = __assign({}, a.weightMap);\n\n      Object.keys(e).forEach(function (t) {\n        var a = parseNodeName(t),\n            r = a[0],\n            s = [];\n        s[a[1]] = e[t], n[r] = s;\n      });\n\n      for (var s = a.getFrozenTensorIds(n), o = {}, i = 0; i < p.length; i++) {\n        var m = p[i];\n\n        if (!n[m.name]) {\n          var l = executeOp$16(m, n, r);\n          if (l instanceof Promise) throw new Error(\"The execution of the op '\" + m.op + \"' returned a promise. Please use model.executeAsync() instead.\");\n          n[m.name] = l, a.checkTensorForDisposal(m.name, m, n, r, s, t, o);\n        }\n      }\n\n      return t.map(function (e) {\n        return getTensor(e, n, r);\n      });\n    });\n  }, e.prototype.getFrozenTensorIds = function (e) {\n    var t = [].concat.apply([], Object.keys(e).map(function (t) {\n      return e[t];\n    }).map(function (e) {\n      return e.map(function (e) {\n        return e.id;\n      });\n    }));\n    return new Set(t);\n  }, e.prototype.checkTensorForDisposal = function (e, t, a, r, n, s, o) {\n    \"control\" !== t.category && -1 === s.indexOf(e) && (a[e].forEach(function (e) {\n      null != e && (o[e.id] = (o[e.id] || 0) + t.children.length);\n    }), t.inputs.forEach(function (e) {\n      if (\"control\" !== e.category) {\n        var t = getTensorsForCurrentContenxt(e.name, a, r);\n        null != t && t.forEach(function (e) {\n          if (e && !n.has(e.id)) {\n            var t = o[e.id];\n            1 === t ? (e.dispose(), delete o[e.id]) : null != t && o[e.id]--;\n          }\n        });\n      }\n    }));\n  }, e.prototype.executeAsync = function (e, t) {\n    return __awaiter(this, void 0, void 0, function () {\n      var a,\n          r,\n          n,\n          s,\n          o,\n          p,\n          u = this;\n      return __generator(this, function (i) {\n        switch (i.label) {\n          case 0:\n            return e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t), a = {}, r = new ExecutionContext(this._weightMap, a), [4, this.executeWithControlFlow(e, r, t)];\n\n          case 1:\n            return n = i.sent(), s = t.map(function (e) {\n              return getTensor(e, n, r);\n            }), o = new Set(s.map(function (e) {\n              return e.id;\n            })), p = new Set(Object.keys(e).map(function (t) {\n              return e[t].id;\n            })), Object.keys(n).forEach(function (e) {\n              n[e].forEach(function (e) {\n                !e || e.isDisposed || o.has(e.id) || p.has(e.id) || -1 !== u.weightIds.indexOf(e.id) || e.dispose();\n              });\n            }), [2, s];\n        }\n      });\n    });\n  }, e.prototype.executeWithControlFlow = function (e, t, a) {\n    return __awaiter(this, void 0, void 0, function () {\n      var r,\n          n,\n          s,\n          o,\n          p,\n          u,\n          i,\n          m,\n          l,\n          c,\n          d,\n          y,\n          f,\n          g,\n          h,\n          N,\n          x = this;\n      return __generator(this, function (V) {\n        switch (V.label) {\n          case 0:\n            r = Object.keys(e), n = r.map(function (e) {\n              return x.graph.nodes[parseNodeName(e)[0]];\n            }), s = a.map(function (e) {\n              return x.graph.nodes[parseNodeName(e)[0]];\n            }), o = getExecutionSubgraph(e, s, this.weightMap), p = o.usedNodes, u = o.missingInputs, i = o.dynamicNode, m = o.syncInputs, l = n.concat(this.graph.weights).map(function (e) {\n              return {\n                node: e,\n                contexts: t.currentContext\n              };\n            }), c = __assign({}, this.weightMap), Object.keys(e).forEach(function (t) {\n              var a = parseNodeName(t),\n                  r = a[0],\n                  n = [];\n              n[a[1]] = e[t], c[r] = n;\n            }), d = {}, y = this.getFrozenTensorIds(c), f = {}, V.label = 1;\n\n          case 1:\n            return l.length > 0 ? (g = this.processStack(n, l, t, c, f, y, a, d, p), [4, Promise.all(g)]) : [3, 3];\n\n          case 2:\n            return V.sent(), [3, 1];\n\n          case 3:\n            if (null == i && console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"), (h = s.filter(function (e) {\n              return !isControlFlow(e) && !getTensor(e.name, c, t);\n            }).map(function (e) {\n              return e.name;\n            })).length > 0) throw N = \"\", null != i && (N = \"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\" + m + \"]\"), new Error(\"Cannot compute the outputs [\" + h + \"] from the provided inputs [\" + r + \"]. Consider providing the following inputs: [\" + u + \"]. \" + N);\n            return [2, c];\n        }\n      });\n    });\n  }, e.prototype.processStack = function (e, t, a, r, n, s, o, p, u) {\n    for (var i = this, m = [], l = function () {\n      var l = t.pop();\n      a.currentContext = l.contexts;\n      var d = \"\";\n\n      if (\"Enter\" === l.node.op && getParamValue(\"isConstant\", l.node, r, a) && (d = getNodeNameAndIndex(l.node.name, a)[0]), -1 === e.indexOf(l.node)) {\n        var y = executeOp$16(l.node, r, a);\n        d || (d = getNodeNameAndIndex(l.node.name, a)[0]);\n        var f = a.currentContext;\n        y instanceof Promise ? m.push(y.then(function (e) {\n          return r[d] = e, a.currentContext = f, i.checkTensorForDisposal(d, l.node, r, a, s, o, p), i.processChildNodes(l.node, t, a, r, n, u), e;\n        })) : (r[d] = y, c.checkTensorForDisposal(d, l.node, r, a, s, o, p), c.processChildNodes(l.node, t, a, r, n, u));\n      } else c.processChildNodes(l.node, t, a, r, n, u);\n    }, c = this; t.length > 0;) l();\n\n    return m;\n  }, e.prototype.processChildNodes = function (e, t, a, r, n, s) {\n    e.children.forEach(function (e) {\n      var o = getNodeNameAndIndex(e.name, a)[0];\n      !n[o] && s.has(e.name) && (\"Merge\" === e.op ? e.inputNames.some(function (e) {\n        return !!getTensor(e, r, a);\n      }) && (n[o] = !0, t.push({\n        contexts: a.currentContext,\n        node: e\n      })) : e.inputNames.every(function (e) {\n        return !!getTensor(e, r, a);\n      }) && (n[o] = !0, t.push({\n        contexts: a.currentContext,\n        node: e\n      })));\n    });\n  }, e.prototype.dispose = function () {\n    var e = this;\n    Object.keys(this.weightMap).forEach(function (t) {\n      return e.weightMap[t].forEach(function (e) {\n        return e.dispose();\n      });\n    });\n  }, e.prototype.checkInputShapeAndType = function (e) {\n    var t = this;\n    Object.keys(e).forEach(function (a) {\n      var r = e[a],\n          n = parseNodeName(a)[0],\n          s = t.graph.nodes[n];\n\n      if (s.attrParams.shape && s.attrParams.shape.value) {\n        var o = s.attrParams.shape.value,\n            p = o.length === r.shape.length && r.shape.every(function (e, t) {\n          return -1 === o[t] || o[t] === e;\n        });\n        util.assert(p, function () {\n          return \"The shape of dict['\" + s.name + \"'] provided in model.execute(dict) must be [\" + o + \"], but was [\" + r.shape + \"]\";\n        });\n      }\n\n      s.attrParams.dtype && s.attrParams.dtype.value && util.assert(r.dtype === s.attrParams.dtype.value, function () {\n        return \"The dtype of dict['\" + s.name + \"'] provided in model.execute(dict) must be \" + s.attrParams.dtype.value + \", but was \" + r.dtype;\n      });\n    });\n  }, e.prototype.mapInputs = function (e) {\n    var t = {};\n\n    for (var a in e) {\n      if (null != this._signature && null != this._signature.inputs && null != this._signature.inputs[a]) t[this._signature.inputs[a].name] = e[a];else t[a] = e[a];\n    }\n\n    return t;\n  }, e.prototype.checkInputs = function (e) {\n    var t = this,\n        a = Object.keys(e).filter(function (e) {\n      var a = parseNodeName(e)[0];\n      return null == t.graph.nodes[a];\n    });\n    if (a.length > 0) throw new Error(\"The dict provided in model.execute(dict) has keys: [\" + a + \"] that are not part of graph\");\n  }, e.prototype.mapOutputs = function (e) {\n    var t = this;\n    return e.map(function (e) {\n      return null != t._signature && null != t._signature.outputs && null != t._signature.outputs[e] ? t._signature.outputs[e].name : e;\n    }, {});\n  }, e.prototype.checkOutputs = function (e) {\n    var t = this;\n    e.forEach(function (e) {\n      var a = parseNodeName(e)[0];\n      if (!t.graph.nodes[a]) throw new Error(\"The output '\" + e + \"' is not found in the graph\");\n    });\n  }, e;\n}(),\n    TFHUB_SEARCH_PARAM = \"?tfjs-format=file\",\n    DEFAULT_MODEL_NAME = \"model.json\",\n    GraphModel = function () {\n  function e(e, t) {\n    void 0 === t && (t = {}), this.modelUrl = e, this.loadOptions = t, this.version = \"n/a\", null == t && (this.loadOptions = {});\n  }\n\n  return Object.defineProperty(e.prototype, \"modelVersion\", {\n    get: function () {\n      return this.version;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"inputNodes\", {\n    get: function () {\n      return this.executor.inputNodes;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"outputNodes\", {\n    get: function () {\n      return this.executor.outputNodes;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"inputs\", {\n    get: function () {\n      return this.executor.inputs;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"outputs\", {\n    get: function () {\n      return this.executor.outputs;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"weights\", {\n    get: function () {\n      return this.executor.weightMap;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.findIOHandler = function () {\n    var e = this.modelUrl;\n    if (null != e.load) this.handler = e;else if (null != this.loadOptions.requestInit) this.handler = io.browserHTTPRequest(e, this.loadOptions);else {\n      var t = io.getLoadHandlers(e, this.loadOptions.onProgress);\n      if (0 === t.length) t.push(io.browserHTTPRequest(e, this.loadOptions));else if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") load handlers for URL '\" + [e] + \"'\");\n      this.handler = t[0];\n    }\n  }, e.prototype.load = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e, t, a, r;\n      return __generator(this, function (n) {\n        switch (n.label) {\n          case 0:\n            if (this.findIOHandler(), null == this.handler.load) throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n            return e = this, [4, this.handler.load()];\n\n          case 1:\n            return e.artifacts = n.sent(), t = this.artifacts.modelTopology, a = {}, null != this.artifacts.userDefinedMetadata && (a = this.artifacts.userDefinedMetadata.signature), this.version = t.versions.producer + \".\" + t.versions.minConsumer, r = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t, a)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), [2, !0];\n        }\n      });\n    });\n  }, e.prototype.save = function (e, t) {\n    return __awaiter(this, void 0, void 0, function () {\n      var t;\n      return __generator(this, function (a) {\n        if (\"string\" == typeof e) {\n          if (0 === (t = io.getSaveHandlers(e)).length) throw new Error(\"Cannot find any save handlers for URL '\" + e + \"'\");\n          if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") save handlers for URL '\" + e + \"'\");\n          e = t[0];\n        }\n\n        if (null == e.save) throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");\n        return [2, e.save(this.artifacts)];\n      });\n    });\n  }, e.prototype.predict = function (e, t) {\n    return this.execute(e, this.outputNodes);\n  }, e.prototype.normalizeInputs = function (e) {\n    if (!(e instanceof Tensor || Array.isArray(e))) return e;\n    if ((e = Array.isArray(e) ? e : [e]).length !== this.inputNodes.length) throw new Error(\"Input tensor count mismatch,the graph model has \" + this.inputNodes.length + \" placeholders, while there are \" + e.length + \" input tensors.\");\n    return this.inputNodes.reduce(function (t, a, r) {\n      return t[a] = e[r], t;\n    }, {});\n  }, e.prototype.normalizeOutputs = function (e) {\n    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];\n  }, e.prototype.execute = function (e, t) {\n    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);\n    var a = this.executor.execute(e, t);\n    return a.length > 1 ? a : a[0];\n  }, e.prototype.executeAsync = function (e, t) {\n    return __awaiter(this, void 0, void 0, function () {\n      var a;\n      return __generator(this, function (r) {\n        switch (r.label) {\n          case 0:\n            return e = this.normalizeInputs(e), t = this.normalizeOutputs(t), [4, this.executor.executeAsync(e, t)];\n\n          case 1:\n            return [2, (a = r.sent()).length > 1 ? a : a[0]];\n        }\n      });\n    });\n  }, e.prototype.convertTensorMapToTensorsMap = function (e) {\n    return Object.keys(e).reduce(function (t, a) {\n      return t[a] = [e[a]], t;\n    }, {});\n  }, e.prototype.dispose = function () {\n    this.executor.dispose();\n  }, e;\n}();\n\nfunction loadGraphModel(e, t) {\n  return void 0 === t && (t = {}), __awaiter(this, void 0, void 0, function () {\n    var a;\n    return __generator(this, function (r) {\n      switch (r.label) {\n        case 0:\n          if (null == e) throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");\n          return null == t && (t = {}), t.fromTFHub && null == e.load && (e.endsWith(\"/\") || (e += \"/\"), e = \"\" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM), [4, (a = new GraphModel(e, t)).load()];\n\n        case 1:\n          return r.sent(), [2, a];\n      }\n    });\n  });\n}\n\nvar version = \"1.7.4\";\nexport { GraphModel, loadGraphModel, deregisterOp, registerOp, version as version_converter };","map":{"version":3,"sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/executor/tensor_array.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/operation_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../src/version.ts"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","registerOp","name","opFunc","opMapper","tfOpName","category","inputs","attrs","customExecutor","getRegisteredOp","deregisterOp","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","inputIndexStart","undefined","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","data","Array","prototype","call","dataSync","attrParam","attrParams","value","tensorsMap","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","inputName","parseNodeName","lastIndexOf","substring","Number","split","arr","size","res","i","length","push","json","tfName","notSupported","defaultValue","tfDeprecatedName","Object","OperationMapper","this","_instance","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","opMappers","reduce","mapper","signature","placeholders","weights","nodes","_this","mapNode","op","startsWith","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","entries","prev","curr","attr","newNode","input","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","Error","decodeBase64","text","global","env","atob","Buffer","toString","parseStringParam","s","keepCase","isArray","String","fromCharCode","apply","toLowerCase","def","b","parseInt","parseDtypeParam","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","f","getInput","getAttr","NodeValueImpl","tensor","executeOp","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.divNoNan","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","TensorArray","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","nextId","closed_","tensors","dispose","tensorWithState","cleared","read","indices","t","assertShapesMatchAllowUndefinedSize","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","shapeA","shapeB","errorMessagePrefix","util","assert","shapesEqualAllowUndefinedSize","n1","n2","clone","pred","data_1","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","_b","biasArg","preluArg","tfc.fused","conv2d","depthwiseConv2d","x","filter","strides","bias","activation","preluActivationWeights","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","includeBatchInIndex","_c","tfc.avgPool3d","tfc.maxPool3d","tfc.fill","stop_1","num","tfc.linspace","logits","numSamples","seed","tfc.multinomial","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","result","tfc.image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","nonMaxSuppressionAsync","condition","asType","tfc.whereAsync","tfc.setdiff1dAsync","k","sorted","tfc.topk","values","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","matMul","a","transposeA","transposeB","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","n","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","tfc.tidy","squeezedShape","squeeze","mapped","sameShape","tfc.util","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","control.executeOp","dynamic.executeOp","Promise","then","frameName","iterationId","rootContext","weightMap","tensorArrayMap","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","frontier","pop","isControlFlow","isDynamicShape","has","add","indexOf","getNodesInTopologicalOrder","executionInfo","weight","orderedNodes","child","every","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","Map","GraphExecutor","_weightMap","weightIds","_inputs","_outputs","_signature","sortedInputs","sort","sortedOutputs","SEPERATOR","outNames","inNames","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","count","executeWithControlFlow","results","outputIds","inputIds","isDisposed","_a","currentContext","added","promises","processStack","all","missingOutputs","alternativeMsg","item","currentContext_1","processChildNodes","this_1","childNode","some","shape_1","match","notInGraph","normalizedName","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","version","executor","modelUrl","loadOptions","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","onProgress","findIOHandler","artifacts","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","executeAsync","newMap","loadGraphModel","options","fromTFHub","endsWith","model"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [scalar(0)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Conv1D': {\n      const stride =\n          getParamValue('stride', node, tensorMap, context) as number;\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilation =\n          getParamValue('dilation', node, tensorMap, context) as number;\n      return [tfc.conv1d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n          stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n          dilation)];\n    }\n    case 'Conv2D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv2d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case '_FusedConv2D':\n    case 'FusedDepthwiseConv2dNative': {\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n              'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n              'one extra argument: bias.');\n        }\n      }\n      if (isBatchNorm) {\n        throw new Error(\n            'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n      }\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const kernelMethod = node.op === '_FusedConv2D' ?\n          tfc.fused.conv2d :\n          tfc.fused.depthwiseConv2d;\n      return [kernelMethod({\n        x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n            tfc.Tensor4D,\n        filter: getParamValue('filter', node, tensorMap, context) as\n            tfc.Tensor4D,\n        strides: [stride[1], stride[2]],\n        pad: pad as 'valid' | 'same',\n        dataFormat: dataFormat as 'NHWC' | 'NCHW',\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n    }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose': {\n      const shape = getParamValue(\n                        'outputShape', node, tensorMap,\n                        context) as [number, number, number] |\n          [number, number, number, number];\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      return [tfc.conv2dTranspose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n    }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n\n      return [tfc.depthwiseConv2d(\n          getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case 'Conv3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n              tfc.Tensor<tfc.Rank.R5>,\n          getParamValue('filter', node, tensorMap, context) as\n              tfc.Tensor<tfc.Rank.R5>,\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n          dataFormat as 'NDHWC' | 'NCDHW',\n          [dilations[1], dilations[2], dilations[3]])];\n    }\n    case 'AvgPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPoolWithArgmax': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n      const includeBatchInIndex =\n          getParamValue('includeBatchInIndex', node, tensorMap, context) as\n          boolean;\n      const {result, indexes} = tfc.maxPoolWithArgmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same', includeBatchInIndex);\n      return [result, indexes];\n    }\n    case 'AvgPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n\n      if (node.op === 'NonMaxSuppressionV5') {\n        const softNmsSigma =\n            getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n            boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n            iouThreshold, scoreThreshold, softNmsSigma);\n\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      const condition =\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool');\n      const result = [await tfc.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select':\n    case 'SelectV2': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map(node => node.signatureKey || node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    inputs = this.mapInputs(inputs);\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    this.artifacts = await this.handler.load();\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.7.4';\nexport {version};\n"]},"metadata":{},"sourceType":"module"}