{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n\n} // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n\n}\n\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator; // A partial string at the end of an upstream chunk\n\n    this.carryover = '';\n  }\n\n  summary() {\n    return \"\".concat(this.upstream.summary(), \" -> Split('\").concat(this.separator, \"')\");\n  }\n\n  async pump() {\n    const chunkResult = await this.upstream.next();\n\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      } // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n\n\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n\n    const lines = chunkResult.value.split(this.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}