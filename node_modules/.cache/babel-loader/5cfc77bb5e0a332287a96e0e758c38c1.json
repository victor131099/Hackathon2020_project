{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/scan/components/Camera.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Measure from \"react-measure\";\nimport { useUserMedia } from \"./useUserMedia\";\nimport { useCardRatio } from \"./userCardRatio\";\nimport { useOffsets } from \"./useOffSet\";\nimport { Video, Canvas, Wrapper, Container, Flash, Overlay, Button } from \"./styles\";\nimport { withRouter } from \"react-router-dom\";\nimport { OmitProps } from \"antd/lib/transfer/renderListBody\";\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: {\n    facingMode: \"environment\"\n  }\n};\n\nfunction Camera(props) {\n  const canvasRef = useRef();\n  const videoRef = useRef();\n\n  const _useState = useState({\n    width: 0,\n    height: 0\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        container = _useState2[0],\n        setContainer = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVideoPlaying = _useState4[0],\n        setIsVideoPlaying = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isCanvasEmpty = _useState6[0],\n        setIsCanvasEmpty = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isFlashing = _useState8[0],\n        setIsFlashing = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        linkBlob = _useState10[0],\n        setLinkBlob = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        emask_data = _useState12[0],\n        setEmaskData = _useState12[1];\n\n  const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n\n  const _useCardRatio = useCardRatio(1.586),\n        _useCardRatio2 = _slicedToArray(_useCardRatio, 2),\n        aspectRatio = _useCardRatio2[0],\n        calculateRatio = _useCardRatio2[1];\n\n  const offsets = useOffsets(videoRef.current && videoRef.current.videoWidth, videoRef.current && videoRef.current.videoHeight, container.width, container.height);\n\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream;\n  }\n\n  function handleResize(contentRect) {\n    setContainer({\n      width: contentRect.bounds.width,\n      height: Math.round(contentRect.bounds.width / aspectRatio)\n    });\n  }\n\n  function handleCanPlay() {\n    calculateRatio(videoRef.current.videoHeight, videoRef.current.videoWidth);\n    setIsVideoPlaying(true);\n    videoRef.current.play();\n  }\n\n  function handleCapture() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.drawImage(videoRef.current, offsets.x, offsets.y, container.width, container.height, 0, 0, container.width, container.height);\n    var link = document.createElement(\"a\");\n    link.download = \"image.png\";\n    canvasRef.current.toBlob(function (blob) {\n      {\n        link.href = URL.createObjectURL(blob);\n        console.log(blob);\n        setLinkBlob(link.href);\n        console.log(link.href); // this line should be here\n      }\n    }, \"image/png\", 1);\n    setIsCanvasEmpty(false);\n    setIsFlashing(true);\n  }\n\n  function handleClear() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    setIsCanvasEmpty(false); // onClear();\n  }\n\n  useEffect(() => {\n    console.log(props.history.location.state);\n    fetch(\"https://fhrs5atn73.execute-api.ap-southeast-2.amazonaws.com/dev\").then(response => response.json()).then(data => setEmaskData(data));\n    setTimeout(() => {\n      if (isVideoPlaying) {\n        if (isCanvasEmpty) {\n          handleCapture();\n          handleClear();\n\n          for (var i = 0; i < emask_data.length; i++) {\n            if (emask_data[i] === props.history.location.state) {\n              console.log(\"correct\");\n              var new_emask = emask_data;\n              new_emask[i].status = \"ALERTED\";\n              setEmaskData(new_emask);\n            }\n          }\n        }\n      }\n    }, 2000);\n  });\n\n  if (!mediaStream) {\n    return null;\n  }\n\n  return React.createElement(Measure, {\n    bounds: true,\n    onResize: handleResize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, ({\n    measureRef\n  }) => React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Container, {\n    ref: measureRef,\n    maxHeight: videoRef.current && videoRef.current.videoHeight,\n    maxWidth: videoRef.current && videoRef.current.videoWidth,\n    style: {\n      height: \"\".concat(container.height, \"px\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Video, {\n    ref: videoRef,\n    hidden: !isVideoPlaying,\n    onCanPlay: handleCanPlay,\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    style: {\n      top: \"-\".concat(offsets.y, \"px\"),\n      left: \"-\".concat(offsets.x, \"px\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(Overlay, {\n    hidden: !isVideoPlaying,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }), React.createElement(Canvas, {\n    ref: canvasRef,\n    width: container.width,\n    height: container.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(Flash, {\n    flash: isFlashing,\n    onAnimationEnd: () => setIsFlashing(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })), isVideoPlaying && React.createElement(Button, {\n    onClick: handleCapture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Take a picture\"), !isCanvasEmpty && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Preview\"), React.createElement(\"img\", {\n    src: linkBlob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }))));\n}\n\nexport default withRouter(Camera);","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/scan/components/Camera.js"],"names":["React","useState","useRef","useEffect","Measure","useUserMedia","useCardRatio","useOffsets","Video","Canvas","Wrapper","Container","Flash","Overlay","Button","withRouter","OmitProps","CAPTURE_OPTIONS","audio","video","facingMode","Camera","props","canvasRef","videoRef","width","height","container","setContainer","isVideoPlaying","setIsVideoPlaying","isCanvasEmpty","setIsCanvasEmpty","isFlashing","setIsFlashing","linkBlob","setLinkBlob","emask_data","setEmaskData","mediaStream","aspectRatio","calculateRatio","offsets","current","videoWidth","videoHeight","srcObject","handleResize","contentRect","bounds","Math","round","handleCanPlay","play","handleCapture","context","getContext","drawImage","x","y","link","document","createElement","download","toBlob","blob","href","URL","createObjectURL","console","log","handleClear","clearRect","history","location","state","fetch","then","response","json","data","setTimeout","i","length","new_emask","status","measureRef","top","left","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport Measure from \"react-measure\";\nimport { useUserMedia } from \"./useUserMedia\";\nimport { useCardRatio } from \"./userCardRatio\";\nimport { useOffsets } from \"./useOffSet\";\nimport {\n  Video,\n  Canvas,\n  Wrapper,\n  Container,\n  Flash,\n  Overlay,\n  Button\n} from \"./styles\";\nimport { withRouter } from \"react-router-dom\";\nimport { OmitProps } from \"antd/lib/transfer/renderListBody\";\n\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: { facingMode: \"environment\" }\n};\n\nfunction Camera(props) {\n  const canvasRef = useRef();\n  const videoRef = useRef();\n\n  const [container, setContainer] = useState({ width: 0, height: 0 });\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [isCanvasEmpty, setIsCanvasEmpty] = useState(true);\n  const [isFlashing, setIsFlashing] = useState(false);\n  const [linkBlob, setLinkBlob] = useState(\"\");\n  const [emask_data, setEmaskData] = useState([])\n  const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n  const [aspectRatio, calculateRatio] = useCardRatio(1.586);\n  \n  const offsets = useOffsets(videoRef.current && videoRef.current.videoWidth,videoRef.current && videoRef.current.videoHeight,container.width,container.height);\n\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream;\n  }\n \n\n  function handleResize(contentRect) {\n    setContainer({\n      width: contentRect.bounds.width,\n      height: Math.round(contentRect.bounds.width / aspectRatio)\n    });\n  }\n\n  function handleCanPlay() {\n    calculateRatio(videoRef.current.videoHeight, videoRef.current.videoWidth);\n    setIsVideoPlaying(true);\n    videoRef.current.play();\n  }\n\n  function handleCapture() {\n    const context = canvasRef.current.getContext(\"2d\");\n\n    context.drawImage(\n      videoRef.current,\n      offsets.x,\n      offsets.y,\n      container.width,\n      container.height,\n      0,\n      0,\n      container.width,\n      container.height\n    );\n    var link = document.createElement(\"a\");\n  link.download = \"image.png\";\n    canvasRef.current.toBlob(function(blob){{\n        link.href = URL.createObjectURL(blob);\n        console.log(blob);\n        setLinkBlob(link.href)\n        console.log(link.href); // this line should be here\n      }}, \"image/png\", 1);\n    setIsCanvasEmpty(false);\n    setIsFlashing(true);\n  }\n\n  function handleClear() {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    setIsCanvasEmpty(false);\n    // onClear();\n  }\n  useEffect(() => { \n    console.log(props.history.location.state)\n    fetch(\"https://fhrs5atn73.execute-api.ap-southeast-2.amazonaws.com/dev\")\n        .then(response => response.json())\n        .then(data => setEmaskData(data))  \n    setTimeout(() => { if (isVideoPlaying){\n      if(isCanvasEmpty){\n        handleCapture();\n        handleClear()\n        for(var i =0 ; i< emask_data.length; i++){\n          if(emask_data[i] === props.history.location.state){\n            console.log(\"correct\")\n            var new_emask = emask_data;\n            new_emask[i].status = \"ALERTED\"\n            setEmaskData(new_emask)\n          }\n        }\n      }\n      \n      \n     \n    }}, 2000)\n      \n    }\n  );\n\n\n\n  if (!mediaStream) {\n    return null;\n  }\n\n  return (\n    <Measure bounds onResize={handleResize}>\n      {({ measureRef }) => (\n        <Wrapper>\n          <Container\n            ref={measureRef}\n            maxHeight={videoRef.current && videoRef.current.videoHeight}\n            maxWidth={videoRef.current && videoRef.current.videoWidth}\n            style={{\n              height: `${container.height}px`\n            }}\n          >\n            <Video\n              ref={videoRef}\n              hidden={!isVideoPlaying}\n              onCanPlay={handleCanPlay}\n              autoPlay\n              playsInline\n              muted\n              style={{\n                top: `-${offsets.y}px`,\n                left: `-${offsets.x}px`\n              }}\n            />\n\n            <Overlay hidden={!isVideoPlaying} />\n\n            <Canvas\n              ref={canvasRef}\n              width={container.width}\n              height={container.height}\n            />\n\n            <Flash\n              flash={isFlashing}\n              onAnimationEnd={() => setIsFlashing(false)}\n            />\n          </Container>\n\n          {isVideoPlaying && (\n            <Button  onClick={handleCapture }>\n               Take a picture\n            </Button>\n          )}\n          {!isCanvasEmpty && \n            <div>\n            <h2 style= {{textAlign:\"center\"}}>Preview</h2>\n            <img src = {linkBlob}/>\n            </div>\n          }\n          \n\n        </Wrapper>\n      )}\n    </Measure>\n  );\n}\nexport default withRouter(Camera)"]},"metadata":{},"sourceType":"module"}