{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/AutoComplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Icon, Input, Button } from \"antd\";\n\nclass Autocomplete extends Component {\n  componentDidMount() {}\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const suggestions = this.props.suggestions;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      const suggestedValue = e.currentTarget.value.split('-')[0]; // if (this.state.clickable ==true){\n      //   localStorage.setItem('userInput', suggestedValue);\n      //   console.log(\"hello\")\n      //   console.log(suggestedValue)\n      // }\n      // console.log(e.currentTarget.value)\n\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: suggestedValue\n      });\n    };\n\n    this.onClick = e => {\n      // Update the user input and reset the rest of the state\n      console.log(\"world\");\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText.split(\"-\")[0],\n        clickable: true\n      }); // localStorage.setItem('userInput', this.state.userInput);\n      // console.log(\"hello\")\n      // console.log(this.state.userInput)\n    };\n\n    this.onKeyDown = e => {\n      const _this$state = this.state,\n            activeSuggestion = _this$state.activeSuggestion,\n            filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        if (this.state.clickable == true) {\n          localStorage.setItem('userInput', suggestedValue);\n          console.log(\"hello\");\n          console.log(suggestedValue);\n        }\n\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestionuggestions, you're on your own! list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      clickable: false\n    };\n  } // Event fired when the input value is changed\n\n\n  render() {\n    const onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown;\n    let suggestionsListComponent;\n\n    if (this.state.showSuggestions == true && this.state.userInput != \"\") {\n      if (this.state.filteredSuggestions.length) {\n        suggestionsListComponent = //   <ul class=\"suggestions\">\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, this.state.filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === this.state.activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return React.createElement(\"div\", {\n            className: className,\n            key: suggestion.name,\n            onClick: onClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"search\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }), \" \" + suggestion.name + \"-\" + suggestion.type);\n        }));\n      } else {\n        suggestionsListComponent = React.createElement(\"div\", {\n          className: \"no-suggestions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, \"Not Found\"));\n      }\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: this.state.userInput,\n      placeholder: \"Search person\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/AutoComplete.js"],"names":["React","Component","Fragment","PropTypes","Icon","Input","Button","Autocomplete","componentDidMount","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","name","toLowerCase","indexOf","suggestedValue","split","setState","activeSuggestion","showSuggestions","onClick","console","log","innerText","clickable","onKeyDown","state","keyCode","localStorage","setItem","length","render","suggestionsListComponent","map","index","className","type","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Icon, Input, Button} from \"antd\"\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n  componentDidMount () {\n    \n    \n   \n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestionuggestions, you're on your own! list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      clickable: false\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    const suggestedValue=e.currentTarget.value.split('-')[0];\n    \n    // if (this.state.clickable ==true){\n    //   localStorage.setItem('userInput', suggestedValue);\n    //   console.log(\"hello\")\n    //   console.log(suggestedValue)\n   \n    // }\n    // console.log(e.currentTarget.value)\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: suggestedValue,\n     \n    });\n    \n   \n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    console.log(\"world\")\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText.split(\"-\")[0],\n      clickable:true\n    });\n    // localStorage.setItem('userInput', this.state.userInput);\n    // console.log(\"hello\")\n    // console.log(this.state.userInput)\n   \n\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    \n    const { activeSuggestion, filteredSuggestions } = this.state;\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n         if (this.state.clickable ==true){\n        localStorage.setItem('userInput', suggestedValue);\n        console.log(\"hello\")\n        console.log(suggestedValue)\n   \n      }\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    \n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n    \n    \n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n    //   state: {\n    //     activeSuggestion,\n    //     filteredSuggestions,\n    //     showSuggestions,\n    //     userInput\n    //   }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (this.state.showSuggestions== true && this.state.userInput != \"\") {\n      if (this.state.filteredSuggestions.length) {\n        suggestionsListComponent = (\n        //   <ul class=\"suggestions\">\n        <div>\n            {this.state.filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === this.state.activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                \n                <div className={className}\n                key = {suggestion.name}\n           \n                onClick={onClick}>\n                <Icon type = \"search\"/>\n                \n                {\" \"+ suggestion.name +\"-\" +suggestion.type}\n                </div>\n                \n                  \n                \n              );\n            })}\n        </div>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div className=\"no-suggestions\">\n            <em>Not Found</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n        <Input\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={this.state.userInput}\n          placeholder= \"Search person\"\n        />\n       \n       \n        {suggestionsListComponent}\n        \n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}