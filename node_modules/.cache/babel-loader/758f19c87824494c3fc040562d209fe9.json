{"ast":null,"code":"import _slicedToArray from\"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{defineLocale}from\"moment\";export function useOffsets(vWidth,vHeight,cWidth,cHeight){var _useState=useState({x:0,y:0}),_useState2=_slicedToArray(_useState,2),offsets=_useState2[0],setOffsets=_useState2[1];useEffect(function(){if(vWidth&&vHeight&&cWidth&&cHeight){var x=vWidth>cWidth?Math.round((vWidth-cWidth)/2):0;var y=vHeight>cHeight?Math.round((vHeight-cHeight)/2):0;setOffsets({x:x,y:y});}},[vWidth,vHeight,cWidth,cHeight]);return offsets;}","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/scan/components/useOffSet.js"],"names":["useState","useEffect","defineLocale","useOffsets","vWidth","vHeight","cWidth","cHeight","x","y","offsets","setOffsets","Math","round"],"mappings":"oHAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,YAAT,KAA6B,QAA7B,CAEA,MAAQ,SAASC,CAAAA,UAAT,CAAoBC,MAApB,CAA4BC,OAA5B,CAAqCC,MAArC,CAA6CC,OAA7C,CAAsD,eAC9BP,QAAQ,CAAC,CAAEQ,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAD,CADsB,wCACrDC,OADqD,eAC5CC,UAD4C,eAG5DV,SAAS,CAAC,UAAM,CACd,GAAIG,MAAM,EAAIC,OAAV,EAAqBC,MAArB,EAA+BC,OAAnC,CAA4C,CAC1C,GAAMC,CAAAA,CAAC,CAAGJ,MAAM,CAAGE,MAAT,CACNM,IAAI,CAACC,KAAL,CAAW,CAACT,MAAM,CAAGE,MAAV,EAAoB,CAA/B,CADM,CAEN,CAFJ,CAIA,GAAMG,CAAAA,CAAC,CAAGJ,OAAO,CAAGE,OAAV,CACNK,IAAI,CAACC,KAAL,CAAW,CAACR,OAAO,CAAGE,OAAX,EAAsB,CAAjC,CADM,CAEN,CAFJ,CAIAI,UAAU,CAAC,CAAEH,CAAC,CAADA,CAAF,CAAKC,CAAC,CAADA,CAAL,CAAD,CAAV,CACD,CACF,CAZQ,CAYN,CAACL,MAAD,CAASC,OAAT,CAAkBC,MAAlB,CAA0BC,OAA1B,CAZM,CAAT,CAcA,MAAOG,CAAAA,OAAP,CACD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { defineLocale } from \"moment\";\n\nexport  function useOffsets(vWidth, vHeight, cWidth, cHeight) {\n  const [offsets, setOffsets] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (vWidth && vHeight && cWidth && cHeight) {\n      const x = vWidth > cWidth\n        ? Math.round((vWidth - cWidth) / 2)\n        : 0;\n\n      const y = vHeight > cHeight\n        ? Math.round((vHeight - cHeight) / 2)\n        : 0;\n\n      setOffsets({ x, y });\n    }\n  }, [vWidth, vHeight, cWidth, cHeight]);\n\n  return offsets;\n}"]},"metadata":{},"sourceType":"module"}