{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\n\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n  util.assert(xShape.length === dy.rank, () => \"Length of inShape \" + \"(\".concat(xShape.length, \") and rank of dy (\").concat(dy.rank, \") must match\"));\n  let xShape5D = xShape;\n  let dy5D = dy;\n  let reshapedTo5D = false;\n\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(xShape5D.length === 5, () => \"Error in conv3dDerInput: inShape must be length 5, but got length \" + \"\".concat(xShape5D.length, \".\"));\n  util.assert(dy5D.rank === 5, () => \"Error in conv3dDerInput: dy must be rank 5, but got \" + \"rank \".concat(dy5D.rank));\n  util.assert(filter.rank === 5, () => \"Error in conv3dDerInput: filter must be rank 5, but got \" + \"rank \".concat(filter.rank));\n  util.assert(inDepth === filter.shape[3], () => \"Error in conv3dDerInput: depth of input (\".concat(inDepth, \") must \") + \"match input depth for filter \".concat(filter.shape[3], \".\"));\n  util.assert(outDepth === filter.shape[4], () => \"Error in conv3dDerInput: depth of output (\".concat(outDepth, \") must \") + \"match output depth for filter \".concat(filter.shape[4], \".\"));\n\n  const forward = backend => {\n    const dilations = 1;\n    const convInfo = conv_util.computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);\n    return backend.conv3dDerInput(dy5D, filter, convInfo);\n  };\n\n  const inputs = {\n    dy: dy5D\n  };\n  const attrs = {\n    pad\n  };\n  const res = ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropInputV2, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const conv3DBackpropInput = op({\n  conv3DBackpropInput_\n});","map":null,"metadata":{},"sourceType":"module"}