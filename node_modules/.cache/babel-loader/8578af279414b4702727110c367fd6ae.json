{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert an ArrayBuffer to a Buffer.\n */\n\nfunction toBuffer(ab) {\n  var view = new Uint8Array(ab);\n  return Buffer.from(view); // copies data\n}\n\nexports.toBuffer = toBuffer;\n/**\n * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n *\n * If the input is an Array of Buffers, they will be concatenated in the\n * specified order to form the output ArrayBuffer.\n */\n\nfunction toArrayBuffer(buf) {\n  if (Array.isArray(buf)) {\n    // An Array of Buffers.\n    var totalLength = 0;\n\n    for (var _i = 0, buf_1 = buf; _i < buf_1.length; _i++) {\n      var buffer = buf_1[_i];\n      totalLength += buffer.length;\n    }\n\n    var ab = new ArrayBuffer(totalLength);\n    var view = new Uint8Array(ab);\n    var pos = 0;\n\n    for (var _a = 0, buf_2 = buf; _a < buf_2.length; _a++) {\n      var buffer = buf_2[_a];\n      pos += buffer.copy(view, pos);\n    }\n\n    return ab;\n  } else {\n    // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n}\n\nexports.toArrayBuffer = toArrayBuffer; // TODO(cais): Use explicit tf.io.ModelArtifactsInfo return type below once it\n// is available.\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\n\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.modelTopology), 'utf8'),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.weightSpecs), 'utf8'),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n\nexports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/node_modules/@tensorflow/tfjs-node-gpu/dist/io/io_utils.js"],"names":["Object","defineProperty","exports","value","toBuffer","ab","view","Uint8Array","Buffer","from","toArrayBuffer","buf","Array","isArray","totalLength","_i","buf_1","length","buffer","ArrayBuffer","pos","_a","buf_2","copy","slice","byteOffset","byteLength","getModelArtifactsInfoForJSON","modelArtifacts","modelTopology","Error","dateSaved","Date","modelTopologyType","modelTopologyBytes","JSON","stringify","weightSpecsBytes","weightSpecs","weightDataBytes","weightData"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;AAgBAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;AAGA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AAClB,MAAIC,IAAI,GAAG,IAAIC,UAAJ,CAAeF,EAAf,CAAX;AACA,SAAOG,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAP,CAFkB,CAEQ;AAC7B;;AACDJ,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACA;;;;;;;AAMA,SAASM,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACpB;AACA,QAAIG,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,KAAK,GAAGL,GAAzB,EAA8BI,EAAE,GAAGC,KAAK,CAACC,MAAzC,EAAiDF,EAAE,EAAnD,EAAuD;AACnD,UAAIG,MAAM,GAAGF,KAAK,CAACD,EAAD,CAAlB;AACAD,MAAAA,WAAW,IAAII,MAAM,CAACD,MAAtB;AACH;;AACD,QAAIZ,EAAE,GAAG,IAAIc,WAAJ,CAAgBL,WAAhB,CAAT;AACA,QAAIR,IAAI,GAAG,IAAIC,UAAJ,CAAeF,EAAf,CAAX;AACA,QAAIe,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,KAAK,GAAGX,GAAzB,EAA8BU,EAAE,GAAGC,KAAK,CAACL,MAAzC,EAAiDI,EAAE,EAAnD,EAAuD;AACnD,UAAIH,MAAM,GAAGI,KAAK,CAACD,EAAD,CAAlB;AACAD,MAAAA,GAAG,IAAIF,MAAM,CAACK,IAAP,CAAYjB,IAAZ,EAAkBc,GAAlB,CAAP;AACH;;AACD,WAAOf,EAAP;AACH,GAfD,MAgBK;AACD;AACA,WAAOM,GAAG,CAACO,MAAJ,CAAWM,KAAX,CAAiBb,GAAG,CAACc,UAArB,EAAiCd,GAAG,CAACc,UAAJ,GAAiBd,GAAG,CAACe,UAAtD,CAAP;AACH;AACJ;;AACDxB,OAAO,CAACQ,aAAR,GAAwBA,aAAxB,C,CACA;AACA;;AACA;;;;;;AAKA,SAASiB,4BAAT,CAAsCC,cAAtC,EAAsD;AAClD,MAAIA,cAAc,CAACC,aAAf,YAAwCV,WAA5C,EAAyD;AACrD,UAAM,IAAIW,KAAJ,CAAU,qDAAV,CAAN;AACH;;AACD,SAAO;AACHC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EADR;AAEHC,IAAAA,iBAAiB,EAAE,MAFhB;AAGHC,IAAAA,kBAAkB,EAAEN,cAAc,CAACC,aAAf,IAAgC,IAAhC,GAChB,CADgB,GAEhBrB,MAAM,CAACkB,UAAP,CAAkBS,IAAI,CAACC,SAAL,CAAeR,cAAc,CAACC,aAA9B,CAAlB,EAAgE,MAAhE,CALD;AAMHQ,IAAAA,gBAAgB,EAAET,cAAc,CAACU,WAAf,IAA8B,IAA9B,GACd,CADc,GAEd9B,MAAM,CAACkB,UAAP,CAAkBS,IAAI,CAACC,SAAL,CAAeR,cAAc,CAACU,WAA9B,CAAlB,EAA8D,MAA9D,CARD;AASHC,IAAAA,eAAe,EAAEX,cAAc,CAACY,UAAf,IAA6B,IAA7B,GACb,CADa,GAEbZ,cAAc,CAACY,UAAf,CAA0Bd;AAX3B,GAAP;AAaH;;AACDxB,OAAO,CAACyB,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert an ArrayBuffer to a Buffer.\n */\nfunction toBuffer(ab) {\n    var view = new Uint8Array(ab);\n    return Buffer.from(view); // copies data\n}\nexports.toBuffer = toBuffer;\n/**\n * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n *\n * If the input is an Array of Buffers, they will be concatenated in the\n * specified order to form the output ArrayBuffer.\n */\nfunction toArrayBuffer(buf) {\n    if (Array.isArray(buf)) {\n        // An Array of Buffers.\n        var totalLength = 0;\n        for (var _i = 0, buf_1 = buf; _i < buf_1.length; _i++) {\n            var buffer = buf_1[_i];\n            totalLength += buffer.length;\n        }\n        var ab = new ArrayBuffer(totalLength);\n        var view = new Uint8Array(ab);\n        var pos = 0;\n        for (var _a = 0, buf_2 = buf; _a < buf_2.length; _a++) {\n            var buffer = buf_2[_a];\n            pos += buffer.copy(view, pos);\n        }\n        return ab;\n    }\n    else {\n        // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n}\nexports.toArrayBuffer = toArrayBuffer;\n// TODO(cais): Use explicit tf.io.ModelArtifactsInfo return type below once it\n// is available.\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            Buffer.byteLength(JSON.stringify(modelArtifacts.modelTopology), 'utf8'),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            Buffer.byteLength(JSON.stringify(modelArtifacts.weightSpecs), 'utf8'),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\nexports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;\n"]},"metadata":{},"sourceType":"script"}