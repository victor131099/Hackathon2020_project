{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      perm\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    const values = cpuBackend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = cpuBackend.write(result, newShape, x.dtype);\n    return {\n      dataId,\n      shape: newShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQ,SAAR,QAAyD,uBAAzD;AAEA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,SAAQ,aAAR,QAA4B,kBAA5B;AAEA,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,KAF8B;AAG3C,EAAA,UAAU,EAAE,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,GAAD,KAA6B;AACvC,UAAM;AAAC,MAAA;AAAD,QAAM,MAAZ;AACA,UAAM;AAAC,MAAA;AAAD,QAAS,KAAf;AACA,UAAM,UAAU,GAAG,OAAnB;AAEA,IAAA,gBAAgB,CAAC,CAAD,EAAI,WAAJ,CAAhB;AAEA,UAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;AAEA,UAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,KAAV,CAA3B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAC,CAAC,KAAF,CAAQ,IAAI,CAAC,CAAD,CAAZ,CAAd;AACD;;AAED,UAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;AACA,UAAM,MAAM,GAAG,aAAa,CAAC,MAAD,EAAS,CAAC,CAAC,KAAX,EAAkB,CAAC,CAAC,KAApB,EAA2B,IAA3B,EAAiC,QAAjC,CAA5B;AAEA,UAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,QAAzB,EAAmC,CAAC,CAAC,KAArC,CAAf;AACA,WAAO;AAAC,MAAA,MAAD;AAAS,MAAA,KAAK,EAAE,QAAhB;AAA0B,MAAA,KAAK,EAAE,CAAC,CAAC;AAAnC,KAAP;AACD;AAtB0C,CAAtC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { perm } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'transpose');\n        const xRank = x.shape.length;\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = x.shape[perm[i]];\n        }\n        const values = cpuBackend.data.get(x.dataId).values;\n        const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n        const dataId = cpuBackend.write(result, newShape, x.dtype);\n        return { dataId, shape: newShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Transpose.js.map"]},"metadata":{},"sourceType":"module"}