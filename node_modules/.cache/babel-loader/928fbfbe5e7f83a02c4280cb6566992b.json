{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n */\n\n/** @doc {heading: 'Operations', subheading: 'Reduction'} */\n\nfunction max_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, 'x', 'max');\n\n  const forward = (backend, save) => {\n    const origAxes = util.parseAxisParam(axis, $x.shape);\n    let axes = origAxes;\n    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n    let maxInput = $x;\n\n    if (permutedAxes != null) {\n      maxInput = transpose($x, permutedAxes);\n      axes = axis_util.getInnerMostAxes(axes.length, maxInput.rank);\n    }\n\n    const y = backend.max(maxInput, axes);\n\n    if (permutedAxes != null) {\n      maxInput.dispose();\n    }\n\n    let res = y;\n\n    if (keepDims) {\n      const expandedShape = axis_util.expandShapeToKeepDim(res.shape, util.parseAxisParam(axis, $x.shape));\n      res = reshape(res, expandedShape);\n      y.dispose();\n    }\n\n    save([$x, res]);\n    return res;\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    reductionIndices: axis,\n    keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Max, attrs);\n}\n\nexport const max = op({\n  max_\n});","map":null,"metadata":{},"sourceType":"module"}