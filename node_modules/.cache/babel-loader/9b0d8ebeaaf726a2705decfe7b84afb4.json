{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n */\n\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {\n  util.assert(xShape.length === dy.rank, () => \"Length of inShape \" + \"(\".concat(xShape.length, \") and rank of dy (\").concat(dy.rank, \") must match\"));\n  let xShape4D = xShape;\n  let dy4D = dy;\n  let reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(xShape4D.length === 4, () => \"Error in conv2dDerInput: inShape must be length 4, but got length \" + \"\".concat(xShape4D.length, \".\"));\n  util.assert(dy4D.rank === 4, () => \"Error in conv2dDerInput: dy must be rank 4, but got \" + \"rank \".concat(dy4D.rank));\n  util.assert(filter.rank === 4, () => \"Error in conv2dDerInput: filter must be rank 4, but got \" + \"rank \".concat(filter.rank));\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filter.shape[2], () => \"Error in conv2dDerInput: depth of input (\".concat(inDepth, \") must \") + \"match input depth for filter \".concat(filter.shape[2], \".\"));\n  util.assert(outDepth === filter.shape[3], () => \"Error in conv2dDerInput: depth of output (\".concat(outDepth, \") must \") + \"match output depth for filter \".concat(filter.shape[3], \".\"));\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => \"Error in conv2dDerInput: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\"));\n  }\n\n  const forward = (backend, save) => {\n    const dilations = 1;\n    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n    const res = backend.conv2dDerInput(dy4D, filter, convInfo);\n    save([dy4D, filter]);\n    return res;\n  };\n\n  const inputs = {\n    dy: dy4D,\n    filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    inputShape: xShape4D\n  };\n  const res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Conv2DBackpropInput, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const conv2DBackpropInput = op({\n  conv2DBackpropInput_\n});","map":null,"metadata":{},"sourceType":"module"}