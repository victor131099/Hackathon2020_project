{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport async function resolveScalarsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  const promises = [];\n  const keys = [];\n  const scalarsToDispose = [];\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    } // Dispose the original scalar tensors.\n\n\n    dispose(scalarsToDispose);\n  }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}