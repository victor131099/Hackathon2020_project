{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors'; // tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\n\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\n\nexport function count(array, refernce) {\n  let counter = 0;\n\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\n\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\n\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\n\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\"Object \".concat(obj, \" passed to objectListUid without an id\"));\n    }\n\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n\n    retVal = \"\".concat(retVal).concat(Math.abs(obj.id));\n  }\n\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\n\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  } // Check for the underscore indicating snake_case\n\n\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n} // tslint:disable-next-line:no-any\n\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\n\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n\n    for (const field of fields) {\n      const value = config[field];\n\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\n\n\nexport function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n\n      if (fn == null) {\n        throw new ValueError(\"Unknown \".concat(printableModuleName, \": \").concat(identifier, \". \") + \"This may be due to one of the following reasons:\\n\" + \"1. The \".concat(printableModuleName, \" is defined in Python, in which \") + \"case it needs to be ported to TensorFlow.js or your JavaScript \" + \"code.\\n\" + \"2. The custom \".concat(printableModuleName, \" is defined in JavaScript, \") + \"but is not registered properly with \" + \"tf.serialization.registerClass().\"); // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\"\".concat(printableModuleName, \": Improper config format: \") + \"\".concat(JSON.stringify(config), \".\\n\") + \"'className' and 'config' must set.\");\n    }\n\n    const className = config['className'];\n    let cls, fromConfig;\n\n    if (className in customObjects) {\n      var _customObjects$classN = _slicedToArray(customObjects[className], 2);\n\n      cls = _customObjects$classN[0];\n      fromConfig = _customObjects$classN[1];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      var _GLOBAL_CUSTOM_OBJECT = _slicedToArray(_GLOBAL_CUSTOM_OBJECTS['className'], 2);\n\n      cls = _GLOBAL_CUSTOM_OBJECT[0];\n      fromConfig = _GLOBAL_CUSTOM_OBJECT[1];\n    } else if (className in moduleObjects) {\n      var _moduleObjects$classN = _slicedToArray(moduleObjects[className], 2);\n\n      cls = _moduleObjects$classN[0];\n      fromConfig = _moduleObjects$classN[1];\n    }\n\n    if (cls == null) {\n      throw new ValueError(\"Unknown \".concat(printableModuleName, \": \").concat(className, \". \") + \"This may be due to one of the following reasons:\\n\" + \"1. The \".concat(printableModuleName, \" is defined in Python, in which \") + \"case it needs to be ported to TensorFlow.js or your JavaScript \" + \"code.\\n\" + \"2. The custom \".concat(printableModuleName, \" is defined in JavaScript, \") + \"but is not registered properly with \" + \"tf.serialization.registerClass().\"); // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      } // Add the customObjects to config\n\n\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      } // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n\n\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\n\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\n\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\n\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n\n    default:\n      throw new ValueError(\"Invalid dtype: \".concat(dtype));\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\n\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n\n  if (xs.length !== ys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\n\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n\n  const out = []; // TODO(cais): Maybe improve performance by sorting.\n\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\n\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(\"Invalid value in obj: \".concat(JSON.stringify(obj)));\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\n\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(\"\".concat(value, \" is not a valid \").concat(label, \".  Valid values are \").concat(values, \" or null/undefined.\"));\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\n\nexport function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n} // tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\n\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => \"\".concat(name, \" is unexpectedly an empty array.\"));\n    value.forEach((v, i) => assertPositiveInteger(v, \"element \".concat(i + 1, \" of \").concat(name)));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => \"Expected \".concat(name, \" to be a positive integer, but got \") + \"\".concat(formatAsFriendlyString(value), \".\"));\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\n\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return \"\\\"\".concat(value, \"\\\"\");\n  } else {\n    return \"\".concat(value);\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\n\nexport function debounce(f, waitMs) {\n  let lastTime = util.now();\n  let lastResult;\n\n  const f2 = (...args) => {\n    const now = util.now();\n\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\n\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}