{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n    outputs.map(r => {\n      // Dangling promise here because we don't want to propagate up\n      // asynchronicity.\n      r.data().then(tensorVals => {\n        checkComputationForErrors(tensorVals, r.dtype, kernelName);\n      });\n    });\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile) {\n    const kernelName = kernelProfile.kernelName,\n          outputs = kernelProfile.outputs,\n          timeMs = kernelProfile.timeMs,\n          inputs = kernelProfile.inputs,\n          extraInfo = kernelProfile.extraInfo;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(\"Found \".concat(num, \" in the result of '\").concat(kernelName, \"'\"));\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(\"\".concat(timeMs, \"ms\"), 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += \"\".concat(name, \": \").concat(inputRank, \"D \").concat(inputRank > 0 ? inputShape : '', \" \");\n      }\n    }\n\n    console.log(\"%c\".concat(paddedName, \"\\t%c\").concat(time, \"\\t%c\").concat(rank, \"D \").concat(shape, \"\\t%c\").concat(size, \"\\t%c\").concat(inputShapesDescription, \"\\t%c\").concat(extraInfo), 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}