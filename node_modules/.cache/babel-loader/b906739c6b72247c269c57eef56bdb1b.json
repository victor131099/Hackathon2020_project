{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const x = inputs.x;\n    const reductionIndices = attrs.reductionIndices,\n          keepDims = attrs.keepDims;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n\n    if (maxInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const maxInputData = webglBackend.texData.get(maxInput.dataId);\n        maxInputData.values = maxInputValues;\n      } else {\n        maxInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n\n    const _backend_util$compute = backend_util.computeOutAndReduceShapes(maxInput.shape, axes),\n          _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n          maxOutShape = _backend_util$compute2[0],\n          reduceShape = _backend_util$compute2[1];\n\n    let outShape = maxOutShape;\n\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n\n    let out;\n\n    if (shouldExecuteOnCPU) {\n      const xTexData = webglBackend.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n      out = webglBackend.makeTensorInfo(outShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\n    }\n\n    if (maxInputIsTransposed) {\n      webglBackend.disposeData(maxInput.dataId);\n    }\n\n    return out;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}