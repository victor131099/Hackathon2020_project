{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Max':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Mean':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Min':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Sum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'All':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Any':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'ArgMax':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfc.argMax(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'ArgMin':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfc.argMin(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Prod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfc.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Cumsum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [tfc.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport const CATEGORY = 'reduction';","map":null,"metadata":{},"sourceType":"module"}