{"ast":null,"code":"import _slicedToArray from \"/home/victor/COVID-19-Coding-Fest/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const x = inputs.x;\n    const filterSize = attrs.filterSize,\n          strides = attrs.strides,\n          pad = attrs.pad,\n          includeBatchInIndex = attrs.includeBatchInIndex;\n    const webglBackend = backend;\n    util.assert(x.shape.length === 4, () => \"Error in maxPool: input must be rank 4 but got rank \".concat(x.shape.length, \".\"));\n    const dilations = [1, 1];\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\"));\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n\n    const _maxPoolWithArgmaxImp = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend),\n          _maxPoolWithArgmaxImp2 = _slicedToArray(_maxPoolWithArgmaxImp, 2),\n          result = _maxPoolWithArgmaxImp2[0],\n          indexes = _maxPoolWithArgmaxImp2[1];\n\n    return [result, indexes];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}