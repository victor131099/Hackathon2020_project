{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n\n    const indicesSnippet = \"getIndices(\".concat(indicesString, \")\");\n    let updatesString = '';\n\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n\n    const updatesSnippet = \"getUpdates(\".concat(updatesString, \")\");\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = \"\\n        \".concat(stridesType, \" strides = \").concat(stridesType, \"(\").concat(strides, \");\\n\\n        void main() {\\n          \").concat(dtype, \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \").concat(updateSize, \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \").concat(sliceDim, \"; j++) {\\n              int index = round(\").concat(indicesSnippet, \");\\n              flattenedIndex += index * \").concat(strideString, \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \").concat(updatesSnippet, \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \");\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}