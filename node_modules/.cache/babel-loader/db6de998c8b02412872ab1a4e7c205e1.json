{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\n\nvar ImageType;\n\n(function (ImageType) {\n  ImageType[\"JPEG\"] = \"jpeg\";\n  ImageType[\"PNG\"] = \"png\";\n  ImageType[\"GIF\"] = \"gif\";\n  ImageType[\"BMP\"] = \"BMP\";\n})(ImageType = exports.ImageType || (exports.ImageType = {}));\n/**\n * Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The JPEG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *     0: use the number of channels in the JPEG-encoded image.\n *     1: output a grayscale image.\n *     3: output an RGB image.\n * @param ratio An optional int. Defaults to 1. Downscaling ratio. It is used\n *     when image is type Jpeg.\n * @param fancyUpscaling An optional bool. Defaults to True. If true use a\n *     slower but nicer upscaling of the chroma planes. It is used when image is\n *     type Jpeg.\n * @param tryRecoverTruncated An optional bool. Defaults to False. If true try\n *     to recover an image from truncated input. It is used when image is type\n *     Jpeg.\n * @param acceptableFraction An optional float. Defaults to 1. The minimum\n *     required fraction of lines before a truncated input is accepted. It is\n *     used when image is type Jpeg.\n * @param dctMethod An optional string. Defaults to \"\". string specifying a hint\n *     about the algorithm used for decompression. Defaults to \"\" which maps to\n *     a system-specific default. Currently valid values are [\"INTEGER_FAST\",\n *     \"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\n *     library changes to a version that does not have that specific option.) It\n *     is used when image is type Jpeg.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3].\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\n\nfunction decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n\n  if (fancyUpscaling === void 0) {\n    fancyUpscaling = true;\n  }\n\n  if (tryRecoverTruncated === void 0) {\n    tryRecoverTruncated = false;\n  }\n\n  if (acceptableFraction === void 0) {\n    acceptableFraction = 1;\n  }\n\n  if (dctMethod === void 0) {\n    dctMethod = '';\n  }\n\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod).toInt();\n  });\n}\n\nexports.decodeJpeg = decodeJpeg;\n/**\n * Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The PNG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the PNG-encoded image.\n *      1: output a grayscale image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3/4].\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction decodePng(contents, channels, dtype) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n\n  if (dtype === void 0) {\n    dtype = 'int32';\n  }\n\n  tfjs_1.util.assert(dtype === 'int32', function () {\n    return 'decodeImage could only return Tensor of type `int32` for now.';\n  });\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodePng(contents, channels).toInt();\n  });\n}\n\nexports.decodePng = decodePng;\n/**\n * Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n * `int32`.\n *\n * @param contents The BMP-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the BMP-encoded image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 3/4].\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction decodeBmp(contents, channels) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeBmp(contents, channels).toInt();\n  });\n}\n\nexports.decodeBmp = decodeBmp;\n/**\n * Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.\n *\n * @param contents The GIF-encoded image in an Uint8Array.\n * @returns A 4D Tensor of dtype `int32` with shape [num_frames, height, width,\n *     3]. RGB channel order.\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction decodeGif(contents) {\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeGif(contents).toInt();\n  });\n}\n\nexports.decodeGif = decodeGif;\n/**\n * Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\n * decoded image. Supports BMP, GIF, JPEG and PNG formats.\n *\n * @param content The encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0, use the number of channels in\n *     the image. Number of color channels for the decoded image. It is used\n *     when image is type Png, Bmp, or Jpeg.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @param expandAnimations A boolean which controls the shape of the returned\n *     op's output. If True, the returned op will produce a 3-D tensor for PNG,\n *     JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\n *     not. If, False, the returned op will produce a 3-D tensor for all file\n *     types and will truncate animated GIFs to the first frame.\n * @returns A Tensor with dtype `int32` and a 3- or 4-dimensional shape,\n *     depending on the file type. For gif file the returned Tensor shape is\n *     [num_frames, height, width, 3], and for jpeg/png/bmp the returned Tensor\n *     shape is [height, width, channels]\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction decodeImage(content, channels, dtype, expandAnimations) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n\n  if (dtype === void 0) {\n    dtype = 'int32';\n  }\n\n  if (expandAnimations === void 0) {\n    expandAnimations = true;\n  }\n\n  tfjs_1.util.assert(dtype === 'int32', function () {\n    return 'decodeImage could only return Tensor of type `int32` for now.';\n  });\n  var imageType = getImageType(content); // The return tensor has dtype uint8, which is not supported in\n  // TensorFlow.js, casting it to int32 which is the default dtype for image\n  // tensor. If the image is BMP, JPEG or PNG type, expanding the tensors\n  // shape so it becomes Tensor4D, which is the default tensor shape for image\n  // ([batch,imageHeight,imageWidth, depth]).\n\n  switch (imageType) {\n    case ImageType.JPEG:\n      return decodeJpeg(content, channels);\n\n    case ImageType.PNG:\n      return decodePng(content, channels);\n\n    case ImageType.GIF:\n      // If not to expand animations, take first frame of the gif and return\n      // as a 3D tensor.\n      return tfjs_1.tidy(function () {\n        var img = decodeGif(content);\n        return expandAnimations ? img : img.slice(0, 1).squeeze([0]);\n      });\n\n    case ImageType.BMP:\n      return decodeBmp(content, channels);\n\n    default:\n      return null;\n  }\n}\n\nexports.decodeImage = decodeImage;\n/**\n * Encodes an image tensor to JPEG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param format An optional string from: \"\", \"grayscale\", \"rgb\".\n *     Defaults to \"\". Per pixel image format.\n *     - '': Use a default format based on the number of channels in the image.\n *     - grayscale: Output a grayscale JPEG image. The channels dimension of\n *       image must be 1.\n *     - rgb: Output an RGB JPEG image. The channels dimension of image must\n *       be 3.\n * @param quality An optional int. Defaults to 95. Quality of the compression\n *     from 0 to 100 (higher is better and slower).\n * @param progressive An optional bool. Defaults to False. If True, create a\n *     JPEG that loads progressively (coarse to fine).\n * @param optimizeSize An optional bool. Defaults to False. If True, spend\n *     CPU/RAM to reduce size with no quality change.\n * @param chromaDownsampling  An optional bool. Defaults to True.\n *     See http://en.wikipedia.org/wiki/Chroma_subsampling.\n * @param densityUnit An optional string from: \"in\", \"cm\". Defaults to \"in\".\n *     Unit used to specify x_density and y_density: pixels per inch ('in') or\n *     centimeter ('cm').\n * @param xDensity An optional int. Defaults to 300. Horizontal pixels per\n *     density unit.\n * @param yDensity An optional int. Defaults to 300. Vertical pixels per\n *     density unit.\n * @param xmpMetadata An optional string. Defaults to \"\". If not empty, embed\n *     this XMP metadata in the image header.\n * @returns The JPEG encoded data as an Uint8Array.\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction encodeJpeg(image, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n  if (format === void 0) {\n    format = '';\n  }\n\n  if (quality === void 0) {\n    quality = 95;\n  }\n\n  if (progressive === void 0) {\n    progressive = false;\n  }\n\n  if (optimizeSize === void 0) {\n    optimizeSize = false;\n  }\n\n  if (chromaDownsampling === void 0) {\n    chromaDownsampling = true;\n  }\n\n  if (densityUnit === void 0) {\n    densityUnit = 'in';\n  }\n\n  if (xDensity === void 0) {\n    xDensity = 300;\n  }\n\n  if (yDensity === void 0) {\n    yDensity = 300;\n  }\n\n  if (xmpMetadata === void 0) {\n    xmpMetadata = '';\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var backendEncodeImage;\n    return __generator(this, function (_a) {\n      nodejs_kernel_backend_1.ensureTensorflowBackend();\n\n      backendEncodeImage = function (imageData) {\n        return nodejs_kernel_backend_1.nodeBackend().encodeJpeg(imageData, image.shape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata);\n      };\n\n      return [2\n      /*return*/\n      , encodeImage(image, backendEncodeImage)];\n    });\n  });\n}\n\nexports.encodeJpeg = encodeJpeg;\n/**\n * Encodes an image tensor to PNG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param compression An optional int. Defaults to -1. Compression level.\n * @returns The PNG encoded data as an Uint8Array.\n */\n\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\n\nfunction encodePng(image, compression) {\n  if (compression === void 0) {\n    compression = 1;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var backendEncodeImage;\n    return __generator(this, function (_a) {\n      nodejs_kernel_backend_1.ensureTensorflowBackend();\n\n      backendEncodeImage = function (imageData) {\n        return nodejs_kernel_backend_1.nodeBackend().encodePng(imageData, image.shape, compression);\n      };\n\n      return [2\n      /*return*/\n      , encodeImage(image, backendEncodeImage)];\n    });\n  });\n}\n\nexports.encodePng = encodePng;\n\nfunction encodeImage(image, backendEncodeImage) {\n  return __awaiter(this, void 0, void 0, function () {\n    var encodedDataTensor, _a, _b, encodedPngData;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = backendEncodeImage;\n          _b = Uint8Array.bind;\n          return [4\n          /*yield*/\n          , image.data()];\n\n        case 1:\n          encodedDataTensor = _a.apply(void 0, [new (_b.apply(Uint8Array, [void 0, _c.sent()]))()]); // tslint:disable-next-line:no-any\n\n          return [4\n          /*yield*/\n          , encodedDataTensor.data()];\n\n        case 2:\n          encodedPngData = // tslint:disable-next-line:no-any\n          _c.sent()[0];\n          encodedDataTensor.dispose();\n          return [2\n          /*return*/\n          , encodedPngData];\n      }\n    });\n  });\n}\n/**\n * Helper function to get image type based on starting bytes of the image file.\n */\n\n\nfunction getImageType(content) {\n  // Classify the contents of a file based on starting bytes (aka magic number:\n  // https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files)\n  // This aligns with TensorFlow Core code:\n  // https://github.com/tensorflow/tensorflow/blob/4213d5c1bd921f8d5b7b2dc4bbf1eea78d0b5258/tensorflow/core/kernels/decode_image_op.cc#L44\n  if (content.length > 3 && content[0] === 255 && content[1] === 216 && content[2] === 255) {\n    // JPEG byte chunk starts with `ff d8 ff`\n    return ImageType.JPEG;\n  } else if (content.length > 4 && content[0] === 71 && content[1] === 73 && content[2] === 70 && content[3] === 56) {\n    // GIF byte chunk starts with `47 49 46 38`\n    return ImageType.GIF;\n  } else if (content.length > 8 && content[0] === 137 && content[1] === 80 && content[2] === 78 && content[3] === 71 && content[4] === 13 && content[5] === 10 && content[6] === 26 && content[7] === 10) {\n    // PNG byte chunk starts with `\\211 P N G \\r \\n \\032 \\n (89 50 4E 47 0D 0A\n    // 1A 0A)`\n    return ImageType.PNG;\n  } else if (content.length > 3 && content[0] === 66 && content[1] === 77) {\n    // BMP byte chunk starts with `42 4d`\n    return ImageType.BMP;\n  } else {\n    throw new Error('Expected image (BMP, JPEG, PNG, or GIF), but got unsupported ' + 'image type');\n  }\n}\n\nexports.getImageType = getImageType;","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/node_modules/@tensorflow/tfjs-node-gpu/dist/image.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","defineProperty","exports","tfjs_1","require","nodejs_kernel_backend_1","ImageType","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","ensureTensorflowBackend","tidy","nodeBackend","toInt","decodePng","dtype","util","assert","decodeBmp","decodeGif","decodeImage","content","expandAnimations","imageType","getImageType","JPEG","PNG","GIF","img","slice","squeeze","BMP","encodeJpeg","image","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","backendEncodeImage","_a","imageData","shape","encodeImage","encodePng","compression","encodedDataTensor","_b","encodedPngData","_c","Uint8Array","bind","data","dispose","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar ImageType;\n(function (ImageType) {\n    ImageType[\"JPEG\"] = \"jpeg\";\n    ImageType[\"PNG\"] = \"png\";\n    ImageType[\"GIF\"] = \"gif\";\n    ImageType[\"BMP\"] = \"BMP\";\n})(ImageType = exports.ImageType || (exports.ImageType = {}));\n/**\n * Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The JPEG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *     0: use the number of channels in the JPEG-encoded image.\n *     1: output a grayscale image.\n *     3: output an RGB image.\n * @param ratio An optional int. Defaults to 1. Downscaling ratio. It is used\n *     when image is type Jpeg.\n * @param fancyUpscaling An optional bool. Defaults to True. If true use a\n *     slower but nicer upscaling of the chroma planes. It is used when image is\n *     type Jpeg.\n * @param tryRecoverTruncated An optional bool. Defaults to False. If true try\n *     to recover an image from truncated input. It is used when image is type\n *     Jpeg.\n * @param acceptableFraction An optional float. Defaults to 1. The minimum\n *     required fraction of lines before a truncated input is accepted. It is\n *     used when image is type Jpeg.\n * @param dctMethod An optional string. Defaults to \"\". string specifying a hint\n *     about the algorithm used for decompression. Defaults to \"\" which maps to\n *     a system-specific default. Currently valid values are [\"INTEGER_FAST\",\n *     \"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\n *     library changes to a version that does not have that specific option.) It\n *     is used when image is type Jpeg.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3].\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    if (channels === void 0) { channels = 0; }\n    if (ratio === void 0) { ratio = 1; }\n    if (fancyUpscaling === void 0) { fancyUpscaling = true; }\n    if (tryRecoverTruncated === void 0) { tryRecoverTruncated = false; }\n    if (acceptableFraction === void 0) { acceptableFraction = 1; }\n    if (dctMethod === void 0) { dctMethod = ''; }\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend()\n            .decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod)\n            .toInt();\n    });\n}\nexports.decodeJpeg = decodeJpeg;\n/**\n * Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The PNG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the PNG-encoded image.\n *      1: output a grayscale image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3/4].\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodePng(contents, channels, dtype) {\n    if (channels === void 0) { channels = 0; }\n    if (dtype === void 0) { dtype = 'int32'; }\n    tfjs_1.util.assert(dtype === 'int32', function () { return 'decodeImage could only return Tensor of type `int32` for now.'; });\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodePng(contents, channels).toInt();\n    });\n}\nexports.decodePng = decodePng;\n/**\n * Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n * `int32`.\n *\n * @param contents The BMP-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the BMP-encoded image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 3/4].\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeBmp(contents, channels) {\n    if (channels === void 0) { channels = 0; }\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodeBmp(contents, channels).toInt();\n    });\n}\nexports.decodeBmp = decodeBmp;\n/**\n * Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.\n *\n * @param contents The GIF-encoded image in an Uint8Array.\n * @returns A 4D Tensor of dtype `int32` with shape [num_frames, height, width,\n *     3]. RGB channel order.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeGif(contents) {\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodeGif(contents).toInt();\n    });\n}\nexports.decodeGif = decodeGif;\n/**\n * Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\n * decoded image. Supports BMP, GIF, JPEG and PNG formats.\n *\n * @param content The encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0, use the number of channels in\n *     the image. Number of color channels for the decoded image. It is used\n *     when image is type Png, Bmp, or Jpeg.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @param expandAnimations A boolean which controls the shape of the returned\n *     op's output. If True, the returned op will produce a 3-D tensor for PNG,\n *     JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\n *     not. If, False, the returned op will produce a 3-D tensor for all file\n *     types and will truncate animated GIFs to the first frame.\n * @returns A Tensor with dtype `int32` and a 3- or 4-dimensional shape,\n *     depending on the file type. For gif file the returned Tensor shape is\n *     [num_frames, height, width, 3], and for jpeg/png/bmp the returned Tensor\n *     shape is [height, width, channels]\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeImage(content, channels, dtype, expandAnimations) {\n    if (channels === void 0) { channels = 0; }\n    if (dtype === void 0) { dtype = 'int32'; }\n    if (expandAnimations === void 0) { expandAnimations = true; }\n    tfjs_1.util.assert(dtype === 'int32', function () { return 'decodeImage could only return Tensor of type `int32` for now.'; });\n    var imageType = getImageType(content);\n    // The return tensor has dtype uint8, which is not supported in\n    // TensorFlow.js, casting it to int32 which is the default dtype for image\n    // tensor. If the image is BMP, JPEG or PNG type, expanding the tensors\n    // shape so it becomes Tensor4D, which is the default tensor shape for image\n    // ([batch,imageHeight,imageWidth, depth]).\n    switch (imageType) {\n        case ImageType.JPEG:\n            return decodeJpeg(content, channels);\n        case ImageType.PNG:\n            return decodePng(content, channels);\n        case ImageType.GIF:\n            // If not to expand animations, take first frame of the gif and return\n            // as a 3D tensor.\n            return tfjs_1.tidy(function () {\n                var img = decodeGif(content);\n                return expandAnimations ? img : img.slice(0, 1).squeeze([0]);\n            });\n        case ImageType.BMP:\n            return decodeBmp(content, channels);\n        default:\n            return null;\n    }\n}\nexports.decodeImage = decodeImage;\n/**\n * Encodes an image tensor to JPEG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param format An optional string from: \"\", \"grayscale\", \"rgb\".\n *     Defaults to \"\". Per pixel image format.\n *     - '': Use a default format based on the number of channels in the image.\n *     - grayscale: Output a grayscale JPEG image. The channels dimension of\n *       image must be 1.\n *     - rgb: Output an RGB JPEG image. The channels dimension of image must\n *       be 3.\n * @param quality An optional int. Defaults to 95. Quality of the compression\n *     from 0 to 100 (higher is better and slower).\n * @param progressive An optional bool. Defaults to False. If True, create a\n *     JPEG that loads progressively (coarse to fine).\n * @param optimizeSize An optional bool. Defaults to False. If True, spend\n *     CPU/RAM to reduce size with no quality change.\n * @param chromaDownsampling  An optional bool. Defaults to True.\n *     See http://en.wikipedia.org/wiki/Chroma_subsampling.\n * @param densityUnit An optional string from: \"in\", \"cm\". Defaults to \"in\".\n *     Unit used to specify x_density and y_density: pixels per inch ('in') or\n *     centimeter ('cm').\n * @param xDensity An optional int. Defaults to 300. Horizontal pixels per\n *     density unit.\n * @param yDensity An optional int. Defaults to 300. Vertical pixels per\n *     density unit.\n * @param xmpMetadata An optional string. Defaults to \"\". If not empty, embed\n *     this XMP metadata in the image header.\n * @returns The JPEG encoded data as an Uint8Array.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodeJpeg(image, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    if (format === void 0) { format = ''; }\n    if (quality === void 0) { quality = 95; }\n    if (progressive === void 0) { progressive = false; }\n    if (optimizeSize === void 0) { optimizeSize = false; }\n    if (chromaDownsampling === void 0) { chromaDownsampling = true; }\n    if (densityUnit === void 0) { densityUnit = 'in'; }\n    if (xDensity === void 0) { xDensity = 300; }\n    if (yDensity === void 0) { yDensity = 300; }\n    if (xmpMetadata === void 0) { xmpMetadata = ''; }\n    return __awaiter(this, void 0, void 0, function () {\n        var backendEncodeImage;\n        return __generator(this, function (_a) {\n            nodejs_kernel_backend_1.ensureTensorflowBackend();\n            backendEncodeImage = function (imageData) {\n                return nodejs_kernel_backend_1.nodeBackend().encodeJpeg(imageData, image.shape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata);\n            };\n            return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n        });\n    });\n}\nexports.encodeJpeg = encodeJpeg;\n/**\n * Encodes an image tensor to PNG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param compression An optional int. Defaults to -1. Compression level.\n * @returns The PNG encoded data as an Uint8Array.\n */\n/**\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodePng(image, compression) {\n    if (compression === void 0) { compression = 1; }\n    return __awaiter(this, void 0, void 0, function () {\n        var backendEncodeImage;\n        return __generator(this, function (_a) {\n            nodejs_kernel_backend_1.ensureTensorflowBackend();\n            backendEncodeImage = function (imageData) {\n                return nodejs_kernel_backend_1.nodeBackend().encodePng(imageData, image.shape, compression);\n            };\n            return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n        });\n    });\n}\nexports.encodePng = encodePng;\nfunction encodeImage(image, backendEncodeImage) {\n    return __awaiter(this, void 0, void 0, function () {\n        var encodedDataTensor, _a, _b, encodedPngData;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    _a = backendEncodeImage;\n                    _b = Uint8Array.bind;\n                    return [4 /*yield*/, image.data()];\n                case 1:\n                    encodedDataTensor = _a.apply(void 0, [new (_b.apply(Uint8Array, [void 0, _c.sent()]))()]);\n                    // tslint:disable-next-line:no-any\n                    return [4 /*yield*/, encodedDataTensor.data()];\n                case 2:\n                    encodedPngData = (\n                    // tslint:disable-next-line:no-any\n                    _c.sent())[0];\n                    encodedDataTensor.dispose();\n                    return [2 /*return*/, encodedPngData];\n            }\n        });\n    });\n}\n/**\n * Helper function to get image type based on starting bytes of the image file.\n */\nfunction getImageType(content) {\n    // Classify the contents of a file based on starting bytes (aka magic number:\n    // https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files)\n    // This aligns with TensorFlow Core code:\n    // https://github.com/tensorflow/tensorflow/blob/4213d5c1bd921f8d5b7b2dc4bbf1eea78d0b5258/tensorflow/core/kernels/decode_image_op.cc#L44\n    if (content.length > 3 && content[0] === 255 && content[1] === 216 &&\n        content[2] === 255) {\n        // JPEG byte chunk starts with `ff d8 ff`\n        return ImageType.JPEG;\n    }\n    else if (content.length > 4 && content[0] === 71 && content[1] === 73 &&\n        content[2] === 70 && content[3] === 56) {\n        // GIF byte chunk starts with `47 49 46 38`\n        return ImageType.GIF;\n    }\n    else if (content.length > 8 && content[0] === 137 && content[1] === 80 &&\n        content[2] === 78 && content[3] === 71 && content[4] === 13 &&\n        content[5] === 10 && content[6] === 26 && content[7] === 10) {\n        // PNG byte chunk starts with `\\211 P N G \\r \\n \\032 \\n (89 50 4E 47 0D 0A\n        // 1A 0A)`\n        return ImageType.PNG;\n    }\n    else if (content.length > 3 && content[0] === 66 && content[1] === 77) {\n        // BMP byte chunk starts with `42 4d`\n        return ImageType.BMP;\n    }\n    else {\n        throw new Error('Expected image (BMP, JPEG, PNG, or GIF), but got unsupported ' +\n            'image type');\n    }\n}\nexports.getImageType = getImageType;\n"]},"metadata":{},"sourceType":"script"}