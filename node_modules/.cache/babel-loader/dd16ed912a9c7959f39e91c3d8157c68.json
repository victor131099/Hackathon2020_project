{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n      } else {\n        activationSnippet = \"\\n          float activation(float x) {\\n            \".concat(activation, \"\\n          }\\n        \");\n      }\n\n      applyActivationSnippet = \"result = activation(result);\";\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\").concat(channelDim, \"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\").concat(rowDim, \"], coords[\").concat(colDim, \"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          int xR = xRCorner + wR * \").concat(dilationHeight, \";\\n\\n          if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            int xC = xCCorner + wC * \").concat(dilationWidth, \";\\n\\n            if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4, \"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\").concat(inputDepthVec4Remainder === 1, \") {\\n\\n              if (\").concat(isChannelsLast, \") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \") *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC) *\\n                    getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder === 2, \") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\").concat(inputDepthVec4Remainder === 3, \") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2),\\n                getW(wR, wC, \").concat(inputDepthNearestVec4, \" + 2, d2)\\n              );\\n\\n              if (\").concat(isChannelsLast, \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 1),\\n                  getX(batch, xR, xC, \").concat(inputDepthNearestVec4, \" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \").concat(inputDepthNearestVec4, \", xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 1, xR, xC),\\n                  getX(batch, \").concat(inputDepthNearestVec4, \" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n  }\n\n}\nexport class Conv3DProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    this.userCode = \"\\n      const ivec3 strides = ivec3(\".concat(strideDepth, \", \").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec3 pads = ivec3(\").concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \").concat(filterDepth, \"; wF++) {\\n          int xF = xFCorner + wF * \").concat(dilationDepth, \";\\n\\n          if (xF < 0 || xF >= \").concat(convInfo.inDepth, \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n            int xR = xRCorner + wR * \").concat(dilationHeight, \";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n              int xC = xCCorner + wC * \").concat(dilationWidth, \";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \").concat(inputDepthNearestVec4, \"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\").concat(inputDepthVec4Remainder === 1, \") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \") *\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2);\\n              } else if (\").concat(inputDepthVec4Remainder === 2, \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\").concat(inputDepthVec4Remainder === 3, \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \"),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 1),\\n                  getX(batch, xF, xR, xC, \").concat(inputDepthNearestVec4, \" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \", d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 1, d2),\\n                  getW(wF, wR, wC, \").concat(inputDepthNearestVec4, \" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}