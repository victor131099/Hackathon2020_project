{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { getParamValue } from './utils';\n\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await tfc.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await tfc.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n\n    case 'Where':\n      {\n        const condition = getParamValue('condition', node, tensorMap, context).asType('bool');\n        const result = [await tfc.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n\n    case 'ListDiff':\n      {\n        return tfc.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":{"version":3,"sources":["../../../src/operations/executors/dynamic_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await tfc.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await tfc.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await tfc.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = getParamValue('condition', node, tensorMap, context)\n                .asType('bool');\n            const result = [await tfc.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return tfc.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=dynamic_executor.js.map"]},"metadata":{},"sourceType":"module"}