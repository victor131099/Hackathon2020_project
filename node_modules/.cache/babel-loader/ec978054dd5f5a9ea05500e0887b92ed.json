{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, Circle } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport React, { Component, Fragment } from \"react\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\nimport { getDistance } from 'geolib';\nimport data from \"../../../data/Data\";\n\nclass PeopleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      location_data: [],\n      openToogleList: Array(data.length).fill(true),\n      defaultMapSize: {\n        lat: -33.797,\n        lng: 151.1\n      },\n      windowSize: 10\n    };\n  }\n\n  componentDidMount() {\n    Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\"); // set response language. Defaults to english.\n\n    Geocode.setLanguage(\"en\"); // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n    Geocode.setRegion(\"aus\");\n    Geocode.enableDebug(); // Get latidude & longitude from address.\n\n    for (var i = 0; i < data.length; i++) {\n      Geocode.fromAddress(data[i].address).then(response => {\n        const _response$results$0$g = response.results[0].geometry.location,\n              lat = _response$results$0$g.lat,\n              lng = _response$results$0$g.lng;\n        this.setState({\n          location_data: [...this.state.location_data, {\n            lat,\n            lng\n          }]\n        });\n        console.log(lat);\n        console.log(lng);\n      }, error => {\n        console.error(error);\n      });\n    } // if (this.props.clickable ===true){\n    //   console.log(\"hello\")\n    //   for (var i =0; i < this.state.location_data.length; i++){\n    //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n    //       console.log('world')\n    //       // let item =this.state.location_data[i]\n    //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n    //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n    //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n    //       this.setState({\n    //         // defaultMapSize: copyDefaultMapSize,\n    //         windowSize:20\n    //       })\n    //       break;\n    //     }\n    //   // }\n    //   }\n    // }\n\n  } // componentDidUpdate(previousProps, previousState){\n  //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n  //     if (this.props.clickable ===true){\n  //       console.log(\"hello\")\n  //       for (var i =0; i < this.state.location_data.length; i++){\n  //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n  //           console.log('world')\n  //           // let item =this.state.location_data[i]\n  //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n  //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n  //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n  //           this.setState({\n  //             // defaultMapSize: copyDefaultMapSize,\n  //             windowSize:20\n  //           })\n  //           break;\n  //         }\n  //       // }\n  //     }\n  //   }\n  // }\n  // changeMapSize(item){\n  // }\n\n\n  onOpen(index) {\n    let newToogleList = [...this.state.openToogleList];\n    newToogleList[index] = !newToogleList[index];\n    this.setState({\n      openToogleList: newToogleList\n    });\n  }\n\n  getIndexPerson() {\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].name === this.props.clickedInput.replace(/\\s/g, '')) {\n        // console.log(this.state.clickedInput)\n        return i;\n      }\n    }\n  }\n\n  getLocation(item) {\n    var list_location = [];\n\n    for (var i = 0; i < this.state.location_data.length; i++) {\n      if (getDistance(this.state.location_data[i], item) < 1000 && item !== this.state.location_data[i]) {\n        var coord = this.state.location_data[i];\n        coord.name = data[i].name;\n        console.log(data[i].name); // console.log(getDistance(this.state.location_data[i],item))\n\n        list_location.push(coord);\n      }\n    }\n\n    return list_location;\n  }\n\n  centerChange() {\n    if (this.props.clickable === true) {\n      var index = this.getIndexPerson();\n      this.setState({\n        defaultMapSize: this.state.location_data[index]\n      });\n    }\n  }\n\n  zoomChange() {// console.log(\"world\")\n    // if(this.props.clickable === true){\n    //   this.setState({windowSize:40});\n    // }\n  }\n\n  render() {\n    return React.createElement(GoogleMap, {\n      zoom: this.props.windowSize,\n      onCenterChanged: () => {\n        this.centerChange();\n      },\n      onZoomChanged: () => {\n        this.zoomChange();\n      },\n      center: this.state.defaultMapSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.location_data.map((item, index) => {\n      if (this.props.clickable === true) {\n        if (data[index].name == this.props.clickedInput.replace(/\\s/g, '')) {\n          var list_location = this.getLocation(item);\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179\n            },\n            __self: this\n          }, list_location.map((item1, index1) => {\n            return React.createElement(Marker, {\n              position: {\n                lat: parseFloat(item1.lat),\n                lng: parseFloat(item1.lng)\n              },\n              key: index1,\n              onClick: () => this.onOpen(index1),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181\n              },\n              __self: this\n            }, this.state.openToogleList[index1] && React.createElement(Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187\n              },\n              __self: this\n            }, React.createElement(InfoWindow, {\n              onCloseClick: () => this.onOpen(index1),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }, \"Name: \", item1.name))));\n          }), React.createElement(Marker, {\n            position: {\n              lat: parseFloat(item.lat),\n              lng: parseFloat(item.lng)\n            },\n            key: index,\n            onClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, this.state.openToogleList[index] && React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, React.createElement(InfoWindow, {\n            onCloseClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            style: {\n              color: \"red\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208\n            },\n            __self: this\n          }, \" Name: \", data[index].name))))));\n        }\n      }\n    }));\n  }\n\n}\n\nconst MapContainer = compose(withScriptjs, withGoogleMap)(PeopleMap);\nexport default MapContainer; //   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js"],"names":["withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","Circle","Geocode","React","Component","Fragment","compose","withProps","withStateHandlers","getDistance","data","PeopleMap","constructor","props","state","userInput","location_data","openToogleList","Array","length","fill","defaultMapSize","lat","lng","windowSize","componentDidMount","setApiKey","setLanguage","setRegion","enableDebug","i","fromAddress","address","then","response","results","geometry","location","setState","console","log","error","onOpen","index","newToogleList","getIndexPerson","name","clickedInput","replace","getLocation","item","list_location","coord","push","centerChange","clickable","zoomChange","render","map","item1","index1","parseFloat","color","MapContainer"],"mappings":"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","sourcesContent":["import {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow, \n    Circle\n  } from \"react-google-maps\";\n  import Geocode from \"react-geocode\";\n  import React, {Component, Fragment} from \"react\"\n  import { compose, withProps, withStateHandlers } from \"recompose\"\n  import { getDistance } from 'geolib';\nimport data from \"../../../data/Data\";\n\n  class PeopleMap extends Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        userInput: \"\",\n        location_data: [],\n        openToogleList: Array(data.length).fill(true), \n        defaultMapSize: { lat: -33.797, lng: 151.1 }, \n        windowSize:10\n        \n      }\n    }\n    componentDidMount(){\n     \n      \n      Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\");\n \n      // set response language. Defaults to english.\n      Geocode.setLanguage(\"en\");\n      \n      // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n      Geocode.setRegion(\"aus\");\n      Geocode.enableDebug();\n      \n      \n      \n      // Get latidude & longitude from address.\n      \n      for (var i=0; i< data.length; i++){\n        \n        Geocode.fromAddress(data[i].address).then(\n          response => {\n            const { lat, lng } = response.results[0].geometry.location;\n            this.setState({\n              location_data: [...this.state.location_data, { lat,lng}]\n            })\n            console.log(lat)\n            console.log(lng)\n            \n\n          },\n          error => {\n            console.error(error);\n          }\n        );\n        \n      }\n            \n      // if (this.props.clickable ===true){\n      //   console.log(\"hello\")\n      //   for (var i =0; i < this.state.location_data.length; i++){\n      //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n      //       console.log('world')\n      //       // let item =this.state.location_data[i]\n      //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n      //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n      //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n      //       this.setState({\n      //         // defaultMapSize: copyDefaultMapSize,\n      //         windowSize:20\n      //       })\n      //       break;\n      //     }\n      //   // }\n        \n      //   }\n      // }\n      \n     \n    }\n    // componentDidUpdate(previousProps, previousState){\n    //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n    //     if (this.props.clickable ===true){\n    //       console.log(\"hello\")\n    //       for (var i =0; i < this.state.location_data.length; i++){\n    //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n    //           console.log('world')\n    //           // let item =this.state.location_data[i]\n    //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n    //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n    //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n    //           this.setState({\n    //             // defaultMapSize: copyDefaultMapSize,\n    //             windowSize:20\n    //           })\n    //           break;\n    //         }\n    //       // }\n          \n    //     }\n    //   }\n    // }\n    // changeMapSize(item){\n      \n      \n    // }\n    \n    onOpen(index){\n      let newToogleList = [...this.state.openToogleList];\n      newToogleList[index] = ! newToogleList[index];\n\n      this.setState({\n        openToogleList: newToogleList\n      }\n      )\n    }\n    getIndexPerson(){\n      \n      for(var i =0; i< data.length; i++){\n        if(data[i].name===this.props.clickedInput.replace(/\\s/g, '')){\n\n          // console.log(this.state.clickedInput)\n          return i;\n        }\n      }\n    }\n    getLocation(item){\n      var list_location= []\n      for (var i = 0 ; i < this.state.location_data.length; i++){\n        if(getDistance(this.state.location_data[i], item)< 1000 && item !== this.state.location_data[i]   ){\n          var coord = this.state.location_data[i];\n          coord.name= data[i].name\n          console.log(data[i].name)\n          // console.log(getDistance(this.state.location_data[i],item))\n          list_location.push(coord)\n          \n          \n        }\n      }\n      return list_location\n    }\n    centerChange(){\n      \n      if(this.props.clickable === true){\n        \n        var index = this.getIndexPerson()\n        this.setState({defaultMapSize:this.state.location_data[index]});\n      }\n    }\n    zoomChange(){\n      // console.log(\"world\")\n      // if(this.props.clickable === true){\n      //   this.setState({windowSize:40});\n      // }\n    }\n    \n    render(){\n   \n      return(\n        <GoogleMap\n    zoom={this.props.windowSize}\n      onCenterChanged = {() =>{this.centerChange()}}\n      onZoomChanged= {()=> {this.zoomChange()}}\n      center={this.state.defaultMapSize}\n    >\n      \n      {this.state.location_data.map((item, index)=>{\n        if (this.props.clickable === true){\n          \n          if (data[index].name == this.props.clickedInput.replace(/\\s/g, '')){\n            var list_location= this.getLocation(item)\n            \n            return(\n              <div>\n              {list_location.map((item1,index1) =>{return(\n                <Marker\n            position={{lat : parseFloat(item1.lat), lng: parseFloat(item1.lng) }}\n            key = {index1}\n            onClick={() => this.onOpen(index1) }\n              >\n            {this.state.openToogleList[index1] &&\n              <Fragment>\n              <InfoWindow onCloseClick={()=> this.onOpen(index1)}>\n                <h3>Name: {item1.name}</h3>\n                {/* <h3>{this.props.clickedInput}</h3> */}\n              </InfoWindow>\n              \n            </Fragment> \n          \n            }\n            \n              </Marker>\n\n              )})}\n              <Marker\n            position={{lat : parseFloat(item.lat), lng: parseFloat(item.lng) }}\n            key = {index}\n            onClick={() => this.onOpen(index) }\n              >\n            {this.state.openToogleList[index] &&\n              <Fragment>\n              <InfoWindow onCloseClick={()=> this.onOpen(index)}>\n                <h3 style= {{color: \"red\"}}><b> Name: {data[index].name}</b></h3>\n                {/* <h3>{this.props.clickedInput}</h3> */}\n              </InfoWindow>\n              \n            </Fragment> \n          \n            }\n            \n              </Marker>\n            </div>\n           \n            \n      \n      \n              \n          )\n    }}})}\n      \n    </GoogleMap>\n      )\n    }\n  }\n  const MapContainer =compose(\n    withScriptjs,\n    withGoogleMap\n  )(PeopleMap);\n  \n  export default MapContainer\n  \n//   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />"]},"metadata":{},"sourceType":"module"}