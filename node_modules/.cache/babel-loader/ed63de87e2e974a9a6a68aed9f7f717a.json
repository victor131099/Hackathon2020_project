{"ast":null,"code":"var _jsxFileName = \"/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, Circle } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport React, { Component, Fragment } from \"react\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\nimport { getDistance } from 'geolib'; // import data from \"../../../data/Data\";\n\nclass PeopleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      location_data: [],\n      defaultMapSize: {\n        lat: -33.797,\n        lng: 151.1\n      },\n      windowSize: 10,\n      emask_data: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://fhrs5atn73.execute-api.ap-southeast-2.amazonaws.com/dev\").then(response => response.json()).then(data => {\n      this.setState({\n        emask_data: data\n      }); // this.setState({openToogleList: Array(this.state.emask_data.length).fill(true)})\n\n      Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\"); // set response language. Defaults to english.\n\n      Geocode.setLanguage(\"en\"); // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n      Geocode.setRegion(\"aus\");\n      Geocode.enableDebug(); // Get latidude & longitude from address.\n\n      for (var i = 0; i < data.length; i++) {\n        let address = data[i].address;\n        console.log(address);\n        this.setTimeout(() => {}, 100);\n        Geocode.fromAddress(address).then(response => {\n          const _response$results$0$g = response.results[0].geometry.location,\n                lat = _response$results$0$g.lat,\n                lng = _response$results$0$g.lng;\n          this.setState({\n            location_data: [...this.state.location_data, {\n              lat,\n              lng\n            }]\n          }); // console.log(lat)\n          // console.log(lng)\n        }, error => {\n          console.error(error);\n        });\n      }\n    });\n  } // if (this.props.clickable ===true){\n  //   console.log(\"hello\")\n  //   for (var i =0; i < this.state.location_data.length; i++){\n  //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n  //       console.log('world')\n  //       // let item =this.state.location_data[i]\n  //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n  //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n  //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n  //       this.setState({\n  //         // defaultMapSize: copyDefaultMapSize,\n  //         windowSize:20\n  //       })\n  //       break;\n  //     }\n  //   // }\n  //   }\n  // }\n  // componentDidUpdate(previousProps, previousState){\n  //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n  //     if (this.props.clickable ===true){\n  //       console.log(\"hello\")\n  //       for (var i =0; i < this.state.location_data.length; i++){\n  //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n  //           console.log('world')\n  //           // let item =this.state.location_data[i]\n  //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n  //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n  //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n  //           this.setState({\n  //             // defaultMapSize: copyDefaultMapSize,\n  //             windowSize:20\n  //           })\n  //           break;\n  //         }\n  //       // }\n  //     }\n  //   }\n  // }\n  // changeMapSize(item){\n  // }\n\n\n  onOpen(index) {\n    console.log(index);\n    let new_emask = [...this.state.emask_data];\n    new_emask[index].isMapOpen = !new_emask[index].isMapOpen;\n    this.setState({\n      emask: new_emask\n    });\n  }\n\n  getIndexPerson() {\n    for (var i = 0; i < this.state.emask_data.length; i++) {\n      if (this.state.emask_data[i].name === this.props.clickedInput.replace(/\\s/g, '')) {\n        // console.log(this.state.clickedInput)\n        return i;\n      }\n    }\n  }\n\n  getLocation(item) {\n    var list_location = [];\n\n    for (var i = 0; i < this.state.location_data.length; i++) {\n      if (getDistance(this.state.location_data[i], item) < 1000 && item !== this.state.location_data[i]) {\n        var coord = this.state.location_data[i];\n        coord.name = this.state.emask_data[i].name;\n        coord.address = this.state.emask_data[i].address;\n        console.log(this.state.emask_data[i].name); // console.log(getDistance(this.state.location_data[i],item))\n\n        list_location.push(coord);\n      }\n    }\n\n    return list_location;\n  }\n\n  centerChange() {\n    if (this.props.clickable === true) {\n      var index = this.getIndexPerson();\n      this.setState({\n        defaultMapSize: this.state.location_data[index]\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.emask_data);\n    console.log(this.state.location_data);\n    return React.createElement(GoogleMap, {\n      zoom: this.props.windowSize,\n      onCenterChanged: () => {\n        this.centerChange();\n      },\n      onZoomChanged: () => {\n        this.zoomChange();\n      },\n      center: this.state.defaultMapSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.state.location_data.map((item, index) => {\n      if (this.props.clickable === true) {\n        if (this.state.emask_data[index].name == this.props.clickedInput.replace(/\\s/g, '')) {\n          var list_location = this.getLocation(item);\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191\n            },\n            __self: this\n          }, list_location.map((item1, index1) => {\n            // console.log(data[index1].address)\n            return React.createElement(Marker, {\n              position: {\n                lat: parseFloat(item1.lat),\n                lng: parseFloat(item1.lng)\n              },\n              key: index1,\n              onClick: () => this.onOpen(index1),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 195\n              },\n              __self: this\n            }, this.state.emask_data[index1].isMapOpen && React.createElement(Fragment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 201\n              },\n              __self: this\n            }, React.createElement(InfoWindow, {\n              onCloseClick: () => this.onOpen(index1),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 202\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 203\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 204\n              },\n              __self: this\n            }, \"Name: \", item1.name), React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 205\n              },\n              __self: this\n            }, \"Address: \", item1.address)))));\n          }), React.createElement(Marker, {\n            position: {\n              lat: parseFloat(item.lat),\n              lng: parseFloat(item.lng)\n            },\n            key: index,\n            onClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 217\n            },\n            __self: this\n          }, this.state.emask_data[index].isMapOpen && React.createElement(Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }, React.createElement(InfoWindow, {\n            onCloseClick: () => this.onOpen(index),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 224\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }, React.createElement(\"h3\", {\n            style: {\n              color: \"red\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          }, \" Name: \", this.state.emask_data[index].name)), React.createElement(\"h3\", {\n            style: {\n              color: \"red\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228\n            },\n            __self: this\n          }, \" Address: \", this.state.emask_data[index].address)))), React.createElement(Circle, {\n            radius: 1000,\n            center: {\n              lat: parseFloat(item.lat),\n              lng: parseFloat(item.lng)\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 231\n            },\n            __self: this\n          }))));\n        }\n      }\n    }));\n  }\n\n}\n\nconst MapContainer = compose(withScriptjs, withGoogleMap)(PeopleMap);\nexport default MapContainer; //   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />","map":{"version":3,"sources":["/home/victor/COVID-19-Coding-Fest/src/pages/home/components/MapContainer.js"],"names":["withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","Circle","Geocode","React","Component","Fragment","compose","withProps","withStateHandlers","getDistance","PeopleMap","constructor","props","state","userInput","location_data","defaultMapSize","lat","lng","windowSize","emask_data","componentDidMount","fetch","then","response","json","data","setState","setApiKey","setLanguage","setRegion","enableDebug","i","length","address","console","log","setTimeout","fromAddress","results","geometry","location","error","onOpen","index","new_emask","isMapOpen","emask","getIndexPerson","name","clickedInput","replace","getLocation","item","list_location","coord","push","centerChange","clickable","render","zoomChange","map","item1","index1","parseFloat","color","MapContainer"],"mappings":"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","sourcesContent":["import {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow, \n    Circle\n  } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport React, {Component, Fragment} from \"react\"\nimport { compose, withProps, withStateHandlers } from \"recompose\"\nimport { getDistance } from 'geolib';\n// import data from \"../../../data/Data\";\n\n  class PeopleMap extends Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        userInput: \"\",\n        location_data: [],\n        \n        defaultMapSize: { lat: -33.797, lng: 151.1 }, \n        windowSize:10, \n        emask_data: []\n        \n      }\n    }\n    componentDidMount(){\n     \n      fetch(\"https://fhrs5atn73.execute-api.ap-southeast-2.amazonaws.com/dev\")\n        .then(response => response.json())\n        .then(data => {\n          this.setState({emask_data:data});\n        \n      // this.setState({openToogleList: Array(this.state.emask_data.length).fill(true)})\n      Geocode.setApiKey(\"AIzaSyAOOgr6Eg-N_Pi3Ic5mNo1EybmjAH3w1D0\");\n \n      // set response language. Defaults to english.\n      Geocode.setLanguage(\"en\");\n      \n      // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n      Geocode.setRegion(\"aus\");\n      Geocode.enableDebug();\n      \n      \n      \n      // Get latidude & longitude from address.\n      \n      for (var i=0; i< data.length; i++){\n        let address = data[i].address\n        console.log(address)\n        this.setTimeout(() => {\n          \n        }, 100);\n        Geocode.fromAddress(address).then(\n          response => {\n            const { lat, lng } = response.results[0].geometry.location;\n            \n            this.setState({\n              location_data: [...this.state.location_data, { lat,lng}]\n            })\n            // console.log(lat)\n            // console.log(lng)\n            \n\n          },\n          error => {\n            console.error(error);\n          }\n        );\n      }\n      })\n        \n      }\n            \n      // if (this.props.clickable ===true){\n      //   console.log(\"hello\")\n      //   for (var i =0; i < this.state.location_data.length; i++){\n      //     if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n      //       console.log('world')\n      //       // let item =this.state.location_data[i]\n      //       // let copyDefaultMapSize= {...this.state.defaultMapSize};\n      //       // copyDefaultMapSize.lat= parseFloat(item.lat);\n      //       // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n      //       this.setState({\n      //         // defaultMapSize: copyDefaultMapSize,\n      //         windowSize:20\n      //       })\n      //       break;\n      //     }\n      //   // }\n        \n      //   }\n      // }\n      \n     \n    \n    // componentDidUpdate(previousProps, previousState){\n    //   // if (this.state.defaultCenter !== previousState.defaultCenter && this.state.windowSize !== previousState.windowSize){\n    //     if (this.props.clickable ===true){\n    //       console.log(\"hello\")\n    //       for (var i =0; i < this.state.location_data.length; i++){\n    //         if(data[i].name === this.props.clickedInput.replace(/\\s/g, '')){\n    //           console.log('world')\n    //           // let item =this.state.location_data[i]\n    //           // let copyDefaultMapSize= {...this.state.defaultMapSize};\n    //           // copyDefaultMapSize.lat= parseFloat(item.lat);\n    //           // copyDefaultMapSize.lng = parseFloat(item.lng) ;\n    //           this.setState({\n    //             // defaultMapSize: copyDefaultMapSize,\n    //             windowSize:20\n    //           })\n    //           break;\n    //         }\n    //       // }\n          \n    //     }\n    //   }\n    // }\n    // changeMapSize(item){\n      \n      \n    // }\n    \n    onOpen(index){\n      console.log(index)\n      let new_emask = [...this.state.emask_data];\n      new_emask[index].isMapOpen = ! new_emask[index].isMapOpen;\n\n      this.setState({\n        emask: new_emask\n      }\n      )\n    }\n    getIndexPerson(){\n      \n      for(var i =0; i< this.state.emask_data.length; i++){\n        if(this.state.emask_data[i].name===this.props.clickedInput.replace(/\\s/g, '')){\n\n          // console.log(this.state.clickedInput)\n          return i;\n        }\n      }\n    }\n    getLocation(item){\n      var list_location= []\n      for (var i = 0 ; i < this.state.location_data.length; i++){\n        if(getDistance(this.state.location_data[i], item)< 1000 && item !== this.state.location_data[i]   ){\n          var coord = this.state.location_data[i];\n          coord.name= this.state.emask_data[i].name\n          coord.address= this.state.emask_data[i].address\n          console.log(this.state.emask_data[i].name)\n\n          // console.log(getDistance(this.state.location_data[i],item))\n          list_location.push(coord)\n          \n          \n        }\n      }\n      return list_location\n    }\n    centerChange(){\n      \n      if(this.props.clickable === true){\n        \n        var index = this.getIndexPerson()\n        this.setState({defaultMapSize:this.state.location_data[index]});\n      }\n    }\n    \n    \n    render(){\n      console.log(this.state.emask_data)\n      console.log(this.state.location_data)\n      return(\n        <GoogleMap\n    zoom={this.props.windowSize}\n      onCenterChanged = {() =>{this.centerChange()}}\n      onZoomChanged= {()=> {this.zoomChange()}}\n      center={this.state.defaultMapSize}\n    >\n      \n      {this.state.location_data.map((item, index)=>{\n        if (this.props.clickable === true){\n          \n          if (this.state.emask_data[index].name == this.props.clickedInput.replace(/\\s/g, '')){\n            var list_location= this.getLocation(item)\n            \n            return(\n              <div>\n              {list_location.map((item1,index1) =>{\n                // console.log(data[index1].address)\n                return(\n                <Marker\n            position={{lat : parseFloat(item1.lat), lng: parseFloat(item1.lng) }}\n            key = {index1}\n            onClick={() => this.onOpen(index1) }\n              >\n            {this.state.emask_data[index1].isMapOpen &&\n              <Fragment>\n              <InfoWindow onCloseClick={()=> this.onOpen(index1)}>\n                <div>\n                <h3>Name: {item1.name}</h3>\n                <h3>Address: {item1.address}</h3>\n                </div>\n                {/* <Person name = {item1.name} /> */}\n              </InfoWindow>\n              \n            </Fragment> \n          \n            }\n         \n              </Marker>\n\n              )})}\n              <Marker\n            position={{lat : parseFloat(item.lat), lng: parseFloat(item.lng) }}\n            key = {index}\n            onClick={() => this.onOpen(index) }\n              >\n            {this.state.emask_data[index].isMapOpen &&\n              <Fragment>\n              <InfoWindow onCloseClick={()=> this.onOpen(index)}>\n                <div>\n                <h3 style= {{color: \"red\"}}><b> Name: {this.state.emask_data[index].name}</b></h3>\n                {/* <h3>{this.props.clickedInput}</h3> */}\n                <h3 style= {{color: \"red\"}}><b> Address: {this.state.emask_data[index].address}</b></h3>\n                </div>\n              </InfoWindow>\n              <Circle\n              radius= {1000}\n              center= {{lat : parseFloat(item.lat), lng: parseFloat(item.lng) }}\n              />\n              \n            </Fragment> \n          \n            }\n            \n              </Marker>\n            </div>\n           \n            \n      \n      \n              \n          )\n    }}})}\n      \n    </GoogleMap>\n      )\n    }\n  }\n  const MapContainer =compose(\n    withScriptjs,\n    withGoogleMap\n  )(PeopleMap);\n  \n  export default MapContainer\n  \n//   <MapWithAMarker\n//     googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\"\n//     loadingElement={<div style={{ height: `100%` }} />}\n//     containerElement={<div style={{ height: `400px` }} />}\n//     mapElement={<div style={{ height: `100%` }} />}\n//   />"]},"metadata":{},"sourceType":"module"}