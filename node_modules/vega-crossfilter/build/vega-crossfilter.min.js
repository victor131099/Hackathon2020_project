!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-array"),require("vega-dataflow"),require("vega-util")):"function"==typeof define&&define.amd?define(["exports","d3-array","vega-dataflow","vega-util"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).vega=e.vega||{},e.vega.transforms={}),e.d3,e.vega,e.vega)}(this,(function(e,t,r,i){"use strict";const n=e=>new Uint8Array(e),s=e=>new Uint16Array(e),l=e=>new Uint32Array(e);function o(e,t,r){const i=(t<257?n:t<65537?s:l)(e);return r&&i.set(r),i}function a(e,t,r){const i=1<<t;return{one:i,zero:~i,range:r.slice(),bisect:e.bisect,index:e.index,size:e.size,onAdd(e,t){let r,n=this.bisect(this.range,e.value),s=e.index,l=n[0],o=n[1],a=s.length;for(r=0;r<l;++r)t[s[r]]|=i;for(r=o;r<a;++r)t[s[r]]|=i;return this}}}function f(){let e=l(0),r=[],i=0;return{insert:function(n,s,o){if(!s.length)return[];let a,f,d,u=i,h=s.length,m=Array(h),c=l(h);for(d=0;d<h;++d)m[d]=n(s[d]),c[d]=d;if(m=function(e,r){return e.sort.call(r,(t,r)=>{const i=e[t],n=e[r];return i<n?-1:i>n?1:0}),t.permute(e,r)}(m,c),u)a=r,f=e,r=Array(u+h),e=l(u+h),function(e,t,r,i,n,s,l,o,a){let f,d=0,u=0;for(f=0;d<i&&u<l;++f)t[d]<n[u]?(o[f]=t[d],a[f]=r[d++]):(o[f]=n[u],a[f]=s[u++]+e);for(;d<i;++d,++f)o[f]=t[d],a[f]=r[d];for(;u<l;++u,++f)o[f]=n[u],a[f]=s[u]+e}(o,a,f,u,m,c,h,r,e);else{if(o>0)for(d=0;d<h;++d)c[d]+=o;r=m,e=c}return i=u+h,{index:c,value:m}},remove:function(t,n){let s,l,o,a=i;for(l=0;!n[e[l]]&&l<a;++l);for(o=l;l<a;++l)n[s=e[l]]||(e[o]=s,r[o]=r[l],++o);i=a-t},bisect:function(e,n){let s;return n?s=n.length:(n=r,s=i),[t.bisectLeft(n,e[0],0,s),t.bisectRight(n,e[1],0,s)]},reindex:function(t){for(let r=0,n=i;r<n;++r)e[r]=t[e[r]]},index:()=>e,size:()=>i}}function d(e){r.Transform.call(this,function(){let e=8,t=[],r=l(0),i=o(0,e),n=o(0,e);return{data:()=>t,seen:()=>r=function(e,t,r){return e.length>=t?e:((r=r||new e.constructor(t)).set(e),r)}(r,t.length),add(e){for(let r,i=0,n=t.length,s=e.length;i<s;++i)r=e[i],r._index=n++,t.push(r)},remove(e,r){let s,l,o,a=t.length,f=Array(a-e),d=t;for(l=0;!r[l]&&l<a;++l)f[l]=t[l],d[l]=l;for(o=l;l<a;++l)s=t[l],r[l]?d[l]=-1:(d[l]=o,i[o]=i[l],n[o]=n[l],f[o]=s,s._index=o++),i[l]=0;return t=f,d},size:()=>t.length,curr:()=>i,prev:()=>n,reset:e=>n[e]=i[e],all:()=>e<257?255:e<65537?65535:4294967295,set(e,t){i[e]|=t},clear(e,t){i[e]&=~t},resize(t,r){(t>i.length||r>e)&&(e=Math.max(r,e),i=o(t,e,i),n=o(t,e))}}}(),e),this._indices=null,this._dims=null}function u(e){r.Transform.call(this,null,e)}d.Definition={type:"CrossFilter",metadata:{},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"query",type:"array",array:!0,required:!0,content:{type:"number",array:!0,length:2}}]},i.inherits(d,r.Transform,{transform(e,t){return this._dims?e.modified("fields")||e.fields.some(e=>t.modified(e.fields))?this.reinit(e,t):this.eval(e,t):this.init(e,t)},init(e,t){let r,i,n=e.fields,s=e.query,l=this._indices={},o=this._dims=[],d=s.length,u=0;for(;u<d;++u)r=n[u].fname,i=l[r]||(l[r]=f()),o.push(a(i,u,s[u]));return this.eval(e,t)},reinit(e,t){let r,i,n,s,l,o,d,u,h,m=t.materialize().fork(),c=e.fields,g=e.query,p=this._indices,v=this._dims,y=this.value,x=y.curr(),_=y.prev(),b=y.all(),A=m.rem=m.add,q=m.mod,M=g.length,z={};if(_.set(x),t.rem.length&&(l=this.remove(e,t,m)),t.add.length&&y.add(t.add),t.mod.length)for(o={},s=t.mod,d=0,u=s.length;d<u;++d)o[s[d]._index]=1;for(d=0;d<M;++d)h=c[d],(!v[d]||e.modified("fields",d)||t.modified(h.fields))&&(n=h.fname,(r=z[n])||(p[n]=i=f(),z[n]=r=i.insert(h,t.source,0)),v[d]=a(i,d,g[d]).onAdd(r,x));for(d=0,u=y.data().length;d<u;++d)l[d]||(_[d]!==x[d]?A.push(d):o[d]&&x[d]!==b&&q.push(d));return y.mask=(1<<M)-1,m},eval(e,t){let r=t.materialize().fork(),i=this._dims.length,n=0;return t.rem.length&&(this.remove(e,t,r),n|=(1<<i)-1),e.modified("query")&&!e.modified("fields")&&(n|=this.update(e,t,r)),t.add.length&&(this.insert(e,t,r),n|=(1<<i)-1),t.mod.length&&(this.modify(t,r),n|=(1<<i)-1),this.value.mask=n,r},insert(e,t,r){let i,n,s,l=t.add,o=this.value,a=this._dims,f=this._indices,d=e.fields,u={},h=r.add,m=o.size(),c=m+l.length,g=a.length;o.resize(c,g),o.add(l);const p=o.curr(),v=o.prev(),y=o.all();for(i=0;i<g;++i)n=d[i].fname,s=u[n]||(u[n]=f[n].insert(d[i],l,m)),a[i].onAdd(s,p);for(;m<c;++m)v[m]=y,p[m]!==y&&h.push(m)},modify(e,t){let r,i,n,s=t.mod,l=this.value,o=l.curr(),a=l.all(),f=e.mod;for(r=0,i=f.length;r<i;++r)n=f[r]._index,o[n]!==a&&s.push(n)},remove(e,t,r){let i,n,s,l,o=this._indices,a=this.value,f=a.curr(),d=a.prev(),u=a.all(),h={},m=r.rem,c=t.rem;for(i=0,n=c.length;i<n;++i)s=c[i]._index,h[s]=1,d[s]=l=f[s],f[s]=u,l!==u&&m.push(s);for(s in o)o[s].remove(n,h);return this.reindex(t,n,h),h},reindex(e,t,r){const i=this._indices,n=this.value;e.runAfter(()=>{const e=n.remove(t,r);for(const t in i)i[t].reindex(e)})},update(e,t,r){let i,n,s=this._dims,l=e.query,o=t.stamp,a=s.length,f=0;for(r.filters=0,n=0;n<a;++n)e.modified("query",n)&&(i=n,++f);if(1===f)f=s[i].one,this.incrementOne(s[i],l[i],r.add,r.rem);else for(n=0,f=0;n<a;++n)e.modified("query",n)&&(f|=s[n].one,this.incrementAll(s[n],l[n],o,r.add),r.rem=r.add);return f},incrementAll(e,t,r,i){let n,s,l,o=this.value,a=o.seen(),f=o.curr(),d=o.prev(),u=e.index(),h=e.bisect(e.range),m=e.bisect(t),c=m[0],g=m[1],p=h[0],v=h[1],y=e.one;if(c<p)for(n=c,s=Math.min(p,g);n<s;++n)l=u[n],a[l]!==r&&(d[l]=f[l],a[l]=r,i.push(l)),f[l]^=y;else if(c>p)for(n=p,s=Math.min(c,v);n<s;++n)l=u[n],a[l]!==r&&(d[l]=f[l],a[l]=r,i.push(l)),f[l]^=y;if(g>v)for(n=Math.max(c,v),s=g;n<s;++n)l=u[n],a[l]!==r&&(d[l]=f[l],a[l]=r,i.push(l)),f[l]^=y;else if(g<v)for(n=Math.max(p,g),s=v;n<s;++n)l=u[n],a[l]!==r&&(d[l]=f[l],a[l]=r,i.push(l)),f[l]^=y;e.range=t.slice()},incrementOne(e,t,r,i){let n,s,l,o=this.value.curr(),a=e.index(),f=e.bisect(e.range),d=e.bisect(t),u=d[0],h=d[1],m=f[0],c=f[1],g=e.one;if(u<m)for(n=u,s=Math.min(m,h);n<s;++n)l=a[n],o[l]^=g,r.push(l);else if(u>m)for(n=m,s=Math.min(u,c);n<s;++n)l=a[n],o[l]^=g,i.push(l);if(h>c)for(n=Math.max(u,c),s=h;n<s;++n)l=a[n],o[l]^=g,r.push(l);else if(h<c)for(n=Math.max(m,h),s=c;n<s;++n)l=a[n],o[l]^=g,i.push(l);e.range=t.slice()}}),u.Definition={type:"ResolveFilter",metadata:{},params:[{name:"ignore",type:"number",required:!0,description:"A bit mask indicating which filters to ignore."},{name:"filter",type:"object",required:!0,description:"Per-tuple filter bitmaps from a CrossFilter transform."}]},i.inherits(u,r.Transform,{transform(e,t){const r=~(e.ignore||0),i=e.filter,n=i.mask;if(0==(n&r))return t.StopPropagation;const s=t.fork(t.ALL),l=i.data(),o=i.curr(),a=i.prev(),f=e=>o[e]&r?null:l[e];return s.filter(s.MOD,f),n&n-1?(s.filter(s.ADD,e=>{const t=o[e]&r;return!t&&t^a[e]&r?l[e]:null}),s.filter(s.REM,e=>{const t=o[e]&r;return t&&!(t^t^a[e]&r)?l[e]:null})):(s.filter(s.ADD,f),s.filter(s.REM,e=>(o[e]&r)===n?l[e]:null)),s.filter(s.SOURCE,e=>f(e._index))}}),e.crossfilter=d,e.resolvefilter=u,Object.defineProperty(e,"__esModule",{value:!0})}));